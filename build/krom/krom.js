// Generated by Haxe 3.4.4
var $hx_exports = typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this;
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
;$hx_exports["kha"]["_Color"] = $hx_exports["kha"]["_Color"] || {};
var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this;
var $hxClasses = $hxClasses || {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = $hxClasses["HxOverrides"] = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = $hxClasses["Lambda"] = function() { };
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var List = $hxClasses["List"] = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = $hxClasses["_List.ListNode"] = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = $hxClasses["_List.ListIterator"] = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var Main = $hxClasses["Main"] = function() { };
Main.__name__ = true;
Main.main = function() {
	kha_System.init({ title : "Empty", width : 640, height : 480},function() {
		iron_App.init(Main.ready);
	});
};
Main.ready = function() {
	haxe_Log.trace("SDF: Make tex",{ fileName : "Main.hx", lineNumber : 17, className : "Main", methodName : "ready"});
	iron_Scene.setActive("Scene");
	var path = "mesh.obj";
	iron_data_Data.getBlob(path,function(md) {
		var obj = new ObjLoader(md.toString());
		var pa = obj.indexedVertices;
		var ia = obj.indices;
		Main.numverts = ia.length;
		var stride = 16384;
		var w = Math.min(Main.numverts,stride) | 0;
		var h = (Main.numverts / stride | 0) + 1;
		var o = new haxe_io_BytesOutput();
		var _g1 = 0;
		var _g = Main.numverts;
		while(_g1 < _g) {
			var i = _g1++;
			o.writeFloat(pa[ia[i] * 3]);
			o.writeFloat(pa[ia[i] * 3 + 1]);
			o.writeFloat(pa[ia[i] * 3 + 2]);
			o.writeFloat(0.0);
		}
		var _g11 = Main.numverts;
		var _g2 = w * h * 4;
		while(_g11 < _g2) {
			var i1 = _g11++;
			o.writeFloat(0.0);
		}
		Main.meshtex = kha_Image.fromBytes(o.getBytes(),w,h,kha_graphics4_TextureFormat.RGBA64,kha_graphics4_Usage.StaticUsage);
		iron_object_Uniforms.externalTextureLinks = [Main.externalTextureLink];
		iron_object_Uniforms.externalIntLinks = [Main.externalIntLink];
	});
};
Main.externalTextureLink = function(tulink) {
	if(tulink == "_meshtex") {
		return Main.meshtex;
	}
	return null;
};
Main.externalIntLink = function(clink) {
	if(clink == "_meshverts") {
		return Main.numverts;
	}
	return 0;
};
Main.begin = function() {
	haxe_Log.trace("SDF: GPU",{ fileName : "Main.hx", lineNumber : 94, className : "Main", methodName : "begin"});
	Main.startTime = kha_Scheduler.realTime();
};
Main.end = function() {
	haxe_Log.trace("SDF: " + ((kha_Scheduler.realTime() - Main.startTime) * 10000 | 0) / 10 + "ms processing " + Main.numverts + " vertices",{ fileName : "Main.hx", lineNumber : 99, className : "Main", methodName : "end"});
	haxe_Log.trace("SDF: Write",{ fileName : "Main.hx", lineNumber : 100, className : "Main", methodName : "end"});
	var _this = iron_Scene.active.camera.data.pathdata.renderTargets;
	var image = (__map_reserved["sdf"] != null ? _this.getReserved("sdf") : _this.h["sdf"]).image;
	var b = image.getPixels();
	Krom.fileSaveBytes("out.bin",b.b.bufferValue);
	haxe_Log.trace("SDF: Done",{ fileName : "Main.hx", lineNumber : 110, className : "Main", methodName : "end"});
	kha_System.requestShutdown();
};
Math.__name__ = true;
var ObjLoader = $hxClasses["ObjLoader"] = function(objData) {
	var vertices = [];
	var uvs = [];
	var normals = [];
	var vertexIndices = [];
	var uvIndices = [];
	var normalIndices = [];
	var tempVertices = [];
	var tempUVs = [];
	var tempNormals = [];
	var lines = objData.split("\n");
	var _g1 = 0;
	var _g = lines.length;
	while(_g1 < _g) {
		var i = _g1++;
		var words = lines[i].split(" ");
		if(words[0] == "v") {
			var vector = [];
			vector.push(parseFloat(words[1]));
			vector.push(parseFloat(words[2]));
			vector.push(parseFloat(words[3]));
			tempVertices.push(vector);
		} else if(words[0] == "vt") {
			var vector1 = [];
			vector1.push(parseFloat(words[1]));
			vector1.push(parseFloat(words[2]));
			tempUVs.push(vector1);
		} else if(words[0] == "vn") {
			var vector2 = [];
			vector2.push(parseFloat(words[1]));
			vector2.push(parseFloat(words[2]));
			vector2.push(parseFloat(words[3]));
			tempNormals.push(vector2);
		} else if(words[0] == "f") {
			var sec1 = words[1].split("/");
			var sec2 = words[2].split("/");
			var sec3 = words[3].split("/");
			vertexIndices.push(parseFloat(sec1[0]) | 0);
			vertexIndices.push(parseFloat(sec2[0]) | 0);
			vertexIndices.push(parseFloat(sec3[0]) | 0);
			uvIndices.push(parseFloat(sec1[1]) | 0);
			uvIndices.push(parseFloat(sec2[1]) | 0);
			uvIndices.push(parseFloat(sec3[1]) | 0);
			normalIndices.push(parseFloat(sec1[2]) | 0);
			normalIndices.push(parseFloat(sec2[2]) | 0);
			normalIndices.push(parseFloat(sec3[2]) | 0);
		}
	}
	var _g11 = 0;
	var _g2 = vertexIndices.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var vertex = tempVertices[vertexIndices[i1] - 1];
		var uv = tempUVs[uvIndices[i1] - 1];
		var normal = tempNormals[normalIndices[i1] - 1];
		vertices.push(vertex[0]);
		vertices.push(vertex[1]);
		vertices.push(vertex[2]);
		uvs.push(uv[0]);
		uvs.push(uv[1]);
		normals.push(normal[0]);
		normals.push(normal[1]);
		normals.push(normal[2]);
	}
	this.build(vertices,uvs,normals);
	this.data = [];
	var _g12 = 0;
	var _g3 = vertices.length / 3 | 0;
	while(_g12 < _g3) {
		var i2 = _g12++;
		this.data.push(this.indexedVertices[i2 * 3]);
		this.data.push(this.indexedVertices[i2 * 3 + 1]);
		this.data.push(this.indexedVertices[i2 * 3 + 2]);
		this.data.push(this.indexedUVs[i2 * 2]);
		this.data.push(1 - this.indexedUVs[i2 * 2 + 1]);
		this.data.push(this.indexedNormals[i2 * 3]);
		this.data.push(this.indexedNormals[i2 * 3 + 1]);
		this.data.push(this.indexedNormals[i2 * 3 + 2]);
	}
};
ObjLoader.__name__ = true;
ObjLoader.prototype = {
	build: function(vertices,uvs,normals) {
		this.indexedVertices = [];
		this.indexedUVs = [];
		this.indexedNormals = [];
		this.indices = [];
		var _g1 = 0;
		var _g = vertices.length / 3 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			var found = this.getSimilarVertexIndex(vertices[i * 3],vertices[i * 3 + 1],vertices[i * 3 + 2],uvs[i * 2],uvs[i * 2 + 1],normals[i * 3],normals[i * 3 + 1],normals[i * 3 + 2]);
			if(found) {
				this.indices.push(this.index);
			} else {
				this.indexedVertices.push(vertices[i * 3]);
				this.indexedVertices.push(vertices[i * 3 + 1]);
				this.indexedVertices.push(vertices[i * 3 + 2]);
				this.indexedUVs.push(uvs[i * 2]);
				this.indexedUVs.push(uvs[i * 2 + 1]);
				this.indexedNormals.push(normals[i * 3]);
				this.indexedNormals.push(normals[i * 3 + 1]);
				this.indexedNormals.push(normals[i * 3 + 2]);
				this.indices.push((this.indexedVertices.length / 3 | 0) - 1);
			}
		}
	}
	,isNear: function(v1,v2) {
		return Math.abs(v1 - v2) < 0.001;
	}
	,getSimilarVertexIndex: function(vertexX,vertexY,vertexZ,uvX,uvY,normalX,normalY,normalZ) {
		var _g1 = 0;
		var _g = this.indexedVertices.length / 3 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.isNear(vertexX,this.indexedVertices[i * 3]) && this.isNear(vertexY,this.indexedVertices[i * 3 + 1]) && this.isNear(vertexZ,this.indexedVertices[i * 3 + 2]) && this.isNear(uvX,this.indexedUVs[i * 2]) && this.isNear(uvY,this.indexedUVs[i * 2 + 1]) && this.isNear(normalX,this.indexedNormals[i * 3]) && this.isNear(normalY,this.indexedNormals[i * 3 + 1]) && this.isNear(normalZ,this.indexedNormals[i * 3 + 2])) {
				this.index = i;
				return true;
			}
		}
		return false;
	}
	,__class__: ObjLoader
};
var Reflect = $hxClasses["Reflect"] = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = $hxClasses["Std"] = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = $hxClasses["StringTools"] = function() { };
StringTools.__name__ = true;
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = $hxClasses["Type"] = function() { };
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var _$UInt_UInt_$Impl_$ = $hxClasses["_UInt.UInt_Impl_"] = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var haxe_IMap = $hxClasses["haxe.IMap"] = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = $hxClasses["haxe._Int64.___Int64"] = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = $hxClasses["haxe.Log"] = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe__$Unserializer_DefaultResolver = $hxClasses["haxe._Unserializer.DefaultResolver"] = function() {
};
haxe__$Unserializer_DefaultResolver.__name__ = true;
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = $hxClasses["haxe.Unserializer"] = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = $hxClasses["haxe.crypto.Adler32"] = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_ds_IntMap = $hxClasses["haxe.ds.IntMap"] = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = $hxClasses["haxe.ds.ObjectMap"] = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = $hxClasses["haxe.ds._StringMap.StringMapIterator"] = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = $hxClasses["haxe.ds.StringMap"] = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = $hxClasses["haxe.io.Bytes"] = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = $hxClasses["haxe.io.BytesBuffer"] = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = $hxClasses["haxe.io.Input"] = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = $hxClasses["haxe.io.BytesInput"] = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: $extend(haxe_io_Input.prototype.__properties__,{set_position:"set_position"})
});
var haxe_io_Output = $hxClasses["haxe.io.Output"] = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = $hxClasses["haxe.io.BytesOutput"] = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = $hxClasses["haxe.io.Eof"] = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = $hxClasses["haxe.io.FPHelper"] = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_zip_ExtraField = $hxClasses["haxe.zip.ExtraField"] = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"] };
haxe_zip_ExtraField.FUnknown = function(tag,bytes) { var $x = ["FUnknown",0,tag,bytes]; $x.__enum__ = haxe_zip_ExtraField; $x.toString = $estr; return $x; };
haxe_zip_ExtraField.FInfoZipUnicodePath = function(name,crc) { var $x = ["FInfoZipUnicodePath",1,name,crc]; $x.__enum__ = haxe_zip_ExtraField; $x.toString = $estr; return $x; };
haxe_zip_ExtraField.FUtf8 = ["FUtf8",2];
haxe_zip_ExtraField.FUtf8.toString = $estr;
haxe_zip_ExtraField.FUtf8.__enum__ = haxe_zip_ExtraField;
var haxe_zip_Huffman = $hxClasses["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = $hxClasses["haxe.zip.HuffTools"] = function() {
};
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = $hxClasses["haxe.zip._InflateImpl.Window"] = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxClasses["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = $hxClasses["haxe.zip.InflateImpl"] = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = $hxClasses["haxe.zip.Reader"] = function(i) {
	this.i = i;
};
haxe_zip_Reader.__name__ = true;
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	var c = new haxe_zip_Uncompress(-15);
	var s = new haxe_io_Bytes(new ArrayBuffer(f.fileSize));
	var r = c.execute(f.data,0,s,0);
	c.close();
	if(!r.done || r.read != f.data.length || r.write != f.fileSize) {
		throw new js__$Boot_HaxeError("Invalid compressed data for " + f.fileName);
	}
	f.compressed = false;
	f.dataSize = f.fileSize;
	f.data = s;
	return f.data;
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new List();
		while(length > 0) {
			if(length < 4) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.b.push(version);
					var src = this.i.read(len - 1);
					var b1 = data.b;
					var b2 = src.b;
					var _g1 = 0;
					var _g = src.length;
					while(_g1 < _g) {
						var i = _g1++;
						data.b.push(b2[i]);
					}
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw new js__$Boot_HaxeError("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw new js__$Boot_HaxeError("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw new js__$Boot_HaxeError("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					var bufSize = 65536;
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,bufSize);
						if(n < 0 || n > tmp.length) {
							throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
						}
						var b1 = out.b;
						var b2 = tmp.b;
						var _g1 = 0;
						var _g = n;
						while(_g1 < _g) {
							var i = _g1++;
							out.b.push(b2[i]);
						}
						if(n < bufSize) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var haxe_zip_Uncompress = $hxClasses["haxe.zip.Uncompress"] = function(windowBits) {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.prototype = {
	execute: function(src,srcPos,dst,dstPos) {
		return null;
	}
	,close: function() {
	}
	,__class__: haxe_zip_Uncompress
};
var iron_App = $hxClasses["iron.App"] = function(_appReady) {
	_appReady();
	kha_System.notifyOnRender(iron_App.render);
	kha_Scheduler.addTimeTask(iron_App.update,0,0.0166666666666666664);
};
iron_App.__name__ = true;
iron_App.w = function() {
	return kha_System.windowWidth();
};
iron_App.h = function() {
	return kha_System.windowHeight();
};
iron_App.init = function(_appReady) {
	new iron_App(_appReady);
};
iron_App.reset = function() {
	iron_App.traitInits = [];
	iron_App.traitUpdates = [];
	iron_App.traitLateUpdates = [];
	iron_App.traitRenders = [];
	iron_App.traitRenders2D = [];
	iron_system_Input.reset();
	iron_system_Tween.reset();
};
iron_App.update = function() {
	iron_system_Tween.update();
	iron_system_Time.update();
	if(iron_Scene.active != null) {
		iron_Scene.active.updateFrame();
	}
	if(iron_App.traitInits.length > 0) {
		var _g = 0;
		var _g1 = iron_App.traitInits;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitInits.length == 0) {
				break;
			}
			f();
			f = null;
		}
		iron_App.traitInits.splice(0,iron_App.traitInits.length);
	}
	var _g2 = 0;
	var _g11 = iron_App.traitUpdates;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		if(iron_App.traitUpdates.length == 0) {
			break;
		}
		f1();
	}
	var _g3 = 0;
	var _g12 = iron_App.traitLateUpdates;
	while(_g3 < _g12.length) {
		var f2 = _g12[_g3];
		++_g3;
		if(iron_App.traitLateUpdates.length == 0) {
			break;
		}
		f2();
	}
	iron_system_Input.endFrame();
};
iron_App.render = function(frame) {
	if(iron_App.traitInits.length > 0) {
		var _g = 0;
		var _g1 = iron_App.traitInits;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitInits.length == 0) {
				break;
			}
			f();
			f = null;
		}
		iron_App.traitInits.splice(0,iron_App.traitInits.length);
	}
	if(iron_Scene.active != null) {
		iron_Scene.active.renderFrame(frame.get_g4());
	}
	var _g2 = 0;
	var _g11 = iron_App.traitRenders;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		if(iron_App.traitRenders.length == 0) {
			break;
		}
		f1(frame.get_g4());
	}
	frame.get_g2().begin(false);
	var _g3 = 0;
	var _g12 = iron_App.traitRenders2D;
	while(_g3 < _g12.length) {
		var f2 = _g12[_g3];
		++_g3;
		if(iron_App.traitRenders2D.length == 0) {
			break;
		}
		f2(frame.get_g2());
	}
	frame.get_g2().end();
};
iron_App.notifyOnInit = function(f) {
	iron_App.traitInits.push(f);
};
iron_App.removeInit = function(f) {
	HxOverrides.remove(iron_App.traitInits,f);
};
iron_App.notifyOnUpdate = function(f) {
	iron_App.traitUpdates.push(f);
};
iron_App.removeUpdate = function(f) {
	HxOverrides.remove(iron_App.traitUpdates,f);
};
iron_App.notifyOnLateUpdate = function(f) {
	iron_App.traitLateUpdates.push(f);
};
iron_App.removeLateUpdate = function(f) {
	HxOverrides.remove(iron_App.traitLateUpdates,f);
};
iron_App.notifyOnRender = function(f) {
	iron_App.traitRenders.push(f);
};
iron_App.removeRender = function(f) {
	HxOverrides.remove(iron_App.traitRenders,f);
};
iron_App.notifyOnRender2D = function(f) {
	iron_App.traitRenders2D.push(f);
};
iron_App.removeRender2D = function(f) {
	HxOverrides.remove(iron_App.traitRenders2D,f);
};
iron_App.prototype = {
	__class__: iron_App
};
var iron_Scene = $hxClasses["iron.Scene"] = function() {
	this.traitInits = [];
	this.sceneStream = null;
	this.meshBatch = null;
	this.greasePencil = null;
	this.meshes = [];
	this.lamps = [];
	this.cameras = [];
	this.speakers = [];
	this.decals = [];
	this.empties = [];
	this.animations = [];
	this.embedded = new haxe_ds_StringMap();
	this.root = new iron_object_Object();
	this.traitInits = [];
};
iron_Scene.__name__ = true;
iron_Scene.create = function(format,done) {
	iron_Scene.active = new iron_Scene();
	iron_Scene.active.ready = false;
	iron_Scene.active.raw = format;
	iron_data_Data.getWorld(format.name,format.world_ref,function(world) {
		iron_Scene.active.world = world;
		iron_Scene.active.addScene(format.name,null,function(sceneObject) {
			if(iron_Scene.active.cameras.length == 0) {
				haxe_Log.trace("No camera found for scene \"" + format.name + "\"!",{ fileName : "Scene.hx", lineNumber : 84, className : "iron.Scene", methodName : "create"});
				done(null);
			}
			iron_Scene.active.camera = iron_Scene.active.getCamera(format.camera_ref);
			done(sceneObject);
			var _g = 0;
			var _g1 = iron_Scene.active.traitInits;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
			iron_Scene.active.traitInits = [];
		});
	});
};
iron_Scene.patch = function() {
};
iron_Scene.patchTrait = function(traitName) {
};
iron_Scene.setActive = function(sceneName,done) {
	if(!iron_Scene.framePassed) {
		return;
	}
	iron_Scene.framePassed = false;
	if(iron_Scene.active != null) {
		iron_Scene.active.remove();
	}
	iron_data_Data.getSceneRaw(sceneName,function(format) {
		iron_Scene.create(format,function(o) {
			if(done != null) {
				done(o);
			}
			iron_Scene.active.ready = true;
		});
	});
};
iron_Scene.generateTranform = function(object,transform) {
	transform.world = iron_math_Mat4.fromFloat32Array(object.transform.values);
	transform.world.decompose(transform.loc,transform.rot,transform.scale);
	if(object.local_transform_only != null) {
		transform.localOnly = object.local_transform_only;
	}
	if(transform.object.parent != null) {
		transform.update();
	}
};
iron_Scene.setupAnimation = function(setup,object) {
	if(setup == null) {
		return;
	}
	object.setupAnimation(setup);
};
iron_Scene.createTraits = function(traits,object) {
	if(traits == null) {
		return;
	}
	var _g = 0;
	while(_g < traits.length) {
		var t = traits[_g];
		++_g;
		if(t.type == "Script") {
			var args = [];
			if(t.parameters != null) {
				var _g1 = 0;
				var _g2 = t.parameters;
				while(_g1 < _g2.length) {
					var param = _g2[_g1];
					++_g1;
					args.push(iron_Scene.parseArg(param));
				}
			}
			var traitInst = iron_Scene.createTraitClassInstance(t.class_name,args);
			if(traitInst == null) {
				haxe_Log.trace("Error: Trait '" + t.class_name + "' referenced in object '" + object.name + "' not found",{ fileName : "Scene.hx", lineNumber : 522, className : "iron.Scene", methodName : "createTraits"});
				continue;
			}
			if(t.props != null) {
				var _g21 = 0;
				var _g11 = t.props.length / 2 | 0;
				while(_g21 < _g11) {
					var i = _g21++;
					var pname = t.props[i * 2];
					var pval = t.props[i * 2 + 1];
					Reflect.setProperty(traitInst,pname,iron_Scene.parseArg(pval));
				}
			}
			object.addTrait(traitInst);
		}
	}
};
iron_Scene.parseArg = function(str) {
	if(str == "true") {
		return true;
	} else if(str == "false") {
		return false;
	} else if(str.charAt(0) == "'") {
		return StringTools.replace(str,"'","");
	} else if(str.charAt(0) == "[") {
		str = StringTools.replace(str,"[","");
		str = StringTools.replace(str,"]","");
		str = StringTools.replace(str," ","");
		var ar = [];
		var s = str.split(",");
		var _g = 0;
		while(_g < s.length) {
			var childStr = s[_g];
			++_g;
			ar.push(iron_Scene.parseArg(childStr));
		}
		return ar;
	} else {
		var f = parseFloat(str);
		var i = Std.parseInt(str);
		if(f == i) {
			return i;
		} else {
			return f;
		}
	}
};
iron_Scene.createConstraints = function(constraints,object) {
	if(constraints == null) {
		return;
	}
	object.constraints = [];
	var _g = 0;
	while(_g < constraints.length) {
		var c = constraints[_g];
		++_g;
		var constr = new iron_object_Constraint(c);
		object.constraints.push(constr);
	}
};
iron_Scene.createTraitClassInstance = function(traitName,args) {
	var cname = Type.resolveClass(traitName);
	if(cname == null) {
		return null;
	}
	return Type.createInstance(cname,args);
};
iron_Scene.prototype = {
	remove: function() {
		if(this.meshBatch != null) {
			this.meshBatch.remove();
		}
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.remove();
		}
		var _g2 = 0;
		var _g11 = this.lamps;
		while(_g2 < _g11.length) {
			var o1 = _g11[_g2];
			++_g2;
			o1.remove();
		}
		var _g3 = 0;
		var _g12 = this.cameras;
		while(_g3 < _g12.length) {
			var o2 = _g12[_g3];
			++_g3;
			o2.remove();
		}
		var _g4 = 0;
		var _g13 = this.speakers;
		while(_g4 < _g13.length) {
			var o3 = _g13[_g4];
			++_g4;
			o3.remove();
		}
		var _g5 = 0;
		var _g14 = this.decals;
		while(_g5 < _g14.length) {
			var o4 = _g14[_g5];
			++_g5;
			o4.remove();
		}
		var _g6 = 0;
		var _g15 = this.empties;
		while(_g6 < _g15.length) {
			var o5 = _g15[_g6];
			++_g6;
			o5.remove();
		}
		this.root.remove();
	}
	,updateFrame: function() {
		if(!this.ready) {
			return;
		}
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var anim = _g1[_g];
			++_g;
			anim.update(0.0166666666666666664);
		}
	}
	,renderFrame: function(g) {
		if(!this.ready) {
			return;
		}
		iron_Scene.framePassed = true;
		var _g = 0;
		var _g1 = this.empties;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e != null && e.parent != null) {
				e.transform.update();
			}
		}
		var activeCamera = this.camera;
		var _g2 = 0;
		var _g11 = this.cameras;
		while(_g2 < _g11.length) {
			var cam = _g11[_g2];
			++_g2;
			if(cam.data.mirror != null) {
				this.camera = cam;
				this.camera.renderFrame(g,this.root,this.lamps);
			}
		}
		this.camera = activeCamera;
		this.camera.renderFrame(g,this.root,this.lamps);
	}
	,addObject: function(parent) {
		var object = new iron_object_Object();
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,getChild: function(name) {
		return this.root.getChild(name);
	}
	,getMesh: function(name) {
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == name) {
				return m;
			}
		}
		return null;
	}
	,getLamp: function(name) {
		var _g = 0;
		var _g1 = this.lamps;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.name == name) {
				return l;
			}
		}
		return null;
	}
	,getCamera: function(name) {
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				return c;
			}
		}
		return null;
	}
	,getSpeaker: function(name) {
		var _g = 0;
		var _g1 = this.speakers;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == name) {
				return s;
			}
		}
		return null;
	}
	,getEmpty: function(name) {
		var _g = 0;
		var _g1 = this.empties;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.name == name) {
				return e;
			}
		}
		return null;
	}
	,addMeshObject: function(data,materials,parent) {
		var object = new iron_object_MeshObject(data,materials);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addLampObject: function(data,parent) {
		var object = new iron_object_LampObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addCameraObject: function(data,parent) {
		var object = new iron_object_CameraObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addSpeakerObject: function(data,parent) {
		var object = new iron_object_SpeakerObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addDecalObject: function(material,parent) {
		var object = new iron_object_DecalObject(material);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addScene: function(sceneName,parent,done) {
		var _gthis = this;
		if(parent == null) {
			parent = this.addObject();
		}
		iron_data_Data.getSceneRaw(sceneName,function(format) {
			iron_Scene.createTraits(format.traits,parent);
			_gthis.loadEmbeddedData(format.embedded_datas,function() {
				if(format.grease_pencil_ref != null) {
					var ref = format.grease_pencil_ref.split("/");
					var object_file = "";
					var data_ref = "";
					if(ref.length == 2) {
						object_file = ref[0];
						data_ref = ref[1];
					} else {
						object_file = sceneName;
						data_ref = format.grease_pencil_ref;
					}
					iron_data_Data.getGreasePencil(object_file,data_ref,function(gp) {
						_gthis.greasePencil = gp;
					});
				}
				_gthis.objectsTraversed = 0;
				var format1 = format.objects;
				var tmp = _gthis.getObjectsCount(format.objects);
				_gthis.traverseObjects(format,parent,format1,null,function() {
					done(parent);
				},tmp);
			});
		});
	}
	,getObjectsCount: function(objects,discardNoSpawn) {
		if(discardNoSpawn == null) {
			discardNoSpawn = true;
		}
		var result = objects.length;
		var _g = 0;
		while(_g < objects.length) {
			var o = objects[_g];
			++_g;
			if(discardNoSpawn && o.spawn != null && o.spawn == false) {
				continue;
			}
			if(o.children != null) {
				result += this.getObjectsCount(o.children);
			}
		}
		return result;
	}
	,traverseObjects: function(format,parent,objects,parentObject,done,objectsCount) {
		var _gthis = this;
		if(objects == null) {
			return;
		}
		var _g1 = 0;
		var _g = objects.length;
		while(_g1 < _g) {
			var i = _g1++;
			var o = [objects[i]];
			if(o[0].spawn != null && o[0].spawn == false) {
				if(++this.objectsTraversed == objectsCount) {
					done();
				}
				continue;
			}
			var o1 = o[0];
			var tmp = (function(o2) {
				return function(object) {
					if(object != null) {
						_gthis.traverseObjects(format,object,o2[0].children,o2[0],done,objectsCount);
					}
					if(++_gthis.objectsTraversed == objectsCount) {
						done();
					}
				};
			})(o);
			this.createObject(o1,format,parent,parentObject,tmp);
		}
	}
	,spawnObject: function(name,parent,done,spawnChildren) {
		if(spawnChildren == null) {
			spawnChildren = true;
		}
		this.objectsTraversed2 = 0;
		var obj = this.getObj(this.raw,name);
		var objectsCount = spawnChildren ? this.getObjectsCount([obj],false) : 1;
		this.spawnObjectTree(obj,parent,done,spawnChildren,objectsCount);
	}
	,parseObject: function(sceneName,objectName,parent,done) {
		var _gthis = this;
		iron_data_Data.getSceneRaw(sceneName,function(format) {
			var o = _gthis.getObj(format,objectName);
			if(o == null) {
				done(null);
			}
			_gthis.createObject(o,format,parent,null,done);
		});
	}
	,spawnObjectTree: function(obj,parent,done,spawnChildren,objectsCount) {
		var _gthis = this;
		this.createObject(obj,this.raw,parent,null,function(object) {
			if(spawnChildren && obj.children != null) {
				var _g = 0;
				var _g1 = obj.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					_gthis.spawnObjectTree(child,object,done,spawnChildren,objectsCount);
				}
			}
			if(++_gthis.objectsTraversed2 == objectsCount) {
				done(object);
			}
		});
	}
	,getObj: function(format,name) {
		return this.traverseObjs(format.objects,name);
	}
	,traverseObjs: function(children,name) {
		var _g = 0;
		while(_g < children.length) {
			var o = children[_g];
			++_g;
			if(o.name == name) {
				return o;
			}
			if(o.children != null) {
				var res = this.traverseObjs(o.children,name);
				if(res != null) {
					return res;
				}
			}
		}
		return null;
	}
	,createObject: function(o,format,parent,parentObject,done) {
		var _gthis = this;
		var sceneName = format.name;
		if(o.type == "camera_object") {
			iron_data_Data.getCamera(sceneName,o.data_ref,function(b) {
				var object = _gthis.addCameraObject(b,parent);
				_gthis.returnObject(object,o,done);
			});
		} else if(o.type == "lamp_object") {
			iron_data_Data.getLamp(sceneName,o.data_ref,function(b1) {
				var object1 = _gthis.addLampObject(b1,parent);
				_gthis.returnObject(object1,o,done);
			});
		} else if(o.type == "mesh_object") {
			if(o.material_refs.length == 0) {
				var object2 = this.addObject(parent);
				if(o.dimensions != null) {
					object2.transform.setDimensions(o.dimensions[0],o.dimensions[1],o.dimensions[2]);
				}
				this.returnObject(object2,o,done);
			} else {
				var length = o.material_refs.length;
				var this1 = new Array(length);
				var materials = this1;
				var materialsLoaded = 0;
				var _g1 = 0;
				var _g = o.material_refs.length;
				while(_g1 < _g) {
					var i = [_g1++];
					var ref = o.material_refs[i[0]];
					var tmp = (function(i1) {
						return function(mat) {
							materials[i1[0]] = mat;
							materialsLoaded += 1;
							if(materialsLoaded == o.material_refs.length) {
								var ref1 = o.data_ref.split("/");
								var object_file = "";
								var data_ref = "";
								if(ref1.length == 2) {
									object_file = ref1[0];
									data_ref = ref1[1];
								} else {
									object_file = sceneName;
									data_ref = o.data_ref;
								}
								if(parentObject != null && parentObject.bones_ref != null) {
									iron_data_Data.getSceneRaw(parentObject.bones_ref,(function() {
										return function(boneformat) {
											var boneObjects = boneformat.objects;
											_gthis.returnMeshObject(object_file,data_ref,sceneName,boneObjects,materials,parent,o,done);
										};
									})());
								} else {
									_gthis.returnMeshObject(object_file,data_ref,sceneName,null,materials,parent,o,done);
								}
							}
						};
					})(i);
					iron_data_Data.getMaterial(sceneName,ref,tmp);
				}
			}
		} else if(o.type == "speaker_object") {
			var object3 = this.addSpeakerObject(iron_data_Data.getSpeakerRawByName(format.speaker_datas,o.data_ref),parent);
			this.returnObject(object3,o,done);
		} else if(o.type == "decal_object") {
			if(o.material_refs != null && o.material_refs.length > 0) {
				iron_data_Data.getMaterial(sceneName,o.material_refs[0],function(material) {
					var object4 = _gthis.addDecalObject(material,parent);
					_gthis.returnObject(object4,o,done);
				});
			} else {
				var object5 = this.addDecalObject(null,parent);
				this.returnObject(object5,o,done);
			}
		} else if(o.type == "object") {
			var object6 = this.addObject(parent);
			this.empties.push(object6);
			this.returnObject(object6,o,function(ro) {
				if(o.group_ref != null) {
					var spawned = 0;
					var object_refs = _gthis.getGroupObjectRefs(o.group_ref);
					var _g2 = 0;
					while(_g2 < object_refs.length) {
						var s = object_refs[_g2];
						++_g2;
						_gthis.spawnObject(s,ro,function(so) {
							if((spawned += 1) == object_refs.length) {
								done(ro);
							}
						});
					}
				} else {
					done(ro);
				}
			});
		} else {
			done(null);
		}
	}
	,getGroupObjectRefs: function(group_ref) {
		var _g = 0;
		var _g1 = this.raw.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.name == group_ref) {
				return g.object_refs;
			}
		}
		return null;
	}
	,returnMeshObject: function(object_file,data_ref,sceneName,boneObjects,materials,parent,o,done) {
		var _gthis = this;
		iron_data_Data.getMesh(object_file,data_ref,boneObjects,function(mesh) {
			var object = _gthis.addMeshObject(mesh,materials,parent);
			if(o.particle_refs != null && o.particle_refs.length > 0) {
				(js_Boot.__cast(object , iron_object_MeshObject)).setupParticleSystem(sceneName,o.particle_refs[0]);
			}
			if(o.dimensions != null) {
				object.transform.setDimensions(o.dimensions[0],o.dimensions[1],o.dimensions[2]);
			}
			_gthis.returnObject(object,o,done);
		});
	}
	,returnObject: function(object,o,done) {
		if(object != null) {
			object.raw = o;
			object.name = o.name;
			if(o.visible != null) {
				object.visible = o.visible;
			}
			if(o.visible_mesh != null) {
				object.visibleMesh = o.visible_mesh;
			}
			if(o.visible_shadow != null) {
				object.visibleShadow = o.visible_shadow;
			}
			iron_Scene.createConstraints(o.constraints,object);
			iron_Scene.generateTranform(o,object.transform);
			iron_Scene.setupAnimation(o.animation_setup,object);
			if(o.dimensions == null) {
				var sc = object.transform.scale;
				object.transform.setDimensions(2.0 * sc.x,2.0 * sc.y,2.0 * sc.z);
			}
			iron_Scene.createTraits(o.traits,object);
		}
		done(object);
	}
	,loadEmbeddedData: function(datas,done) {
		var _gthis = this;
		if(datas == null) {
			done();
			return;
		}
		var loaded = 0;
		var _g = 0;
		while(_g < datas.length) {
			var file = [datas[_g]];
			++_g;
			iron_data_Data.getImage(file[0],(function(file1) {
				return function(image) {
					var _this = _gthis.embedded;
					if(__map_reserved[file1[0]] != null) {
						_this.setReserved(file1[0],image);
					} else {
						_this.h[file1[0]] = image;
					}
					loaded += 1;
					if(loaded == datas.length) {
						done();
					}
				};
			})(file));
		}
	}
	,notifyOnInit: function(f) {
		if(this.ready) {
			f();
		} else {
			this.traitInits.push(f);
		}
	}
	,removeInit: function(f) {
		HxOverrides.remove(this.traitInits,f);
	}
	,toString: function() {
		return "Scene " + this.raw.name;
	}
	,__class__: iron_Scene
};
var iron_Trait = $hxClasses["iron.Trait"] = function() {
	this._render2D = null;
	this._render = null;
	this._lateUpdate = null;
	this._update = null;
	this._remove = null;
	this._init = null;
	this._add = null;
	this.name = "";
};
iron_Trait.__name__ = true;
iron_Trait.prototype = {
	remove: function() {
		this.object.removeTrait(this);
	}
	,notifyOnAdd: function(f) {
		if(this._add == null) {
			this._add = [];
		}
		this._add.push(f);
	}
	,notifyOnInit: function(f) {
		if(this._init == null) {
			this._init = [];
		}
		this._init.push(f);
		iron_App.notifyOnInit(f);
	}
	,notifyOnRemove: function(f) {
		if(this._remove == null) {
			this._remove = [];
		}
		this._remove.push(f);
	}
	,notifyOnUpdate: function(f) {
		if(this._update == null) {
			this._update = [];
		}
		this._update.push(f);
		iron_App.notifyOnUpdate(f);
	}
	,removeUpdate: function(f) {
		HxOverrides.remove(this._update,f);
		iron_App.removeUpdate(f);
	}
	,notifyOnLateUpdate: function(f) {
		if(this._lateUpdate == null) {
			this._lateUpdate = [];
		}
		this._lateUpdate.push(f);
		iron_App.notifyOnLateUpdate(f);
	}
	,removeLateUpdate: function(f) {
		HxOverrides.remove(this._lateUpdate,f);
		iron_App.removeLateUpdate(f);
	}
	,notifyOnRender: function(f) {
		if(this._render == null) {
			this._render = [];
		}
		this._render.push(f);
		iron_App.notifyOnRender(f);
	}
	,removeRender: function(f) {
		HxOverrides.remove(this._render,f);
		iron_App.removeRender(f);
	}
	,notifyOnRender2D: function(f) {
		if(this._render2D == null) {
			this._render2D = [];
		}
		this._render2D.push(f);
		iron_App.notifyOnRender2D(f);
	}
	,removeRender2D: function(f) {
		HxOverrides.remove(this._render2D,f);
		iron_App.removeRender2D(f);
	}
	,__class__: iron_Trait
};
var iron_data_Data = $hxClasses["iron.data.Data"] = function() {
};
iron_data_Data.__name__ = true;
iron_data_Data.deleteAll = function() {
	var _this = iron_data_Data.cachedMeshes;
	var c = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(c.hasNext()) {
		var c1 = c.next();
		c1["delete"]();
	}
	iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
	var _this1 = iron_data_Data.cachedShaders;
	var c2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
	while(c2.hasNext()) {
		var c3 = c2.next();
		c3["delete"]();
	}
	iron_data_Data.cachedShaders = new haxe_ds_StringMap();
	iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
	iron_data_Data.cachedLamps = new haxe_ds_StringMap();
	iron_data_Data.cachedCameras = new haxe_ds_StringMap();
	var _this2 = iron_data_Data.cachedRenderPaths;
	var c4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
	while(c4.hasNext()) {
		var c5 = c4.next();
		c5.unload();
	}
	iron_data_Data.cachedRenderPaths = new haxe_ds_StringMap();
	iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
	iron_data_Data.cachedParticles = new haxe_ds_StringMap();
	iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
	iron_data_Data.cachedGreasePencils = new haxe_ds_StringMap();
	var _this3 = iron_data_Data.cachedBlobs;
	var c6 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
	while(c6.hasNext()) {
		var c7 = c6.next();
		c7.unload();
	}
	iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
	var _this4 = iron_data_Data.cachedImages;
	var c8 = new haxe_ds__$StringMap_StringMapIterator(_this4,_this4.arrayKeys());
	while(c8.hasNext()) {
		var c9 = c8.next();
		c9.unload();
	}
	iron_data_Data.cachedImages = new haxe_ds_StringMap();
	var _this5 = iron_data_Data.cachedSounds;
	var c10 = new haxe_ds__$StringMap_StringMapIterator(_this5,_this5.arrayKeys());
	while(c10.hasNext()) {
		var c11 = c10.next();
		c11.unload();
	}
	iron_data_Data.cachedSounds = new haxe_ds_StringMap();
	var _this6 = iron_data_Data.cachedVideos;
	var c12 = new haxe_ds__$StringMap_StringMapIterator(_this6,_this6.arrayKeys());
	while(c12.hasNext()) {
		var c13 = c12.next();
		c13.unload();
	}
	iron_data_Data.cachedVideos = new haxe_ds_StringMap();
	var _this7 = iron_data_Data.cachedFonts;
	var c14 = new haxe_ds__$StringMap_StringMapIterator(_this7,_this7.arrayKeys());
	while(c14.hasNext()) {
		var c15 = c14.next();
		c15.unload();
	}
	iron_data_Data.cachedFonts = new haxe_ds_StringMap();
};
iron_data_Data.clearSceneData = function() {
	iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
	iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
	iron_data_Data.cachedLamps = new haxe_ds_StringMap();
	iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
	iron_data_Data.cachedRenderPaths = new haxe_ds_StringMap();
	iron_data_Data.cachedCameras = new haxe_ds_StringMap();
	iron_data_Data.cachedParticles = new haxe_ds_StringMap();
	iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
	iron_data_Data.cachedShaders = new haxe_ds_StringMap();
	iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
};
iron_data_Data.getMesh = function(file,name,boneObjects,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedMeshes;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingMeshes;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingMeshes;
	var key = file + name;
	var value = [done];
	if(__map_reserved[key] != null) {
		_this2.setReserved(key,value);
	} else {
		_this2.h[key] = value;
	}
	iron_data_MeshData.parse(file,name,boneObjects,function(b) {
		var _this3 = iron_data_Data.cachedMeshes;
		var key1 = file + name;
		if(__map_reserved[key1] != null) {
			_this3.setReserved(key1,b);
		} else {
			_this3.h[key1] = b;
		}
		b.handle = handle;
		var _g = 0;
		var _this4 = iron_data_Data.loadingMeshes;
		var key2 = file + name;
		var _g1 = __map_reserved[key2] != null ? _this4.getReserved(key2) : _this4.h[key2];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMeshes.remove(file + name);
	});
};
iron_data_Data.deleteMesh = function(handle) {
	var _this = iron_data_Data.cachedMeshes;
	var mesh = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(mesh == null) {
		return;
	}
	mesh["delete"]();
	iron_data_Data.cachedMeshes.remove(handle);
};
iron_data_Data.getLamp = function(file,name,done) {
	var _this = iron_data_Data.cachedLamps;
	var key = file + name;
	var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingLamps;
	var key1 = file + name;
	var loading = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingLamps;
	var key2 = file + name;
	var value = [done];
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value);
	} else {
		_this2.h[key2] = value;
	}
	iron_data_LampData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedLamps;
		var key3 = file + name;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,b);
		} else {
			_this3.h[key3] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingLamps;
		var key4 = file + name;
		var _g1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingLamps.remove(file + name);
	});
};
iron_data_Data.getCamera = function(file,name,done) {
	var _this = iron_data_Data.cachedCameras;
	var key = file + name;
	var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingCameras;
	var key1 = file + name;
	var loading = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingCameras;
	var key2 = file + name;
	var value = [done];
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value);
	} else {
		_this2.h[key2] = value;
	}
	iron_data_CameraData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedCameras;
		var key3 = file + name;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,b);
		} else {
			_this3.h[key3] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingCameras;
		var key4 = file + name;
		var _g1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingCameras.remove(file + name);
	});
};
iron_data_Data.getRenderPath = function(file,name,done) {
	var _this = iron_data_Data.cachedRenderPaths;
	var key = file + name;
	var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingRenderPaths;
	var key1 = file + name;
	var loading = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingRenderPaths;
	var key2 = file + name;
	var value = [done];
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value);
	} else {
		_this2.h[key2] = value;
	}
	iron_data_RenderPathData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedRenderPaths;
		var key3 = file + name;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,b);
		} else {
			_this3.h[key3] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingRenderPaths;
		var key4 = file + name;
		var _g1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingRenderPaths.remove(file + name);
	});
};
iron_data_Data.getMaterial = function(file,name,done) {
	var _this = iron_data_Data.cachedMaterials;
	var key = file + name;
	var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingMaterials;
	var key1 = file + name;
	var loading = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingMaterials;
	var key2 = file + name;
	var value = [done];
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value);
	} else {
		_this2.h[key2] = value;
	}
	iron_data_MaterialData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedMaterials;
		var key3 = file + name;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,b);
		} else {
			_this3.h[key3] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingMaterials;
		var key4 = file + name;
		var _g1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMaterials.remove(file + name);
	});
};
iron_data_Data.getParticle = function(file,name,done) {
	var _this = iron_data_Data.cachedParticles;
	var key = file + name;
	var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingParticles;
	var key1 = file + name;
	var loading = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingParticles;
	var key2 = file + name;
	var value = [done];
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value);
	} else {
		_this2.h[key2] = value;
	}
	iron_data_ParticleData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedParticles;
		var key3 = file + name;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,b);
		} else {
			_this3.h[key3] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingParticles;
		var key4 = file + name;
		var _g1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingParticles.remove(file + name);
	});
};
iron_data_Data.getWorld = function(file,name,done) {
	if(name == null) {
		done(null);
		return;
	}
	var _this = iron_data_Data.cachedWorlds;
	var key = file + name;
	var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingWorlds;
	var key1 = file + name;
	var loading = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingWorlds;
	var key2 = file + name;
	var value = [done];
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value);
	} else {
		_this2.h[key2] = value;
	}
	iron_data_WorldData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedWorlds;
		var key3 = file + name;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,b);
		} else {
			_this3.h[key3] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingWorlds;
		var key4 = file + name;
		var _g1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingWorlds.remove(file + name);
	});
};
iron_data_Data.getGreasePencil = function(file,name,done) {
	var _this = iron_data_Data.cachedGreasePencils;
	var key = file + name;
	var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingGreasePencils;
	var key1 = file + name;
	var loading = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingGreasePencils;
	var key2 = file + name;
	var value = [done];
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value);
	} else {
		_this2.h[key2] = value;
	}
	iron_data_GreasePencilData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedGreasePencils;
		var key3 = file + name;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,b);
		} else {
			_this3.h[key3] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingGreasePencils;
		var key4 = file + name;
		var _g1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingGreasePencils.remove(file + name);
	});
};
iron_data_Data.getShader = function(file,name,overrideContext,done) {
	var cacheName = name;
	if(overrideContext != null) {
		cacheName += "2";
	}
	var _this = iron_data_Data.cachedShaders;
	var cached = __map_reserved[cacheName] != null ? _this.getReserved(cacheName) : _this.h[cacheName];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingShaders;
	var loading = __map_reserved[cacheName] != null ? _this1.getReserved(cacheName) : _this1.h[cacheName];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingShaders;
	var value = [done];
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,value);
	} else {
		_this2.h[cacheName] = value;
	}
	iron_data_ShaderData.parse(file,name,overrideContext,function(b) {
		var _this3 = iron_data_Data.cachedShaders;
		if(__map_reserved[cacheName] != null) {
			_this3.setReserved(cacheName,b);
		} else {
			_this3.h[cacheName] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingShaders;
		var _g1 = __map_reserved[cacheName] != null ? _this4.getReserved(cacheName) : _this4.h[cacheName];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingShaders.remove(cacheName);
	});
};
iron_data_Data.getSceneRaw = function(file,done) {
	var _this = iron_data_Data.cachedSceneRaws;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingSceneRaws;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingSceneRaws;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var compressed = StringTools.endsWith(file,".zip");
	var ext = compressed || StringTools.endsWith(file,".arm") ? "" : ".arm";
	iron_data_Data.getBlob(file + ext,function(b) {
		if(compressed) {
			var input = new haxe_io_BytesInput(b.toBytes());
			var entry = haxe_zip_Reader.readZip(input).first();
			if(entry == null) {
				haxe_Log.trace("Failed to uncompress " + file,{ fileName : "Data.hx", lineNumber : 261, className : "iron.data.Data", methodName : "getSceneRaw"});
				return;
			}
			if(entry.compressed) {
				b = kha_internal_BytesBlob.fromBytes(haxe_zip_Reader.unzip(entry));
			} else {
				b = kha_internal_BytesBlob.fromBytes(entry.data);
			}
		}
		var s = b.toString();
		var parsed;
		if(s.charAt(0) == "{") {
			parsed = JSON.parse(s);
		} else {
			var i = new haxe_io_BytesInput(b.toBytes());
			i.set_bigEndian(true);
			parsed = iron_system_ArmPack.read(i);
		}
		iron_data_Data.returnSceneRaw(file,parsed);
	});
};
iron_data_Data.returnSceneRaw = function(file,parsed) {
	var _this = iron_data_Data.cachedSceneRaws;
	if(__map_reserved[file] != null) {
		_this.setReserved(file,parsed);
	} else {
		_this.h[file] = parsed;
	}
	var _g = 0;
	var _this1 = iron_data_Data.loadingSceneRaws;
	var _g1 = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		f(parsed);
	}
	iron_data_Data.loadingSceneRaws.remove(file);
};
iron_data_Data.getMeshRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getLampRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getCameraRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getRenderPathRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getMaterialRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getParticleRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getWorldRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getGreasePencilRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getShaderRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getSpeakerRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getBlob = function(file,done) {
	var _this = iron_data_Data.cachedBlobs;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingBlobs;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingBlobs;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var description = { files : [file]};
	kha_LoaderImpl.loadBlobFromDescription(description,function(b) {
		var _this3 = iron_data_Data.cachedBlobs;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingBlobs;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingBlobs.remove(file);
		iron_data_Data.assetsLoaded++;
	});
};
iron_data_Data.getImage = function(file,done,readable,format) {
	if(format == null) {
		format = "RGBA32";
	}
	if(readable == null) {
		readable = false;
	}
	var _this = iron_data_Data.cachedImages;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingImages;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingImages;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var description = { files : [file], readable : readable, format : format};
	kha_LoaderImpl.loadImageFromDescription(description,function(b) {
		var _this3 = iron_data_Data.cachedImages;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingImages;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingImages.remove(file);
		iron_data_Data.assetsLoaded++;
	});
};
iron_data_Data.getSound = function(file,done) {
	if(StringTools.endsWith(file,".wav")) {
		file = file.substring(0,file.length - 4) + ".ogg";
	}
	var _this = iron_data_Data.cachedSounds;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingSounds;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingSounds;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var description = { files : [file]};
	kha_LoaderImpl.loadSoundFromDescription(description,function(b) {
		b.uncompress(function() {
			var _this3 = iron_data_Data.cachedSounds;
			if(__map_reserved[file] != null) {
				_this3.setReserved(file,b);
			} else {
				_this3.h[file] = b;
			}
			var _g = 0;
			var _this4 = iron_data_Data.loadingSounds;
			var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(b);
			}
			iron_data_Data.loadingSounds.remove(file);
			iron_data_Data.assetsLoaded++;
		});
	});
};
iron_data_Data.getVideo = function(file,done) {
	var _this = iron_data_Data.cachedVideos;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingVideos;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingVideos;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var description = { files : [file]};
	kha_LoaderImpl.loadVideoFromDescription(description,function(b) {
		var _this3 = iron_data_Data.cachedVideos;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingVideos;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingVideos.remove(file);
		iron_data_Data.assetsLoaded++;
	});
};
iron_data_Data.getFont = function(file,done) {
	var _this = iron_data_Data.cachedFonts;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingFonts;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingFonts;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var description = { files : [file]};
	kha_LoaderImpl.loadFontFromDescription(description,function(b) {
		var _this3 = iron_data_Data.cachedFonts;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingFonts;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingFonts.remove(file);
		iron_data_Data.assetsLoaded++;
	});
};
iron_data_Data.prototype = {
	__class__: iron_data_Data
};
var iron_data_CameraData = $hxClasses["iron.data.CameraData"] = function(raw,done,file) {
	if(file == null) {
		file = "";
	}
	this.mirror = null;
	var _gthis = this;
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	var ref = raw.render_path.split("/");
	var object_file = "";
	var data_ref = "";
	if(ref.length == 2) {
		object_file = ref[0];
		data_ref = ref[1];
	} else {
		object_file = file;
		data_ref = raw.render_path;
	}
	iron_data_Data.getRenderPath(object_file,data_ref,function(b) {
		_gthis.pathdata = b;
		if(raw.render_to_texture) {
			_gthis.mirror = kha_Image.createRenderTarget(raw.texture_resolution_x,raw.texture_resolution_y,kha_graphics4_TextureFormat.RGBA32,0);
		}
		done(_gthis);
	});
};
iron_data_CameraData.__name__ = true;
iron_data_CameraData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getCameraRawByName(format.camera_datas,id);
		if(raw == null) {
			haxe_Log.trace("Camera data \"" + id + "\" not found!",{ fileName : "CameraData.hx", lineNumber : 47, className : "iron.data.CameraData", methodName : "parse"});
			done(null);
		}
		new iron_data_CameraData(raw,done,name);
	});
};
iron_data_CameraData.__super__ = iron_data_Data;
iron_data_CameraData.prototype = $extend(iron_data_Data.prototype,{
	__class__: iron_data_CameraData
});
var iron_data_ConstData = $hxClasses["iron.data.ConstData"] = function() { };
iron_data_ConstData.__name__ = true;
var iron_data_Geometry = $hxClasses["iron.data.Geometry"] = function(indices,materialIndices,positions,normals,uvs,uvs1,cols,tangents,bones,weights,usage,instanceOffsets) {
	this.skeletonTransformsI = null;
	this.skeletonTransforms = null;
	this.skeletonBones = null;
	this.skeletonBoneRefs = null;
	this.skinBoneWeights = null;
	this.skinBoneIndices = null;
	this.skinBoneCounts = null;
	this.skinTransformI = null;
	this.skinTransform = null;
	this.aabb = null;
	this.instanceCount = 0;
	this.instanced = false;
	this.instancedVB = null;
	this.numTris = 0;
	this.ready = false;
	if(usage == null) {
		usage = kha_graphics4_Usage.StaticUsage;
	}
	this.indices = indices;
	this.materialIndices = materialIndices;
	this.usage = usage;
	this.positions = positions;
	this.normals = normals;
	this.uvs = uvs;
	this.uvs1 = uvs1;
	this.cols = cols;
	this.tangents = tangents;
	this.bones = bones;
	this.weights = weights;
	this.instanceOffsets = instanceOffsets;
	this.struct = iron_data_Geometry.getVertexStructure(positions != null,normals != null,uvs != null,uvs1 != null,cols != null,tangents != null,bones != null,weights != null);
	this.structLength = this.struct.byteSize() / 4 | 0;
};
iron_data_Geometry.__name__ = true;
iron_data_Geometry.getVertexStructure = function(pos,nor,tex,tex1,col,tang,bone,weight) {
	if(weight == null) {
		weight = false;
	}
	if(bone == null) {
		bone = false;
	}
	if(tang == null) {
		tang = false;
	}
	if(col == null) {
		col = false;
	}
	if(tex1 == null) {
		tex1 = false;
	}
	if(tex == null) {
		tex = false;
	}
	if(nor == null) {
		nor = false;
	}
	if(pos == null) {
		pos = false;
	}
	var structure = new kha_graphics4_VertexStructure();
	if(pos) {
		structure.add("pos",kha_graphics4_VertexData.Float3);
	}
	if(nor) {
		structure.add("nor",kha_graphics4_VertexData.Float3);
	}
	if(tex) {
		structure.add("tex",kha_graphics4_VertexData.Float2);
	}
	if(tex1) {
		structure.add("tex1",kha_graphics4_VertexData.Float2);
	}
	if(col) {
		structure.add("col",kha_graphics4_VertexData.Float3);
	}
	if(tang) {
		structure.add("tang",kha_graphics4_VertexData.Float3);
	}
	if(bone) {
		structure.add("bone",kha_graphics4_VertexData.Float4);
	}
	if(weight) {
		structure.add("weight",kha_graphics4_VertexData.Float4);
	}
	return structure;
};
iron_data_Geometry.buildVertices = function(vertices,pa,na,uva,uva1,ca,tanga,bonea,weighta,offset) {
	if(offset == null) {
		offset = 0;
	}
	var numVertices = pa.length / 3 | 0;
	var di = -1 + offset;
	var _g1 = 0;
	var _g = numVertices;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[++di] = pa[i * 3];
		vertices[++di] = pa[i * 3 + 1];
		vertices[++di] = pa[i * 3 + 2];
		if(na != null) {
			vertices[++di] = na[i * 3];
			vertices[++di] = na[i * 3 + 1];
			vertices[++di] = na[i * 3 + 2];
		}
		if(uva != null) {
			vertices[++di] = uva[i * 2];
			vertices[++di] = uva[i * 2 + 1];
		}
		if(uva1 != null) {
			vertices[++di] = uva1[i * 2];
			vertices[++di] = uva1[i * 2 + 1];
		}
		if(ca != null) {
			vertices[++di] = ca[i * 3];
			vertices[++di] = ca[i * 3 + 1];
			vertices[++di] = ca[i * 3 + 2];
		}
		if(tanga != null) {
			vertices[++di] = tanga[i * 3];
			vertices[++di] = tanga[i * 3 + 1];
			vertices[++di] = tanga[i * 3 + 2];
		}
		if(bonea != null) {
			vertices[++di] = bonea[i * 4];
			vertices[++di] = bonea[i * 4 + 1];
			vertices[++di] = bonea[i * 4 + 2];
			vertices[++di] = bonea[i * 4 + 3];
		}
		if(weighta != null) {
			vertices[++di] = weighta[i * 4];
			vertices[++di] = weighta[i * 4 + 1];
			vertices[++di] = weighta[i * 4 + 2];
			vertices[++di] = weighta[i * 4 + 3];
		}
	}
};
iron_data_Geometry.prototype = {
	'delete': function() {
		this.vertexBuffer["delete"]();
		var _g = 0;
		var _g1 = this.indexBuffers;
		while(_g < _g1.length) {
			var buf = _g1[_g];
			++_g;
			buf["delete"]();
		}
	}
	,setupInstanced: function(offsets,usage) {
		this.offsetVecs = [];
		var _g1 = 0;
		var _g = offsets.length / 3 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			this.offsetVecs.push(new iron_math_Vec4(offsets[i * 3],offsets[i * 3 + 1],offsets[i * 3 + 2]));
		}
		this.instanced = true;
		this.instanceCount = offsets.length / 3 | 0;
		var structure = new kha_graphics4_VertexStructure();
		structure.instanced = true;
		structure.add("off",kha_graphics4_VertexData.Float3);
		this.instancedVB = new kha_graphics4_VertexBuffer(this.instanceCount,structure,usage,1);
		var vertices = this.instancedVB.lock();
		var _g11 = 0;
		var _g2 = vertices.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vertices[i1] = offsets[i1];
		}
		this.instancedVB.unlock();
	}
	,sortInstanced: function(camX,camY,camZ) {
		var _g = 0;
		var _g1 = this.offsetVecs;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var vx = camX - v.x;
			var vy = camY - v.y;
			var vz = camZ - v.z;
			v.w = Math.sqrt(vx * vx + vy * vy + vz * vz);
		}
		this.offsetVecs.sort(function(a,b) {
			if(a.w > b.w) {
				return 1;
			} else {
				return -1;
			}
		});
		var vb = this.instancedVB;
		var vertices = vb.lock();
		var _g11 = 0;
		var _g2 = vertices.length / 3 | 0;
		while(_g11 < _g2) {
			var i = _g11++;
			vertices[i * 3] = this.offsetVecs[i].x;
			vertices[i * 3 + 1] = this.offsetVecs[i].y;
			vertices[i * 3 + 2] = this.offsetVecs[i].z;
		}
		vb.unlock();
	}
	,copyVertices: function(vertices,offset) {
		if(offset == null) {
			offset = 0;
		}
		iron_data_Geometry.buildVertices(vertices,this.positions,this.normals,this.uvs,this.uvs1,this.cols,this.tangents,this.bones,this.weights,offset);
	}
	,getVerticesLength: function() {
		var res = this.positions.length;
		if(this.normals != null) {
			res += this.normals.length;
		}
		if(this.uvs != null) {
			res += this.uvs.length;
		}
		if(this.uvs1 != null) {
			res += this.uvs1.length;
		}
		if(this.cols != null) {
			res += this.cols.length;
		}
		if(this.tangents != null) {
			res += this.tangents.length;
		}
		if(this.bones != null) {
			res += this.bones.length;
		}
		if(this.weights != null) {
			res += this.weights.length;
		}
		return res;
	}
	,build: function() {
		if(this.ready) {
			return;
		}
		this.vertexBuffer = new kha_graphics4_VertexBuffer(this.positions.length / 3 | 0,this.struct,this.usage);
		this.vertices = this.vertexBuffer.lock();
		iron_data_Geometry.buildVertices(this.vertices,this.positions,this.normals,this.uvs,this.uvs1,this.cols,this.tangents,this.bones,this.weights);
		this.vertexBuffer.unlock();
		this.indexBuffers = [];
		var _g = 0;
		var _g1 = this.indices;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(id.length == 0) {
				continue;
			}
			var indexBuffer = new kha_graphics4_IndexBuffer(id.length,this.usage);
			this.numTris += id.length / 3 | 0;
			var indicesA = indexBuffer.lock();
			var _g3 = 0;
			var _g2 = indicesA.length;
			while(_g3 < _g2) {
				var i = _g3++;
				indicesA[i] = id[i];
			}
			indexBuffer.unlock();
			this.indexBuffers.push(indexBuffer);
		}
		if(this.instanceOffsets != null) {
			this.setupInstanced(this.instanceOffsets,this.usage);
		}
		this.ready = true;
	}
	,getVerticesCount: function() {
		return this.positions.length / 3 | 0;
	}
	,initSkeletonBones: function(bones) {
		this.skeletonBones = [];
		var _g = 0;
		var _g1 = this.skeletonBoneRefs;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < bones.length) {
				var b = bones[_g2];
				++_g2;
				if(b.name == s) {
					this.skeletonBones.push(b);
				}
			}
		}
	}
	,initSkeletonTransforms: function(transforms) {
		this.skeletonTransforms = [];
		this.skeletonTransformsI = [];
		var _g = 0;
		while(_g < transforms.length) {
			var t = transforms[_g];
			++_g;
			var m = iron_math_Mat4.fromFloat32Array(t);
			this.skeletonTransforms.push(m);
			var mi = iron_math_Mat4.identity();
			mi.getInverse(m);
			this.skeletonTransformsI.push(mi);
		}
	}
	,initSkinTransform: function(t) {
		this.skinTransform = iron_math_Mat4.fromFloat32Array(t);
		this.skinTransformI = iron_math_Mat4.identity();
		this.skinTransformI.getInverse(this.skinTransform);
	}
	,calculateAABB: function() {
		var aabbMin = new iron_math_Vec4(-0.01,-0.01,-0.01);
		var aabbMax = new iron_math_Vec4(0.01,0.01,0.01);
		this.aabb = new iron_math_Vec4();
		var i = 0;
		while(i < this.positions.length) {
			if(this.positions[i] > aabbMax.x) {
				aabbMax.x = this.positions[i];
			}
			if(this.positions[i + 1] > aabbMax.y) {
				aabbMax.y = this.positions[i + 1];
			}
			if(this.positions[i + 2] > aabbMax.z) {
				aabbMax.z = this.positions[i + 2];
			}
			if(this.positions[i] < aabbMin.x) {
				aabbMin.x = this.positions[i];
			}
			if(this.positions[i + 1] < aabbMin.y) {
				aabbMin.y = this.positions[i + 1];
			}
			if(this.positions[i + 2] < aabbMin.z) {
				aabbMin.z = this.positions[i + 2];
			}
			i += 3;
		}
		this.aabb.x = Math.abs(aabbMin.x) + Math.abs(aabbMax.x);
		this.aabb.y = Math.abs(aabbMin.y) + Math.abs(aabbMax.y);
		this.aabb.z = Math.abs(aabbMin.z) + Math.abs(aabbMax.z);
	}
	,__class__: iron_data_Geometry
};
var iron_data_GreasePencilData = $hxClasses["iron.data.GreasePencilData"] = function(raw,done) {
	var _gthis = this;
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	if(iron_data_GreasePencilData.structure == null) {
		iron_data_GreasePencilData.structure = new kha_graphics4_VertexStructure();
		iron_data_GreasePencilData.structure.add("pos",kha_graphics4_VertexData.Float3);
		iron_data_GreasePencilData.structure.add("col",kha_graphics4_VertexData.Float4);
		iron_data_GreasePencilData.usage = kha_graphics4_Usage.StaticUsage;
	}
	if(iron_data_GreasePencilData.first) {
		iron_data_GreasePencilData.first = false;
		var shaderName = raw.shader.split("/");
		iron_data_Data.getShader(shaderName[0],shaderName[1],null,function(b) {
			iron_data_GreasePencilData.shaderData = b;
			_gthis.makeLayers(done);
		});
	} else {
		this.makeLayers(done);
	}
};
iron_data_GreasePencilData.__name__ = true;
iron_data_GreasePencilData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getGreasePencilRawByName(format.grease_pencil_datas,id);
		if(raw == null) {
			haxe_Log.trace("Grease pencil data \"" + id + "\" not found!",{ fileName : "GreasePencilData.hx", lineNumber : 66, className : "iron.data.GreasePencilData", methodName : "parse"});
			done(null);
		}
		new iron_data_GreasePencilData(raw,done);
	});
};
iron_data_GreasePencilData.getContext = function(name) {
	return iron_data_GreasePencilData.shaderData.getContext(name);
};
iron_data_GreasePencilData.__super__ = iron_data_Data;
iron_data_GreasePencilData.prototype = $extend(iron_data_Data.prototype,{
	makeLayers: function(done) {
		this.layers = [];
		var _g = 0;
		var _g1 = this.raw.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			this.layers.push(new iron_data_GreasePencilLayer(l));
		}
		done(this);
	}
	,__class__: iron_data_GreasePencilData
});
var iron_data_GreasePencilLayer = $hxClasses["iron.data.GreasePencilLayer"] = function(l) {
	this.currentFrame = 0;
	this.name = l.name;
	this.frames = [];
	var _g = 0;
	var _g1 = l.frames;
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		this.frames.push(new iron_data_GreasePencilFrame(f));
	}
};
iron_data_GreasePencilLayer.__name__ = true;
iron_data_GreasePencilLayer.prototype = {
	__class__: iron_data_GreasePencilLayer
};
var iron_data_GreasePencilFrame = $hxClasses["iron.data.GreasePencilFrame"] = function(f) {
	this.raw = f;
	var va = f.vertex_array.values;
	var cola = f.col_array.values;
	var colfilla = f.colfill_array.values;
	var indices = f.index_array.values;
	this.numVertices = va.length / 3 | 0;
	this.vertexBuffer = new kha_graphics4_VertexBuffer(this.numVertices,iron_data_GreasePencilData.structure,iron_data_GreasePencilData.usage);
	var vertices = this.vertexBuffer.lock();
	var di = -1;
	var _g1 = 0;
	var _g = this.numVertices;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[++di] = va[i * 3];
		vertices[++di] = va[i * 3 + 1];
		vertices[++di] = va[i * 3 + 2];
		vertices[++di] = colfilla[i * 4];
		vertices[++di] = colfilla[i * 4 + 1];
		vertices[++di] = colfilla[i * 4 + 2];
		vertices[++di] = colfilla[i * 4 + 3];
	}
	this.vertexBuffer.unlock();
	this.indexBuffer = new kha_graphics4_IndexBuffer(indices.length,iron_data_GreasePencilData.usage);
	var indicesA = this.indexBuffer.lock();
	var _g11 = 0;
	var _g2 = indicesA.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		indicesA[i1] = indices[i1];
	}
	this.indexBuffer.unlock();
	this.vertexStrokeBuffer = new kha_graphics4_VertexBuffer(this.numVertices,iron_data_GreasePencilData.structure,iron_data_GreasePencilData.usage);
	vertices = this.vertexStrokeBuffer.lock();
	di = -1;
	var _g12 = 0;
	var _g3 = this.numVertices;
	while(_g12 < _g3) {
		var i2 = _g12++;
		vertices[++di] = va[i2 * 3];
		vertices[++di] = va[i2 * 3 + 1];
		vertices[++di] = va[i2 * 3 + 2];
		vertices[++di] = cola[i2 * 4];
		vertices[++di] = cola[i2 * 4 + 1];
		vertices[++di] = cola[i2 * 4 + 2];
		vertices[++di] = cola[i2 * 4 + 3];
	}
	this.vertexStrokeBuffer.unlock();
	if(iron_data_GreasePencilData.frameEnd < this.raw.frame_number) {
		iron_data_GreasePencilData.frameEnd = this.raw.frame_number;
	}
};
iron_data_GreasePencilFrame.__name__ = true;
iron_data_GreasePencilFrame.prototype = {
	'delete': function() {
		this.vertexBuffer["delete"]();
	}
	,__class__: iron_data_GreasePencilFrame
};
var iron_data_LampData = $hxClasses["iron.data.LampData"] = function(raw,done) {
	this.colorTexture = null;
	var _gthis = this;
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	if(raw.color_texture != null) {
		iron_data_Data.getImage(raw.color_texture,function(image) {
			_gthis.colorTexture = image;
			done(_gthis);
		});
	} else {
		done(this);
	}
};
iron_data_LampData.__name__ = true;
iron_data_LampData.typeToInt = function(s) {
	switch(s) {
	case "area":
		return 3;
	case "point":
		return 1;
	case "spot":
		return 2;
	case "sun":
		return 0;
	default:
		return 0;
	}
};
iron_data_LampData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getLampRawByName(format.lamp_datas,id);
		if(raw == null) {
			haxe_Log.trace("Lamp data \"" + id + "\" not found!",{ fileName : "LampData.hx", lineNumber : 42, className : "iron.data.LampData", methodName : "parse"});
			done(null);
		}
		new iron_data_LampData(raw,done);
	});
};
iron_data_LampData.__super__ = iron_data_Data;
iron_data_LampData.prototype = $extend(iron_data_Data.prototype,{
	__class__: iron_data_LampData
});
var iron_data_MaterialData = $hxClasses["iron.data.MaterialData"] = function(raw,done,file) {
	if(file == null) {
		file = "";
	}
	this.contexts = null;
	var _gthis = this;
	iron_data_Data.call(this);
	this.uid = ++iron_data_MaterialData.uidCounter;
	this.raw = raw;
	this.name = raw.name;
	var ref = raw.shader.split("/");
	var object_file = "";
	var data_ref = "";
	if(ref.length == 2) {
		object_file = ref[0];
		data_ref = ref[1];
	} else {
		object_file = file;
		data_ref = raw.shader;
	}
	iron_data_Data.getShader(object_file,data_ref,raw.override_context,function(b) {
		_gthis.shader = b;
		_gthis.contexts = [];
		while(_gthis.contexts.length < raw.contexts.length) _gthis.contexts.push(null);
		var contextsLoaded = 0;
		var _g1 = 0;
		var _g = raw.contexts.length;
		while(_g1 < _g) {
			var i = [_g1++];
			var c = raw.contexts[i[0]];
			new iron_data_MaterialContext(c,(function(i1) {
				return function(self) {
					_gthis.contexts[i1[0]] = self;
					contextsLoaded += 1;
					if(contextsLoaded == raw.contexts.length) {
						done(_gthis);
					}
				};
			})(i));
		}
	});
};
iron_data_MaterialData.__name__ = true;
iron_data_MaterialData.parse = function(file,name,done) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getMaterialRawByName(format.material_datas,name);
		if(raw == null) {
			haxe_Log.trace("Material data \"" + name + "\" not found!",{ fileName : "MaterialData.hx", lineNumber : 61, className : "iron.data.MaterialData", methodName : "parse"});
			done(null);
		}
		new iron_data_MaterialData(raw,done,file);
	});
};
iron_data_MaterialData.__super__ = iron_data_Data;
iron_data_MaterialData.prototype = $extend(iron_data_Data.prototype,{
	getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(HxOverrides.substr(c.raw.name,0,name.length) == name) {
				return c;
			}
		}
		return null;
	}
	,toString: function() {
		return "Material " + this.name;
	}
	,__class__: iron_data_MaterialData
});
var iron_data_MaterialContext = $hxClasses["iron.data.MaterialContext"] = function(raw,done) {
	this.id = 0;
	this.textures = null;
	var _gthis = this;
	this.raw = raw;
	this.id = iron_data_MaterialContext.num++;
	if(raw.bind_textures != null && raw.bind_textures.length > 0) {
		var length = raw.bind_textures.length;
		var this1 = new Array(length);
		this.textures = this1;
		var texturesLoaded = 0;
		var _g1 = 0;
		var _g = raw.bind_textures.length;
		while(_g1 < _g) {
			var i = [_g1++];
			var tex = [raw.bind_textures[i[0]]];
			if(tex[0].file == "") {
				texturesLoaded += 1;
				if(texturesLoaded == raw.bind_textures.length) {
					done(this);
				}
				continue;
			}
			iron_data_Data.getImage(tex[0].file,(function(tex1,i1) {
				return function(image) {
					_gthis.textures[i1[0]] = image;
					texturesLoaded += 1;
					if(tex1[0].mipmaps != null) {
						var mipmaps = [];
						while(mipmaps.length < tex1[0].mipmaps.length) mipmaps.push(null);
						var mipmapsLoaded = 0;
						var _g3 = 0;
						var _g2 = tex1[0].mipmaps.length;
						while(_g3 < _g2) {
							var j = [_g3++];
							var name = tex1[0].mipmaps[j[0]];
							iron_data_Data.getImage(name,(function(j1,tex2) {
								return function(mipimg) {
									mipmaps[j1[0]] = mipimg;
									mipmapsLoaded += 1;
									if(mipmapsLoaded == tex2[0].mipmaps.length) {
										image.setMipmaps(mipmaps);
										tex2[0].mipmaps = null;
										tex2[0].generate_mipmaps = false;
										if(texturesLoaded == raw.bind_textures.length) {
											done(_gthis);
										}
									}
								};
							})(j,tex1));
						}
					} else if(tex1[0].generate_mipmaps == true && image != null) {
						image.generateMipmaps(1000);
						tex1[0].mipmaps = null;
						tex1[0].generate_mipmaps = false;
						if(texturesLoaded == raw.bind_textures.length) {
							done(_gthis);
						}
					} else if(texturesLoaded == raw.bind_textures.length) {
						done(_gthis);
					}
				};
			})(tex,i),false,tex[0].format != null ? tex[0].format : "RGBA32");
		}
	} else {
		done(this);
	}
};
iron_data_MaterialContext.__name__ = true;
iron_data_MaterialContext.prototype = {
	setTextureParameters: function(g,textureIndex,context,unitIndex) {
		var tex = this.raw.bind_textures[textureIndex];
		if(tex.params_set == null) {
			context.setTextureParameters(g,unitIndex,tex);
			tex.params_set = true;
		}
	}
	,__class__: iron_data_MaterialContext
};
var iron_data_MeshBatch = $hxClasses["iron.data.MeshBatch"] = function() {
	this.nonBatched = [];
	this.buckets = new haxe_ds_ObjectMap();
};
iron_data_MeshBatch.__name__ = true;
iron_data_MeshBatch.isLod = function(m) {
	if(m.raw != null && m.raw.lods != null) {
		return m.raw.lods.length > 0;
	} else {
		return false;
	}
};
iron_data_MeshBatch.isBatchable = function(m) {
	return !(m.data.isSkinned || m.materials.length > 1 || iron_data_MeshBatch.isLod(m) || m.data.geom.instanced);
};
iron_data_MeshBatch.prototype = {
	remove: function() {
		var b = this.buckets.iterator();
		while(b.hasNext()) {
			var b1 = b.next();
			this.remove();
		}
	}
	,addMesh: function(m) {
		if(!iron_data_MeshBatch.isBatchable(m)) {
			this.nonBatched.push(m);
			return;
		}
		var shader = m.materials[0].shader;
		var b = this.buckets.h[shader.__id__];
		if(b == null) {
			b = new iron_data_Bucket(shader);
			this.buckets.set(shader,b);
		}
		b.addMesh(m);
	}
	,removeMesh: function(m) {
		var shader = m.materials[0].shader;
		var b = this.buckets.h[shader.__id__];
		if(b != null) {
			b.removeMesh(m);
		}
	}
	,render: function(g,context,camera,lamp,bindParams) {
		var b = this.buckets.iterator();
		while(b.hasNext()) {
			var b1 = b.next();
			if(!b1.batched) {
				b1.batch();
			}
			if(b1.meshes.length > 0 && b1.meshes[0].cullMaterial(context,camera)) {
				continue;
			}
			g.setPipeline(b1.shader.getContext(context).pipeState);
			g.setVertexBuffer(b1.vertexBuffer);
			g.setIndexBuffer(b1.indexBuffer);
			iron_data_RenderPath.sortMeshes(b1.meshes,camera);
			var _g = 0;
			var _g1 = b1.meshes;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				m.renderBatch(g,context,camera,lamp,bindParams,m.data.start,m.data.count);
			}
		}
		var _g2 = 0;
		var _g11 = this.nonBatched;
		while(_g2 < _g11.length) {
			var m1 = _g11[_g2];
			++_g2;
			m1.render(g,context,camera,lamp,bindParams);
		}
	}
	,__class__: iron_data_MeshBatch
};
var iron_data_Bucket = $hxClasses["iron.data.Bucket"] = function(shader) {
	this.meshes = [];
	this.batched = false;
	this.shader = shader;
};
iron_data_Bucket.__name__ = true;
iron_data_Bucket.prototype = {
	remove: function() {
		this.vertexBuffer["delete"]();
		this.indexBuffer["delete"]();
		this.meshes = [];
	}
	,addMesh: function(m) {
		this.meshes.push(m);
	}
	,removeMesh: function(m) {
		HxOverrides.remove(this.meshes,m);
	}
	,batch: function() {
		this.batched = true;
		var vcount = 0;
		var icount = 0;
		var mdatas = [];
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var mdFound = false;
			var _g2 = 0;
			while(_g2 < mdatas.length) {
				var md = mdatas[_g2];
				++_g2;
				if(m.data == md) {
					mdFound = true;
					break;
				}
			}
			if(!mdFound) {
				mdatas.push(m.data);
				m.data.start = icount;
				m.data.count = m.data.geom.indices[0].length;
				icount += m.data.count;
				vcount += m.data.geom.getVerticesLength();
			}
		}
		if(mdatas.length == 0) {
			return;
		}
		this.vertexBuffer = new kha_graphics4_VertexBuffer(vcount,mdatas[0].geom.struct,kha_graphics4_Usage.StaticUsage);
		var vertices = this.vertexBuffer.lock();
		var offset = 0;
		var _g3 = 0;
		while(_g3 < mdatas.length) {
			var md1 = mdatas[_g3];
			++_g3;
			md1.geom.copyVertices(vertices,offset);
			offset += md1.geom.getVerticesLength();
		}
		this.vertexBuffer.unlock();
		this.indexBuffer = new kha_graphics4_IndexBuffer(icount,kha_graphics4_Usage.StaticUsage);
		var indices = this.indexBuffer.lock();
		var di = -1;
		var offset1 = 0;
		var _g4 = 0;
		while(_g4 < mdatas.length) {
			var md2 = mdatas[_g4];
			++_g4;
			var _g21 = 0;
			var _g11 = md2.geom.indices[0].length;
			while(_g21 < _g11) {
				var i = _g21++;
				indices[++di] = md2.geom.indices[0][i] + offset1;
			}
			offset1 += md2.geom.getVerticesLength() / md2.geom.structLength | 0;
		}
		this.indexBuffer.unlock();
	}
	,__class__: iron_data_Bucket
};
var iron_data_MeshData = $hxClasses["iron.data.MeshData"] = function(raw,done) {
	this.bones = [];
	this.refcount = 0;
	this.count = -1;
	this.start = 0;
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	var indices = [];
	var materialIndices = [];
	var _g = 0;
	var _g1 = raw.index_arrays;
	while(_g < _g1.length) {
		var ind = _g1[_g];
		++_g;
		indices.push(ind.values);
		materialIndices.push(ind.material);
	}
	var pa = this.getVertexArrayValues("pos");
	var na = this.getVertexArrayValues("nor");
	var uva = this.getVertexArrayValues("tex");
	var uva1 = this.getVertexArrayValues("tex1");
	var ca = this.getVertexArrayValues("col");
	var tanga = this.getVertexArrayValues("tang");
	this.isSkinned = raw.skin != null;
	var parsedUsage = kha_graphics4_Usage.StaticUsage;
	if(raw.dynamic_usage != null && raw.dynamic_usage == true) {
		parsedUsage = kha_graphics4_Usage.DynamicUsage;
	}
	var usage = this.isSkinned && false ? kha_graphics4_Usage.DynamicUsage : parsedUsage;
	var bonea = null;
	var weighta = null;
	if(this.isSkinned) {
		var l = (pa.length / 3 | 0) * 4;
		var this1 = new Float32Array(l);
		bonea = this1;
		var this2 = new Float32Array(l);
		weighta = this2;
		var index = 0;
		var ai = 0;
		var _g11 = 0;
		var _g2 = pa.length / 3 | 0;
		while(_g11 < _g2) {
			var i = _g11++;
			var boneCount = raw.skin.bone_count_array[i];
			var _g3 = index;
			var _g21 = index + boneCount;
			while(_g3 < _g21) {
				var j = _g3++;
				bonea[ai] = raw.skin.bone_index_array[j];
				weighta[ai] = raw.skin.bone_weight_array[j];
				++ai;
			}
			var _g22 = boneCount;
			while(_g22 < 4) {
				var j1 = _g22++;
				bonea[ai] = 0.0;
				weighta[ai] = 0.0;
				++ai;
			}
			index += boneCount;
		}
	}
	this.geom = new iron_data_Geometry(indices,materialIndices,pa,na,uva,uva1,ca,tanga,bonea,weighta,usage,raw.instance_offsets);
	done(this);
};
iron_data_MeshData.__name__ = true;
iron_data_MeshData.newSync = function(raw) {
	return new iron_data_MeshData(raw,function(data) {
	});
};
iron_data_MeshData.parse = function(name,id,boneObjects,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getMeshRawByName(format.mesh_datas,id);
		if(raw == null) {
			haxe_Log.trace("Mesh data \"" + id + "\" not found!",{ fileName : "MeshData.hx", lineNumber : 107, className : "iron.data.MeshData", methodName : "parse"});
			done(null);
		}
		new iron_data_MeshData(raw,function(dat) {
			if(raw.skin != null) {
				var objects = boneObjects != null ? boneObjects : format.objects;
				if(objects != null) {
					var _g = 0;
					while(_g < objects.length) {
						var o = objects[_g];
						++_g;
						iron_data_MeshData.setParents(o);
					}
					iron_data_MeshData.traverseObjects(objects,function(object) {
						if(object.type == "bone_object") {
							dat.bones.push(object);
						}
					});
				}
				dat.geom.initSkinTransform(raw.skin.transform.values);
				dat.geom.skinBoneCounts = raw.skin.bone_count_array;
				dat.geom.skinBoneIndices = raw.skin.bone_index_array;
				dat.geom.skinBoneWeights = raw.skin.bone_weight_array;
				dat.geom.skeletonBoneRefs = raw.skin.skeleton.bone_ref_array;
				dat.geom.initSkeletonBones(dat.bones);
				dat.geom.initSkeletonTransforms(raw.skin.skeleton.transforms);
			}
			done(dat);
		});
	});
};
iron_data_MeshData.setParents = function(object) {
	if(object.children == null) {
		return;
	}
	var _g = 0;
	var _g1 = object.children;
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		o.parent = object;
		iron_data_MeshData.setParents(o);
	}
};
iron_data_MeshData.traverseObjects = function(objects,callback) {
	var _g1 = 0;
	var _g = objects.length;
	while(_g1 < _g) {
		var i = _g1++;
		iron_data_MeshData.traverseObjectsStep(objects[i],callback);
	}
};
iron_data_MeshData.traverseObjectsStep = function(object,callback) {
	callback(object);
	if(object.children == null) {
		return;
	}
	var _g1 = 0;
	var _g = object.children.length;
	while(_g1 < _g) {
		var i = _g1++;
		iron_data_MeshData.traverseObjectsStep(object.children[i],callback);
	}
};
iron_data_MeshData.__super__ = iron_data_Data;
iron_data_MeshData.prototype = $extend(iron_data_Data.prototype,{
	'delete': function() {
		this.geom["delete"]();
	}
	,getVertexArrayValues: function(attrib) {
		var _g = 0;
		var _g1 = this.raw.vertex_arrays;
		while(_g < _g1.length) {
			var va = _g1[_g];
			++_g;
			if(va.attrib == attrib) {
				return va.values;
			}
		}
		return null;
	}
	,__class__: iron_data_MeshData
});
var iron_data_ParticleData = $hxClasses["iron.data.ParticleData"] = function(raw,done) {
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
iron_data_ParticleData.__name__ = true;
iron_data_ParticleData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getParticleRawByName(format.particle_datas,id);
		if(raw == null) {
			haxe_Log.trace("Particle data \"" + id + "\" not found!",{ fileName : "ParticleData.hx", lineNumber : 23, className : "iron.data.ParticleData", methodName : "parse"});
			done(null);
		}
		new iron_data_ParticleData(raw,done);
	});
};
iron_data_ParticleData.__super__ = iron_data_Data;
iron_data_ParticleData.prototype = $extend(iron_data_Data.prototype,{
	__class__: iron_data_ParticleData
});
var iron_data_RenderPath = $hxClasses["iron.data.RenderPath"] = function(camera) {
	this.currentMaterial = null;
	this.drawPerformed = false;
	this.loopFinished = 0;
	this.lastH = 0;
	this.lastW = 0;
	this.cachedShaderContexts = new haxe_ds_StringMap();
	this.currentLampIndex = 0;
	this.currentStageIndexOffset = 0;
	this.currentStageIndex = 0;
	this.currentStages = null;
	this.helpMat = iron_math_Mat4.identity();
	this.viewportScaled = false;
	this.scissorSet = false;
	this.frameScissorH = 0;
	this.frameScissorW = 0;
	this.frameScissorY = 0;
	this.frameScissorX = 0;
	this.frameScissor = false;
	var _gthis = this;
	this.camera = camera;
	this.data = camera.data;
	this.ready = false;
	this.loadStageCommands(this.data.pathdata.raw.stages,function() {
		_gthis.ready = true;
	});
};
iron_data_RenderPath.__name__ = true;
iron_data_RenderPath.lampCastShadow = function(rp) {
	return (rp.lamps.length > 0 ? rp.lamps[rp.currentLampIndex] : null).data.raw.cast_shadow;
};
iron_data_RenderPath.lampIsSun = function(rp) {
	return (rp.lamps.length > 0 ? rp.lamps[rp.currentLampIndex] : null).data.raw.type == "sun";
};
iron_data_RenderPath.voxelize = function(rp) {
	if(++iron_data_RenderPath.voxelized > 2) {
		return false;
	} else {
		return true;
	}
};
iron_data_RenderPath.createScreenAlignedData = function() {
	var data = [-1.0,-1.0,3.0,-1.0,-1.0,3.0];
	var indices = [0,1,2];
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",kha_graphics4_VertexData.Float2);
	iron_data_RenderPath.screenAlignedVB = new kha_graphics4_VertexBuffer(data.length / (structure.byteSize() / 4 | 0) | 0,structure,kha_graphics4_Usage.StaticUsage);
	var vertices = iron_data_RenderPath.screenAlignedVB.lock();
	var _g1 = 0;
	var _g = vertices.length;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[i] = data[i];
	}
	iron_data_RenderPath.screenAlignedVB.unlock();
	iron_data_RenderPath.screenAlignedIB = new kha_graphics4_IndexBuffer(indices.length,kha_graphics4_Usage.StaticUsage);
	var id = iron_data_RenderPath.screenAlignedIB.lock();
	var _g11 = 0;
	var _g2 = id.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		id[i1] = indices[i1];
	}
	iron_data_RenderPath.screenAlignedIB.unlock();
};
iron_data_RenderPath.createRectData = function() {
	var data = [-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0];
	var indices = [0,1,2,0,2,3];
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",kha_graphics4_VertexData.Float2);
	iron_data_RenderPath.rectVB = new kha_graphics4_VertexBuffer(data.length / (structure.byteSize() / 4 | 0) | 0,structure,kha_graphics4_Usage.StaticUsage);
	var vertices = iron_data_RenderPath.rectVB.lock();
	var _g1 = 0;
	var _g = vertices.length;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[i] = data[i];
	}
	iron_data_RenderPath.rectVB.unlock();
	iron_data_RenderPath.rectIB = new kha_graphics4_IndexBuffer(indices.length,kha_graphics4_Usage.StaticUsage);
	var id = iron_data_RenderPath.rectIB.lock();
	var _g11 = 0;
	var _g2 = id.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		id[i1] = indices[i1];
	}
	iron_data_RenderPath.rectIB.unlock();
};
iron_data_RenderPath.createBoxData = function() {
	var data = [-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0];
	var indices = [0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23];
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",kha_graphics4_VertexData.Float3);
	iron_data_RenderPath.boxVB = new kha_graphics4_VertexBuffer(data.length / (structure.byteSize() / 4 | 0) | 0,structure,kha_graphics4_Usage.StaticUsage);
	var vertices = iron_data_RenderPath.boxVB.lock();
	var _g1 = 0;
	var _g = vertices.length;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[i] = data[i];
	}
	iron_data_RenderPath.boxVB.unlock();
	iron_data_RenderPath.boxIB = new kha_graphics4_IndexBuffer(indices.length,kha_graphics4_Usage.StaticUsage);
	var id = iron_data_RenderPath.boxIB.lock();
	var _g11 = 0;
	var _g2 = id.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		id[i1] = indices[i1];
	}
	iron_data_RenderPath.boxIB.unlock();
};
iron_data_RenderPath.createSkydomeData = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",kha_graphics4_VertexData.Float3);
	structure.add("nor",kha_graphics4_VertexData.Float3);
	var structLength = structure.byteSize() / 4 | 0;
	var pos = iron_data_ConstData.skydomePos;
	var nor = iron_data_ConstData.skydomeNor;
	iron_data_RenderPath.skydomeVB = new kha_graphics4_VertexBuffer(pos.length / 3 | 0,structure,kha_graphics4_Usage.StaticUsage);
	var vertices = iron_data_RenderPath.skydomeVB.lock();
	var _g1 = 0;
	var _g = vertices.length / structLength | 0;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[i * structLength] = pos[i * 3];
		vertices[i * structLength + 1] = pos[i * 3 + 1];
		vertices[i * structLength + 2] = pos[i * 3 + 2];
		vertices[i * structLength + 3] = -nor[i * 3];
		vertices[i * structLength + 4] = -nor[i * 3 + 1];
		vertices[i * structLength + 5] = -nor[i * 3 + 2];
	}
	iron_data_RenderPath.skydomeVB.unlock();
	var indices = iron_data_ConstData.skydomeIndices;
	iron_data_RenderPath.skydomeIB = new kha_graphics4_IndexBuffer(indices.length,kha_graphics4_Usage.StaticUsage);
	var id = iron_data_RenderPath.skydomeIB.lock();
	var _g11 = 0;
	var _g2 = id.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		id[i1] = indices[i1];
	}
	iron_data_RenderPath.skydomeIB.unlock();
};
iron_data_RenderPath.createSphereData = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",kha_graphics4_VertexData.Float3);
	var data = iron_data_ConstData.spherePos;
	iron_data_RenderPath.sphereVB = new kha_graphics4_VertexBuffer(data.length / (structure.byteSize() / 4 | 0) | 0,structure,kha_graphics4_Usage.StaticUsage);
	var vertices = iron_data_RenderPath.sphereVB.lock();
	var _g1 = 0;
	var _g = vertices.length;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[i] = data[i];
	}
	iron_data_RenderPath.sphereVB.unlock();
	var indices = iron_data_ConstData.sphereIndices;
	iron_data_RenderPath.sphereIB = new kha_graphics4_IndexBuffer(indices.length,kha_graphics4_Usage.StaticUsage);
	var id = iron_data_RenderPath.sphereIB.lock();
	var _g11 = 0;
	var _g2 = id.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		id[i1] = indices[i1];
	}
	iron_data_RenderPath.sphereIB.unlock();
};
iron_data_RenderPath.createConeData = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",kha_graphics4_VertexData.Float3);
	var data = iron_data_ConstData.conePos;
	iron_data_RenderPath.coneVB = new kha_graphics4_VertexBuffer(data.length / (structure.byteSize() / 4 | 0) | 0,structure,kha_graphics4_Usage.StaticUsage);
	var vertices = iron_data_RenderPath.coneVB.lock();
	var _g1 = 0;
	var _g = vertices.length;
	while(_g1 < _g) {
		var i = _g1++;
		vertices[i] = data[i];
	}
	iron_data_RenderPath.coneVB.unlock();
	var indices = iron_data_ConstData.coneIndices;
	iron_data_RenderPath.coneIB = new kha_graphics4_IndexBuffer(indices.length,kha_graphics4_Usage.StaticUsage);
	var id = iron_data_RenderPath.coneIB.lock();
	var _g11 = 0;
	var _g2 = id.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		id[i1] = indices[i1];
	}
	iron_data_RenderPath.coneIB.unlock();
};
iron_data_RenderPath.sortMeshes = function(meshes,camera) {
	var camX = camera.transform.world.self._30;
	var camY = camera.transform.world.self._31;
	var camZ = camera.transform.world.self._32;
	var _g = 0;
	while(_g < meshes.length) {
		var mesh = meshes[_g];
		++_g;
		var vx = camX - mesh.transform.world.self._30;
		var vy = camY - mesh.transform.world.self._31;
		var vz = camZ - mesh.transform.world.self._32;
		mesh.cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
	}
	meshes.sort(function(a,b) {
		if(a.cameraDistance >= b.cameraDistance) {
			return 1;
		} else {
			return -1;
		}
	});
};
iron_data_RenderPath.prototype = {
	unload: function() {
		this.data.pathdata.unload();
	}
	,getLamp: function(index) {
		if(this.lamps.length > 0) {
			return this.lamps[index];
		} else {
			return null;
		}
	}
	,renderFrame: function(g,root,lamps) {
		if(!this.ready) {
			return;
		}
		if(this.lastW > 0 && (this.lastW != kha_System.windowWidth() || this.lastH != kha_System.windowHeight())) {
			this.data.pathdata.resize();
		}
		this.lastW = kha_System.windowWidth();
		this.lastH = kha_System.windowHeight();
		this.frameRenderTarget = this.camera.data.mirror == null ? g : this.camera.data.mirror.get_g4();
		this.currentRenderTarget = this.frameRenderTarget;
		this.currentRenderTargetW = kha_System.windowWidth();
		this.currentRenderTargetH = kha_System.windowHeight();
		this.currentRenderTargetD = 1;
		this.currentRenderTargetCube = false;
		this.currentRenderTargetFace = -1;
		this.meshesSorted = false;
		this.lamps = lamps;
		this.currentLampIndex = 0;
		var _g = 0;
		while(_g < lamps.length) {
			var l = lamps[_g];
			++_g;
			if(l.visible) {
				l.buildMatrices(this.camera);
			}
		}
		this.currentStages = this.data.pathdata.raw.stages;
		this.callCurrentStages(root);
	}
	,callCurrentStages: function(root) {
		var i = 0;
		while(i < this.currentStages.length) {
			this.currentStageIndex = i;
			var f = this.commandToFunction(this.currentStages[i].command);
			f(this.currentStages[i].params,root);
			i += 1 + this.currentStageIndexOffset;
			this.currentStageIndexOffset = 0;
		}
	}
	,setTarget: function(params,root) {
		if(iron_data_RenderPath.lastPongRT != null && this.drawPerformed && this.loopFinished == 0) {
			iron_data_RenderPath.lastPongRT.pongState = !iron_data_RenderPath.lastPongRT.pongState;
			iron_data_RenderPath.lastPongRT = null;
		}
		this.drawPerformed = false;
		var target = params[1];
		if(target == "") {
			this.currentRenderTarget = this.frameRenderTarget;
			this.currentRenderTargetW = kha_System.windowWidth();
			this.currentRenderTargetH = kha_System.windowHeight();
			this.currentRenderTargetD = 1;
			this.currentRenderTargetCube = false;
			this.currentRenderTargetFace = -1;
			if(this.frameScissor) {
				this.setFrameScissor();
			}
			var g = this.currentRenderTarget;
			g.begin(null);
		} else {
			var _this = this.data.pathdata.renderTargets;
			var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
			if(target == "shadowMap" && (this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null).data.raw.shadowmap_cube) {
				var _this1 = this.data.pathdata.renderTargets;
				var key = target + "Cube";
				if(__map_reserved[key] != null) {
					rt = _this1.getReserved(key);
				} else {
					rt = _this1.h[key];
				}
				if(rt == null) {
					var size = (this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null).data.raw.shadowmap_size / 2 | 0;
					var t = { name : target + "Cube", width : size, height : size, format : "DEPTH16", is_cubemap : true};
					rt = this.data.pathdata.createRenderTarget(t);
				}
			}
			if(target == "shadowMap" && rt == null) {
				var size1 = (this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null).data.raw.shadowmap_size;
				var t1 = { name : target, width : size1, height : size1, format : "DEPTH16"};
				rt = this.data.pathdata.createRenderTarget(t1);
			}
			var additionalImages = null;
			if(params.length > 2) {
				additionalImages = [];
				var _g1 = 2;
				var _g = params.length;
				while(_g1 < _g) {
					var i = _g1++;
					var _this2 = this.data.pathdata.renderTargets;
					var key1 = params[i];
					var t2 = __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1];
					additionalImages.push(t2.image);
				}
			}
			if(rt.pong != null) {
				iron_data_RenderPath.lastPongRT = rt;
				if(rt.pongState) {
					rt = rt.pong;
				}
			}
			this.currentRenderTarget = rt.isCubeMap ? rt.cubeMap.get_g4() : rt.image.get_g4();
			this.currentRenderTargetW = rt.isCubeMap ? rt.cubeMap.get_width() : rt.image.get_width();
			this.currentRenderTargetH = rt.isCubeMap ? rt.cubeMap.get_height() : rt.image.get_height();
			if(rt.is3D) {
				this.currentRenderTargetD = rt.image.get_depth();
			}
			this.currentRenderTargetCube = rt.isCubeMap;
			if(this.currentRenderTargetFace >= 0) {
				this.currentRenderTargetFace++;
			} else {
				this.currentRenderTargetFace = rt.isCubeMap ? 0 : -1;
			}
			var g1 = this.currentRenderTarget;
			var face = this.currentRenderTargetFace;
			if(face >= 0) {
				g1.beginFace(5 - face);
			} else {
				g1.begin(additionalImages);
			}
		}
		var viewportScale = parseFloat(params[0]);
		if(viewportScale != 1.0) {
			this.viewportScaled = true;
			var viewW = this.currentRenderTargetW * viewportScale | 0;
			var viewH = this.currentRenderTargetH * viewportScale | 0;
			this.currentRenderTarget.viewport(0,viewH,viewW,viewH);
			this.currentRenderTarget.scissor(0,viewH,viewW,viewH);
		} else if(this.viewportScaled) {
			this.viewportScaled = false;
			this.setCurrentViewport(this.currentRenderTargetW,this.currentRenderTargetH);
			this.setCurrentScissor(this.currentRenderTargetW,this.currentRenderTargetH);
		}
		this.bindParams = null;
	}
	,begin: function(g,additionalRenderTargets,face) {
		if(face == null) {
			face = -1;
		}
		if(face >= 0) {
			g.beginFace(5 - face);
		} else {
			g.begin(additionalRenderTargets);
		}
	}
	,end: function(g) {
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
	}
	,setCurrentViewport: function(viewW,viewH) {
		this.currentRenderTarget.viewport(0,this.currentRenderTargetH - viewH,viewW,viewH);
	}
	,setCurrentScissor: function(viewW,viewH) {
		this.currentRenderTarget.scissor(0,this.currentRenderTargetH - viewH,viewW,viewH);
		this.scissorSet = true;
	}
	,setFrameScissor: function() {
		this.frameRenderTarget.scissor(this.frameScissorX,this.currentRenderTargetH - (this.frameScissorH - this.frameScissorY),this.frameScissorW,this.frameScissorH);
	}
	,setViewport: function(params,root) {
		var viewW = parseFloat(params[0]) | 0;
		var viewH = parseFloat(params[1]) | 0;
		this.setCurrentViewport(viewW,viewH);
		this.setCurrentScissor(viewW,viewH);
	}
	,clearTarget: function(params,root) {
		var colorFlag = null;
		var depthFlag = null;
		var _g1 = 0;
		var _g = params.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			var pos = i * 2;
			var val = pos + 1;
			if(params[pos] == "color") {
				if(params[val] == "-1") {
					colorFlag = iron_Scene.active.world.raw.background_color;
				} else {
					colorFlag = kha__$Color_Color_$Impl_$.fromString(params[val]);
				}
			} else if(params[pos] == "depth") {
				if(params[val] == "1.0") {
					depthFlag = 1.0;
				} else {
					depthFlag = 0.0;
				}
			}
		}
		this.currentRenderTarget.clear(colorFlag,depthFlag,null);
	}
	,clearImage: function(params,root) {
		var target = params[0];
		var color = kha__$Color_Color_$Impl_$.fromString(params[1]);
		var _this = this.data.pathdata.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		rt.image.clear(0,0,0,rt.image.get_width(),rt.image.get_height(),rt.image.get_depth(),color);
	}
	,generateMipmaps: function(params,root) {
		var target = params[0];
		var _this = this.data.pathdata.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		rt.image.generateMipmaps(1000);
	}
	,drawMeshes: function(params,root) {
		var context = params[0];
		var lamp = this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null;
		if(lamp != null && !lamp.visible) {
			if(this.currentLampIndex > 0) {
				return;
			}
		}
		if(context == this.data.pathdata.raw.shadows_context) {
			if(lamp == null || !lamp.data.raw.cast_shadow) {
				return;
			}
		}
		if(this.currentRenderTargetFace >= 0 && lamp != null) {
			lamp.setCubeFace(5 - this.currentRenderTargetFace,this.camera);
		}
		var g = this.currentRenderTarget;
		if(!this.meshesSorted) {
			iron_data_RenderPath.sortMeshes(iron_Scene.active.meshes,this.camera);
			this.meshesSorted = true;
		}
		var _g = 0;
		var _g1 = iron_Scene.active.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.render(g,context,this.camera,lamp,this.bindParams);
		}
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
		if(this.currentRenderTargetFace >= 0 && this.currentRenderTargetFace < 5) {
			this.currentStageIndexOffset = -3;
		} else {
			this.currentRenderTargetFace = -1;
		}
	}
	,getRectContexts: function(mat,context,materialContexts,shaderContexts) {
		var _g1 = 0;
		var _g = mat.raw.contexts.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(HxOverrides.substr(mat.raw.contexts[i].name,0,context.length) == context) {
				materialContexts.push(mat.contexts[i]);
				shaderContexts.push(mat.shader.getContext(context));
				break;
			}
		}
	}
	,clampRect: function(f) {
		if(f < -1.0) {
			return -1.0;
		} else if(f > 1.0) {
			return 1.0;
		} else {
			return f;
		}
	}
	,drawRects: function(params,root) {
		if(iron_data_RenderPath.rectVB == null) {
			iron_data_RenderPath.createRectData();
		}
		var g = this.currentRenderTarget;
		var context = params[0];
		var lamp = this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null;
		var mats = [];
		var volumesMin = [];
		var volumesMax = [];
		var _g = 0;
		var _g1 = iron_Scene.active.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var found = false;
			var _g3 = 0;
			var _g2 = mats.length;
			while(_g3 < _g2) {
				var i = _g3++;
				var mat = mats[i];
				if(mat == m.materials[0]) {
					var loc = new iron_math_Vec4(m.transform.world.self._30,m.transform.world.self._31,m.transform.world.self._32);
					var dim = m.transform.size;
					var min = volumesMin[i];
					var max = volumesMax[i];
					if(min.x > loc.x - dim.x / 2.0) {
						min.x = loc.x - dim.x / 2.0;
					}
					if(min.y > loc.y - dim.y / 2.0) {
						min.y = loc.y - dim.y / 2.0;
					}
					if(min.z > loc.z - dim.z / 2.0) {
						min.z = loc.z - dim.z / 2.0;
					}
					if(max.x < loc.x + dim.x / 2.0) {
						max.x = loc.x + dim.x / 2.0;
					}
					if(max.y < loc.y + dim.y / 2.0) {
						max.y = loc.y + dim.y / 2.0;
					}
					if(max.z < loc.z + dim.z / 2.0) {
						max.z = loc.z + dim.z / 2.0;
					}
					found = true;
					break;
				}
			}
			if(found) {
				continue;
			}
			var loc1 = new iron_math_Vec4(m.transform.world.self._30,m.transform.world.self._31,m.transform.world.self._32);
			var dim1 = m.transform.size;
			volumesMin.push(new iron_math_Vec4(loc1.x - dim1.x / 2.0,loc1.y - dim1.y / 2.0,loc1.z - dim1.z / 2.0));
			volumesMax.push(new iron_math_Vec4(loc1.x + dim1.x / 2.0,loc1.y + dim1.y / 2.0,loc1.z + dim1.z / 2.0));
			mats.push(m.materials[0]);
		}
		var rectBounds = [];
		var _g11 = 0;
		var _g4 = volumesMin.length;
		while(_g11 < _g4) {
			var i1 = _g11++;
			var min1 = volumesMin[i1];
			var max1 = volumesMax[i1];
			var dx = max1.x - min1.x;
			var dy = max1.y - min1.y;
			var dz = max1.z - min1.z;
			var ps = [];
			ps.push(new iron_math_Vec4(min1.x,min1.y,min1.z));
			ps.push(new iron_math_Vec4(min1.x + dx,min1.y,min1.z));
			ps.push(new iron_math_Vec4(min1.x,min1.y + dy,min1.z));
			ps.push(new iron_math_Vec4(min1.x,min1.y,min1.z + dz));
			ps.push(new iron_math_Vec4(min1.x + dx,min1.y + dy,min1.z));
			ps.push(new iron_math_Vec4(min1.x,min1.y + dy,min1.z + dz));
			ps.push(new iron_math_Vec4(min1.x + dx,min1.y,min1.z + dz));
			ps.push(new iron_math_Vec4(min1.x + dx,min1.y + dy,min1.z + dz));
			this.helpMat.setFrom(this.camera.V);
			this.helpMat.multmat2(this.camera.P);
			var b = null;
			var _g21 = 0;
			while(_g21 < ps.length) {
				var v = ps[_g21];
				++_g21;
				v.applymat4(this.helpMat);
				v.x /= v.w;
				v.y /= v.w;
				v.z /= v.w;
				if(b == null) {
					b = new iron_math_Vec4(v.x,v.y,v.x,v.y);
				} else {
					if(v.x < b.x) {
						b.x = v.x;
					}
					if(v.y < b.y) {
						b.y = v.y;
					}
					if(v.x > b.z) {
						b.z = v.x;
					}
					if(v.y > b.w) {
						b.w = v.y;
					}
				}
			}
			rectBounds.push(b);
		}
		g.setIndexBuffer(iron_data_RenderPath.rectIB);
		var _g12 = 0;
		var _g5 = mats.length;
		while(_g12 < _g5) {
			var i2 = _g12++;
			var mat1 = mats[i2];
			var b1 = rectBounds[i2];
			var dx1 = b1.z - b1.x;
			var dy1 = b1.w - b1.y;
			var v1 = iron_data_RenderPath.rectVB.lock();
			var f = b1.x;
			v1[0] = f < -1.0 ? -1.0 : f > 1.0 ? 1.0 : f;
			var f1 = b1.y;
			v1[1] = f1 < -1.0 ? -1.0 : f1 > 1.0 ? 1.0 : f1;
			var f2 = b1.x + dx1;
			v1[2] = f2 < -1.0 ? -1.0 : f2 > 1.0 ? 1.0 : f2;
			var f3 = b1.y;
			v1[3] = f3 < -1.0 ? -1.0 : f3 > 1.0 ? 1.0 : f3;
			var f4 = b1.x + dx1;
			v1[4] = f4 < -1.0 ? -1.0 : f4 > 1.0 ? 1.0 : f4;
			var f5 = b1.y + dy1;
			v1[5] = f5 < -1.0 ? -1.0 : f5 > 1.0 ? 1.0 : f5;
			var f6 = b1.x;
			v1[6] = f6 < -1.0 ? -1.0 : f6 > 1.0 ? 1.0 : f6;
			var f7 = b1.y + dy1;
			v1[7] = f7 < -1.0 ? -1.0 : f7 > 1.0 ? 1.0 : f7;
			iron_data_RenderPath.rectVB.unlock();
			g.setVertexBuffer(iron_data_RenderPath.rectVB);
			this.currentMaterial = mat1;
			var materialContexts = [];
			var shaderContexts = [];
			this.getRectContexts(mat1,context,materialContexts,shaderContexts);
			g.setPipeline(mat1.shader.getContext(context).pipeState);
			iron_object_Uniforms.setConstants(g,shaderContexts[0],null,this.camera,lamp,this.bindParams);
			iron_object_Uniforms.setMaterialConstants(g,shaderContexts[0],materialContexts[0]);
			g.drawIndexedVertices();
		}
		this.currentMaterial = null;
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
	}
	,drawDecals: function(params,root) {
		if(iron_data_RenderPath.boxVB == null) {
			iron_data_RenderPath.createBoxData();
		}
		var context = params[0];
		var g = this.currentRenderTarget;
		var lamp = this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null;
		var _g = 0;
		var _g1 = iron_Scene.active.decals;
		while(_g < _g1.length) {
			var decal = _g1[_g];
			++_g;
			decal.render(g,context,this.camera,lamp,this.bindParams);
			g.setVertexBuffer(iron_data_RenderPath.boxVB);
			g.setIndexBuffer(iron_data_RenderPath.boxIB);
			g.drawIndexedVertices();
		}
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
	}
	,drawGreasePencil: function(params,root) {
		var gp = iron_Scene.active.greasePencil;
		if(gp == null) {
			return;
		}
		var g = this.currentRenderTarget;
		var lamp = this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null;
		var context = iron_data_GreasePencilData.getContext(params[0]);
		g.setPipeline(context.pipeState);
		iron_object_Uniforms.setConstants(g,context,null,this.camera,lamp,null);
		var _g = 0;
		var _g1 = gp.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			if(layer.frames.length - 1 > layer.currentFrame && iron_data_RenderPath.gpFrame >= layer.frames[layer.currentFrame + 1].raw.frame_number) {
				layer.currentFrame++;
			}
			var frame = layer.frames[layer.currentFrame];
			if(frame.numVertices > 0) {
				g.setVertexBuffer(frame.vertexBuffer);
				g.setIndexBuffer(frame.indexBuffer);
				g.drawIndexedVertices();
			}
		}
		iron_data_RenderPath.gpFrame++;
		if(iron_data_RenderPath.gpFrame > iron_data_GreasePencilData.frameEnd) {
			iron_data_RenderPath.gpFrame = 0;
			var _g2 = 0;
			var _g11 = gp.layers;
			while(_g2 < _g11.length) {
				var layer1 = _g11[_g2];
				++_g2;
				layer1.currentFrame = 0;
			}
		}
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
	}
	,parseMaterialLink: function(handle) {
		if(handle == "_worldMaterial" && iron_Scene.active.world != null) {
			return iron_Scene.active.world.raw.material_ref.split("/");
		}
		return null;
	}
	,drawSkydome: function(params,root) {
		if(iron_data_RenderPath.skydomeVB == null) {
			iron_data_RenderPath.createSkydomeData();
		}
		var handle = params[0];
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(cc.context == null) {
			return;
		}
		var g = this.currentRenderTarget;
		g.setPipeline(cc.context.pipeState);
		var lamp = this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null;
		iron_object_Uniforms.setConstants(g,cc.context,null,this.camera,lamp,this.bindParams);
		if(cc.materialContext != null) {
			iron_object_Uniforms.setMaterialConstants(g,cc.context,cc.materialContext);
		}
		g.setVertexBuffer(iron_data_RenderPath.skydomeVB);
		g.setIndexBuffer(iron_data_RenderPath.skydomeIB);
		g.drawIndexedVertices();
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
	}
	,drawLampVolume: function(params,root) {
		var vb = null;
		var ib = null;
		var lamp = this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null;
		var type = lamp.data.raw.type;
		if(type == "point" || type == "area") {
			if(iron_data_RenderPath.sphereVB == null) {
				iron_data_RenderPath.createSphereData();
			}
			vb = iron_data_RenderPath.sphereVB;
			ib = iron_data_RenderPath.sphereIB;
		} else if(type == "spot") {
			if(iron_data_RenderPath.sphereVB == null) {
				iron_data_RenderPath.createSphereData();
			}
			vb = iron_data_RenderPath.sphereVB;
			ib = iron_data_RenderPath.sphereIB;
		}
		var handle = params[0];
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		var g = this.currentRenderTarget;
		g.setPipeline(cc.context.pipeState);
		iron_object_Uniforms.setConstants(g,cc.context,null,this.camera,lamp,this.bindParams);
		if(cc.materialContext != null) {
			iron_object_Uniforms.setMaterialConstants(g,cc.context,cc.materialContext);
		}
		g.setVertexBuffer(vb);
		g.setIndexBuffer(ib);
		g.drawIndexedVertices();
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
	}
	,bindTarget: function(params,root) {
		if(this.bindParams != null) {
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.bindParams.push(p);
			}
		} else {
			this.bindParams = params;
		}
	}
	,drawShaderQuad: function(params,root) {
		var handle = params[0];
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		this.drawQuad(cc,root);
	}
	,drawMaterialQuad: function(params,root) {
		var handle = params[0];
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		this.drawQuad(cc,root);
	}
	,drawQuad: function(cc,root) {
		if(iron_data_RenderPath.screenAlignedVB == null) {
			iron_data_RenderPath.createScreenAlignedData();
		}
		var g = this.currentRenderTarget;
		g.setPipeline(cc.context.pipeState);
		var lamp = this.lamps.length > 0 ? this.lamps[this.currentLampIndex] : null;
		iron_object_Uniforms.setConstants(g,cc.context,null,this.camera,lamp,this.bindParams);
		if(cc.materialContext != null) {
			iron_object_Uniforms.setMaterialConstants(g,cc.context,cc.materialContext);
		}
		g.setVertexBuffer(iron_data_RenderPath.screenAlignedVB);
		g.setIndexBuffer(iron_data_RenderPath.screenAlignedIB);
		g.drawIndexedVertices();
		g.end();
		if(this.scissorSet) {
			g.disableScissor();
			this.scissorSet = false;
		}
		this.bindParams = null;
		this.drawPerformed = true;
	}
	,callFunction: function(params,root) {
		var path = params[0];
		var dotIndex = path.lastIndexOf(".");
		var classPath = HxOverrides.substr(path,0,dotIndex);
		var classType = Type.resolveClass(classPath);
		var funName = HxOverrides.substr(path,dotIndex + 1,null);
		var stage = this.currentStages[this.currentStageIndex];
		if(stage.returns_true == null && stage.returns_false == null) {
			Reflect.field(classType,funName).apply(classType,[this]);
		} else {
			var result = Reflect.field(classType,funName).apply(classType,[this]);
			var nestedStages = result ? stage.returns_true : stage.returns_false;
			if(nestedStages != null) {
				var parentStages = this.currentStages;
				this.currentStages = nestedStages;
				this.callCurrentStages(root);
				this.currentStages = parentStages;
			}
		}
	}
	,loopLamps: function(params,root) {
		var nestedStages = this.currentStages[this.currentStageIndex].returns_true;
		var parentStages = this.currentStages;
		this.currentStages = nestedStages;
		this.currentLampIndex = 0;
		this.loopFinished++;
		var _g1 = 0;
		var _g = this.lamps.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = this.lamps[i];
			if(!l.visible) {
				continue;
			}
			this.currentLampIndex = i;
			this.callCurrentStages(root);
		}
		this.currentLampIndex = 0;
		this.loopFinished--;
		this.currentStages = parentStages;
	}
	,loadStageCommands: function(stages,done) {
		var stagesLoaded = 0;
		var _g1 = 0;
		var _g = stages.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.loadCommand(stages[i],function() {
				stagesLoaded += 1;
				if(stagesLoaded == stages.length) {
					done();
				}
			});
		}
	}
	,commandToFunction: function(command) {
		switch(command) {
		case "bind_target":
			return $bind(this,this.bindTarget);
		case "call_function":
			return $bind(this,this.callFunction);
		case "clear_image":
			return $bind(this,this.clearImage);
		case "clear_target":
			return $bind(this,this.clearTarget);
		case "draw_decals":
			return $bind(this,this.drawDecals);
		case "draw_grease_pencil":
			return $bind(this,this.drawGreasePencil);
		case "draw_lamp_volume":
			return $bind(this,this.drawLampVolume);
		case "draw_material_quad":
			return $bind(this,this.drawMaterialQuad);
		case "draw_meshes":
			return $bind(this,this.drawMeshes);
		case "draw_rects":
			return $bind(this,this.drawRects);
		case "draw_shader_quad":
			return $bind(this,this.drawShaderQuad);
		case "draw_skydome":
			return $bind(this,this.drawSkydome);
		case "generate_mipmaps":
			return $bind(this,this.generateMipmaps);
		case "loop_lamps":
			return $bind(this,this.loopLamps);
		case "set_target":
			return $bind(this,this.setTarget);
		case "set_viewport":
			return $bind(this,this.setViewport);
		default:
			return null;
		}
	}
	,loadCommand: function(stage,done) {
		var handle = stage.params.length > 0 ? stage.params[0] : "";
		var _g = stage.command;
		switch(_g) {
		case "call_function":
			this.cacheReturnsBoth(stage,done);
			break;
		case "draw_lamp_volume":
			this.cacheShaderQuad(handle,done);
			break;
		case "draw_material_quad":
			this.cacheMaterialQuad(handle,done);
			break;
		case "draw_shader_quad":
			this.cacheShaderQuad(handle,done);
			break;
		case "draw_skydome":
			this.cacheMaterialQuad(handle,done);
			break;
		case "loop_lamps":
			this.cacheReturnsTrue(stage,done);
			break;
		default:
			done();
		}
	}
	,cacheReturnsBoth: function(stage,done) {
		var cached = 0;
		var cacheTo = 0;
		if(stage.returns_true != null && stage.returns_true.length > 0) {
			cacheTo += 1;
		}
		if(stage.returns_false != null && stage.returns_false.length > 0) {
			cacheTo += 1;
		}
		if(cacheTo == 0) {
			done();
		}
		if(stage.returns_true != null && stage.returns_true.length > 0) {
			this.loadStageCommands(stage.returns_true,function() {
				cached += 1;
				if(cached == cacheTo) {
					done();
				}
			});
		}
		if(stage.returns_false != null && stage.returns_false.length > 0) {
			this.loadStageCommands(stage.returns_false,function() {
				cached += 1;
				if(cached == cacheTo) {
					done();
				}
			});
		}
	}
	,cacheReturnsTrue: function(stage,done) {
		if(stage.returns_true != null) {
			this.loadStageCommands(stage.returns_true,done);
		} else {
			done();
		}
	}
	,cacheMaterialQuad: function(handle,done) {
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(cc != null) {
			done();
			return;
		}
		cc = new iron_data_CachedShaderContext();
		var _this1 = this.cachedShaderContexts;
		if(__map_reserved[handle] != null) {
			_this1.setReserved(handle,cc);
		} else {
			_this1.h[handle] = cc;
		}
		var matPath = null;
		if(handle.charAt(0) == "_") {
			matPath = this.parseMaterialLink(handle);
		} else {
			matPath = handle.split("/");
		}
		if(matPath == null) {
			done();
			return;
		}
		iron_data_Data.getMaterial(matPath[0],matPath[1],function(res) {
			cc.materialContext = res.getContext(matPath[2]);
			cc.context = res.shader.getContext(matPath[2]);
			done();
		});
	}
	,cacheShaderQuad: function(handle,done) {
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(cc != null) {
			done();
			return;
		}
		cc = new iron_data_CachedShaderContext();
		var _this1 = this.cachedShaderContexts;
		if(__map_reserved[handle] != null) {
			_this1.setReserved(handle,cc);
		} else {
			_this1.h[handle] = cc;
		}
		var shaderPath = handle.split("/");
		iron_data_Data.getShader(shaderPath[0],shaderPath[1],null,function(res) {
			cc.materialContext = null;
			cc.context = res.getContext(shaderPath[2]);
			done();
		});
	}
	,__class__: iron_data_RenderPath
};
var iron_data_CachedShaderContext = $hxClasses["iron.data.CachedShaderContext"] = function() {
};
iron_data_CachedShaderContext.__name__ = true;
iron_data_CachedShaderContext.prototype = {
	__class__: iron_data_CachedShaderContext
};
var iron_data_RenderPathData = $hxClasses["iron.data.RenderPathData"] = function(raw,done) {
	this.depthToRenderTarget = new haxe_ds_StringMap();
	this.renderTargets = new haxe_ds_StringMap();
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	if(raw.render_targets != null && raw.render_targets.length > 0) {
		var _g = 0;
		var _g1 = raw.render_targets;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			this.createRenderTarget(t);
		}
	}
	done(this);
};
iron_data_RenderPathData.__name__ = true;
iron_data_RenderPathData.parse = function(file,name,done) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getRenderPathRawByName(format.renderpath_datas,name);
		if(raw == null) {
			haxe_Log.trace("Render path data \"" + name + "\" not found!",{ fileName : "RenderPathData.hx", lineNumber : 58, className : "iron.data.RenderPathData", methodName : "parse"});
			done(null);
		}
		new iron_data_RenderPathData(raw,done);
	});
};
iron_data_RenderPathData.__super__ = iron_data_Data;
iron_data_RenderPathData.prototype = $extend(iron_data_Data.prototype,{
	unload: function() {
		var _this = this.renderTargets;
		var rt = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(rt.hasNext()) {
			var rt1 = rt.next();
			rt1.unload();
		}
	}
	,resize: function() {
		var _this = this.renderTargets;
		var rt = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(rt.hasNext()) {
			var rt1 = rt.next();
			if(rt1.raw.width == 0) {
				rt1.image.unload();
				rt1.image = this.createImage(rt1.raw,rt1.depthStencil);
				if(rt1.depthStencilFrom != "") {
					var key = rt1.depthStencilFrom;
					var _this1 = this.depthToRenderTarget;
					rt1.image.setDepthStencilFrom((__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).image);
				}
			}
		}
	}
	,createRenderTarget: function(t) {
		var rt = this._createRenderTarget(t);
		if(t.ping_pong != null && t.ping_pong) {
			rt.pong = this._createRenderTarget(t);
		}
		var key = t.name;
		var _this = this.renderTargets;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,rt);
		} else {
			_this.h[key] = rt;
		}
		return rt;
	}
	,_createRenderTarget: function(t) {
		var rt = new iron_data_RenderTarget(t);
		if(t.depth_buffer != null) {
			rt.hasDepth = true;
			var key = t.depth_buffer;
			var _this = this.depthToRenderTarget;
			var depthTarget = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(depthTarget == null) {
				var _g = 0;
				var _g1 = this.raw.depth_buffers;
				while(_g < _g1.length) {
					var db = _g1[_g];
					++_g;
					if(db.name == t.depth_buffer) {
						var key1 = db.name;
						var _this1 = this.depthToRenderTarget;
						if(__map_reserved[key1] != null) {
							_this1.setReserved(key1,rt);
						} else {
							_this1.h[key1] = rt;
						}
						var s = db.format;
						var tmp;
						if(s == null || s == "") {
							tmp = 1;
						} else {
							switch(s) {
							case "DEPTH16":
								tmp = 5;
								break;
							case "DEPTH24":
								tmp = 1;
								break;
							default:
								tmp = 1;
							}
						}
						rt.depthStencil = tmp;
						rt.image = this.createImage(t,rt.depthStencil);
						break;
					}
				}
			} else {
				rt.depthStencil = 0;
				rt.depthStencilFrom = t.depth_buffer;
				rt.image = this.createImage(t,rt.depthStencil);
				rt.image.setDepthStencilFrom(depthTarget.image);
			}
		} else {
			rt.hasDepth = false;
			if(t.depth != null && t.depth > 1) {
				rt.is3D = true;
			}
			if(t.is_cubemap) {
				rt.isCubeMap = true;
				rt.depthStencil = 0;
				rt.cubeMap = this.createCubeMap(t,rt.depthStencil);
			} else {
				rt.depthStencil = 0;
				rt.image = this.createImage(t,rt.depthStencil);
			}
		}
		return rt;
	}
	,createImage: function(t,depthStencil) {
		var width = t.width == 0 ? kha_System.windowWidth() : t.width;
		var height = t.height == 0 ? kha_System.windowHeight() : t.height;
		var depth = t.depth != null ? t.depth : 0;
		if(t.scale != null) {
			width = width * t.scale | 0;
			height = height * t.scale | 0;
			depth = depth * t.scale | 0;
		}
		if(t.depth != null && t.depth > 1) {
			var tmp;
			if(t.format != null) {
				switch(t.format) {
				case "A16":
					tmp = kha_graphics4_TextureFormat.A16;
					break;
				case "A32":
					tmp = kha_graphics4_TextureFormat.A32;
					break;
				case "A8":
					tmp = kha_graphics4_TextureFormat.L8;
					break;
				case "DEPTH16":
					tmp = kha_graphics4_TextureFormat.DEPTH16;
					break;
				case "R16":
					tmp = kha_graphics4_TextureFormat.A16;
					break;
				case "R32":
					tmp = kha_graphics4_TextureFormat.A32;
					break;
				case "R8":
					tmp = kha_graphics4_TextureFormat.L8;
					break;
				case "RGBA128":
					tmp = kha_graphics4_TextureFormat.RGBA128;
					break;
				case "RGBA32":
					tmp = kha_graphics4_TextureFormat.RGBA32;
					break;
				case "RGBA64":
					tmp = kha_graphics4_TextureFormat.RGBA64;
					break;
				default:
					tmp = kha_graphics4_TextureFormat.RGBA32;
				}
			} else {
				tmp = kha_graphics4_TextureFormat.RGBA32;
			}
			return kha_Image.create3D(width,height,depth,tmp);
		} else if(t.is_image != null && t.is_image) {
			var tmp1;
			if(t.format != null) {
				switch(t.format) {
				case "A16":
					tmp1 = kha_graphics4_TextureFormat.A16;
					break;
				case "A32":
					tmp1 = kha_graphics4_TextureFormat.A32;
					break;
				case "A8":
					tmp1 = kha_graphics4_TextureFormat.L8;
					break;
				case "DEPTH16":
					tmp1 = kha_graphics4_TextureFormat.DEPTH16;
					break;
				case "R16":
					tmp1 = kha_graphics4_TextureFormat.A16;
					break;
				case "R32":
					tmp1 = kha_graphics4_TextureFormat.A32;
					break;
				case "R8":
					tmp1 = kha_graphics4_TextureFormat.L8;
					break;
				case "RGBA128":
					tmp1 = kha_graphics4_TextureFormat.RGBA128;
					break;
				case "RGBA32":
					tmp1 = kha_graphics4_TextureFormat.RGBA32;
					break;
				case "RGBA64":
					tmp1 = kha_graphics4_TextureFormat.RGBA64;
					break;
				default:
					tmp1 = kha_graphics4_TextureFormat.RGBA32;
				}
			} else {
				tmp1 = kha_graphics4_TextureFormat.RGBA32;
			}
			return kha_Image.create(width,height,tmp1);
		} else {
			var tmp2;
			if(t.format != null) {
				switch(t.format) {
				case "A16":
					tmp2 = kha_graphics4_TextureFormat.A16;
					break;
				case "A32":
					tmp2 = kha_graphics4_TextureFormat.A32;
					break;
				case "A8":
					tmp2 = kha_graphics4_TextureFormat.L8;
					break;
				case "DEPTH16":
					tmp2 = kha_graphics4_TextureFormat.DEPTH16;
					break;
				case "R16":
					tmp2 = kha_graphics4_TextureFormat.A16;
					break;
				case "R32":
					tmp2 = kha_graphics4_TextureFormat.A32;
					break;
				case "R8":
					tmp2 = kha_graphics4_TextureFormat.L8;
					break;
				case "RGBA128":
					tmp2 = kha_graphics4_TextureFormat.RGBA128;
					break;
				case "RGBA32":
					tmp2 = kha_graphics4_TextureFormat.RGBA32;
					break;
				case "RGBA64":
					tmp2 = kha_graphics4_TextureFormat.RGBA64;
					break;
				default:
					tmp2 = kha_graphics4_TextureFormat.RGBA32;
				}
			} else {
				tmp2 = kha_graphics4_TextureFormat.RGBA32;
			}
			return kha_Image.createRenderTarget(width,height,tmp2,depthStencil);
		}
	}
	,createCubeMap: function(t,depthStencil) {
		var tmp;
		if(t.format != null) {
			switch(t.format) {
			case "A16":
				tmp = kha_graphics4_TextureFormat.A16;
				break;
			case "A32":
				tmp = kha_graphics4_TextureFormat.A32;
				break;
			case "A8":
				tmp = kha_graphics4_TextureFormat.L8;
				break;
			case "DEPTH16":
				tmp = kha_graphics4_TextureFormat.DEPTH16;
				break;
			case "R16":
				tmp = kha_graphics4_TextureFormat.A16;
				break;
			case "R32":
				tmp = kha_graphics4_TextureFormat.A32;
				break;
			case "R8":
				tmp = kha_graphics4_TextureFormat.L8;
				break;
			case "RGBA128":
				tmp = kha_graphics4_TextureFormat.RGBA128;
				break;
			case "RGBA32":
				tmp = kha_graphics4_TextureFormat.RGBA32;
				break;
			case "RGBA64":
				tmp = kha_graphics4_TextureFormat.RGBA64;
				break;
			default:
				tmp = kha_graphics4_TextureFormat.RGBA32;
			}
		} else {
			tmp = kha_graphics4_TextureFormat.RGBA32;
		}
		return kha_graphics4_CubeMap.createRenderTarget(t.width,tmp,depthStencil);
	}
	,getTextureFormat: function(s) {
		switch(s) {
		case "A16":
			return kha_graphics4_TextureFormat.A16;
		case "A32":
			return kha_graphics4_TextureFormat.A32;
		case "A8":
			return kha_graphics4_TextureFormat.L8;
		case "DEPTH16":
			return kha_graphics4_TextureFormat.DEPTH16;
		case "R16":
			return kha_graphics4_TextureFormat.A16;
		case "R32":
			return kha_graphics4_TextureFormat.A32;
		case "R8":
			return kha_graphics4_TextureFormat.L8;
		case "RGBA128":
			return kha_graphics4_TextureFormat.RGBA128;
		case "RGBA32":
			return kha_graphics4_TextureFormat.RGBA32;
		case "RGBA64":
			return kha_graphics4_TextureFormat.RGBA64;
		default:
			return kha_graphics4_TextureFormat.RGBA32;
		}
	}
	,getDepthStencilFormat: function(s) {
		if(s == null || s == "") {
			return 1;
		}
		switch(s) {
		case "DEPTH16":
			return 5;
		case "DEPTH24":
			return 1;
		default:
			return 1;
		}
	}
	,__class__: iron_data_RenderPathData
});
var iron_data_RenderTarget = $hxClasses["iron.data.RenderTarget"] = function(raw) {
	this.isCubeMap = false;
	this.is3D = false;
	this.pong = null;
	this.pongState = false;
	this.hasDepth = false;
	this.cubeMap = null;
	this.image = null;
	this.depthStencilFrom = "";
	this.raw = raw;
};
iron_data_RenderTarget.__name__ = true;
iron_data_RenderTarget.prototype = {
	unload: function() {
		if(this.image != null) {
			this.image.unload();
		}
		if(this.cubeMap != null) {
			this.cubeMap.unload();
		}
		if(this.pong != null) {
			this.pong.unload();
		}
	}
	,__class__: iron_data_RenderTarget
};
var iron_data_StreamSector = $hxClasses["iron.data.StreamSector"] = function() {
	this.handles = [];
};
iron_data_StreamSector.__name__ = true;
iron_data_StreamSector.prototype = {
	__class__: iron_data_StreamSector
};
var iron_data_SceneStream = $hxClasses["iron.data.SceneStream"] = function() {
	this.unloadDistance = -1;
	this.loadDistance = -1;
	this.loading = 0;
	this.loadMax = 8;
	this.checkPos = 0;
	this.checkMax = 64;
	this.sectors = [new iron_data_StreamSector()];
};
iron_data_SceneStream.__name__ = true;
iron_data_SceneStream.prototype = {
	sceneTotal: function() {
		return this.sectors[0].handles.length;
	}
	,add: function(object_file,data_ref,sceneName,boneObjects,materials,parent,obj) {
		this.sectors[0].handles.push({ object_file : object_file, data_ref : data_ref, sceneName : sceneName, boneObjects : boneObjects, materials : materials, parent : parent, obj : obj, object : null, loading : false});
	}
	,setup: function(camera) {
		this.loadDistance = camera.data.raw.far_plane * 1.1 | 0;
		this.unloadDistance = camera.data.raw.far_plane * 1.5 | 0;
	}
	,update: function(camera) {
		var _gthis = this;
		if(this.loadDistance == -1) {
			this.setup(camera);
		}
		if(this.loading >= this.loadMax) {
			return;
		}
		var sec = this.sectors[0];
		var to = Math.min(this.checkMax,sec.handles.length) | 0;
		var _g1 = 0;
		var _g = to;
		while(_g1 < _g) {
			var i = _g1++;
			var h = [sec.handles[this.checkPos]];
			this.checkPos++;
			if(this.checkPos >= sec.handles.length) {
				this.checkPos = 0;
			}
			var camX = camera.transform.world.self._30;
			var camY = camera.transform.world.self._31;
			var camZ = camera.transform.world.self._32;
			var hx = h[0].obj.transform.values[3];
			var hy = h[0].obj.transform.values[7];
			var hz = h[0].obj.transform.values[11];
			var vx = camX - hx;
			var vy = camY - hy;
			var vz = camZ - hz;
			var cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
			var dim = h[0].obj.dimensions;
			if(dim != null) {
				var r = dim[0];
				if(dim[1] > r) {
					r = dim[1];
				}
				if(dim[2] > r) {
					r = dim[2];
				}
				cameraDistance -= r;
			}
			if(cameraDistance < this.loadDistance && h[0].object == null && !h[0].loading) {
				h[0].loading = true;
				this.loading++;
				iron_Scene.active.returnMeshObject(h[0].object_file,h[0].data_ref,h[0].sceneName,h[0].boneObjects,h[0].materials,h[0].parent,h[0].obj,(function(h1) {
					return function(object) {
						h1[0].object = js_Boot.__cast(object , iron_object_MeshObject);
						h1[0].loading = false;
						_gthis.loading--;
					};
				})(h));
				if(this.loading >= this.loadMax) {
					return;
				}
			} else if(cameraDistance > this.unloadDistance && h[0].object != null) {
				h[0].object.remove();
				if(h[0].object.data.refcount <= 0) {
					iron_data_Data.deleteMesh(h[0].object_file + h[0].data_ref);
				}
				h[0].object = null;
			}
		}
	}
	,__class__: iron_data_SceneStream
};
var iron_data_ShaderData = $hxClasses["iron.data.ShaderData"] = function(raw,overrideContext,done) {
	this.contexts = [];
	var _gthis = this;
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	var _g = 0;
	var _g1 = raw.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		this.contexts.push(null);
	}
	var contextsLoaded = 0;
	var _g11 = 0;
	var _g2 = raw.contexts.length;
	while(_g11 < _g2) {
		var i = [_g11++];
		var c1 = raw.contexts[i[0]];
		new iron_data_ShaderContext(c1,overrideContext,(function(i1) {
			return function(con) {
				_gthis.contexts[i1[0]] = con;
				contextsLoaded += 1;
				if(contextsLoaded == raw.contexts.length) {
					done(_gthis);
				}
			};
		})(i));
	}
};
iron_data_ShaderData.__name__ = true;
iron_data_ShaderData.parse = function(file,name,overrideContext,done) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getShaderRawByName(format.shader_datas,name);
		if(raw == null) {
			haxe_Log.trace("Shader data \"" + name + "\" not found!",{ fileName : "ShaderData.hx", lineNumber : 49, className : "iron.data.ShaderData", methodName : "parse"});
			done(null);
		}
		new iron_data_ShaderData(raw,overrideContext,done);
	});
};
iron_data_ShaderData.__super__ = iron_data_Data;
iron_data_ShaderData.prototype = $extend(iron_data_Data.prototype,{
	'delete': function() {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c["delete"]();
		}
	}
	,getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.raw.name == name) {
				return c;
			}
		}
		return null;
	}
	,__class__: iron_data_ShaderData
});
var iron_data_ShaderContext = $hxClasses["iron.data.ShaderContext"] = function(raw,overrideContext,done) {
	this.instancing = false;
	this.raw = raw;
	this.overrideContext = overrideContext;
	if(raw.name == "rect") {
		this.structure = iron_data_ShaderContext.getStructureRect();
		this.instancing = false;
	} else {
		this.parseVertexStructure();
	}
	this.compile(done);
};
iron_data_ShaderContext.__name__ = true;
iron_data_ShaderContext.getStructureRect = function() {
	if(iron_data_ShaderContext.structureRect == null) {
		iron_data_ShaderContext.structureRect = new kha_graphics4_VertexStructure();
		iron_data_ShaderContext.structureRect.add("pos",kha_graphics4_VertexData.Float2);
	}
	return iron_data_ShaderContext.structureRect;
};
iron_data_ShaderContext.prototype = {
	compile: function(done) {
		if(this.pipeState != null) {
			this.pipeState["delete"]();
		}
		this.pipeState = new kha_graphics4_PipelineState();
		this.constants = [];
		this.textureUnits = [];
		if(this.instancing) {
			var instStruct = new kha_graphics4_VertexStructure();
			instStruct.add("off",kha_graphics4_VertexData.Float3);
			this.pipeState.inputLayout = [this.structure,instStruct];
		} else {
			this.pipeState.inputLayout = [this.structure];
		}
		this.pipeState.depthWrite = this.raw.depth_write;
		this.pipeState.depthMode = this.getCompareMode(this.raw.compare_mode);
		if(this.raw.stencil_mode != null) {
			if(this.raw.stencil_mode == "always") {
				this.pipeState.stencilMode = kha_graphics4_CompareMode.Always;
			} else if(this.raw.stencil_mode == "equal") {
				this.pipeState.stencilMode = kha_graphics4_CompareMode.Equal;
			} else if(this.raw.stencil_mode == "not_equal") {
				this.pipeState.stencilMode = kha_graphics4_CompareMode.NotEqual;
			}
		}
		if(this.raw.stencil_pass != null) {
			if(this.raw.stencil_pass == "replace") {
				this.pipeState.stencilBothPass = kha_graphics4_StencilAction.Replace;
			} else if(this.raw.stencil_pass == "keep") {
				this.pipeState.stencilBothPass = kha_graphics4_StencilAction.Keep;
			}
		}
		if(this.raw.stencil_fail != null && this.raw.stencil_fail == "keep") {
			this.pipeState.stencilDepthFail = kha_graphics4_StencilAction.Keep;
			this.pipeState.stencilFail = kha_graphics4_StencilAction.Keep;
		}
		if(this.raw.stencil_reference_value != null) {
			this.pipeState.stencilReferenceValue = this.raw.stencil_reference_value;
		}
		this.pipeState.cullMode = this.getCullMode(this.raw.cull_mode);
		if(this.raw.blend_source != null) {
			this.pipeState.blendSource = this.getBlendingFactor(this.raw.blend_source);
		}
		if(this.raw.blend_destination != null) {
			this.pipeState.blendDestination = this.getBlendingFactor(this.raw.blend_destination);
		}
		if(this.raw.blend_operation != null) {
			this.pipeState.blendOperation = this.getBlendingOperation(this.raw.blend_operation);
		}
		if(this.raw.alpha_blend_source != null) {
			this.pipeState.alphaBlendSource = this.getBlendingFactor(this.raw.alpha_blend_source);
		}
		if(this.raw.alpha_blend_destination != null) {
			this.pipeState.alphaBlendDestination = this.getBlendingFactor(this.raw.alpha_blend_destination);
		}
		if(this.raw.alpha_blend_operation != null) {
			this.pipeState.alphaBlendOperation = this.getBlendingOperation(this.raw.alpha_blend_operation);
		}
		if(this.raw.color_write_red != null) {
			this.pipeState.colorWriteMaskRed = this.raw.color_write_red;
		}
		if(this.raw.color_write_green != null) {
			this.pipeState.colorWriteMaskGreen = this.raw.color_write_green;
		}
		if(this.raw.color_write_blue != null) {
			this.pipeState.colorWriteMaskBlue = this.raw.color_write_blue;
		}
		if(this.raw.color_write_alpha != null) {
			this.pipeState.colorWriteMaskAlpha = this.raw.color_write_alpha;
		}
		if(this.raw.conservative_raster != null) {
			this.pipeState.conservativeRasterization = this.raw.conservative_raster;
		}
		if(this.raw.shader_from_source) {
			this.pipeState.fragmentShader = kha_graphics4_FragmentShader.fromSource(this.raw.fragment_shader);
			this.pipeState.vertexShader = kha_graphics4_VertexShader.fromSource(this.raw.vertex_shader);
			this.finishCompile(done);
		} else {
			var tmp = StringTools.replace(this.raw.fragment_shader,".","_");
			this.pipeState.fragmentShader = Reflect.field(kha_Shaders,tmp);
			var tmp1 = StringTools.replace(this.raw.vertex_shader,".","_");
			this.pipeState.vertexShader = Reflect.field(kha_Shaders,tmp1);
			if(this.raw.geometry_shader != null) {
				var tmp2 = StringTools.replace(this.raw.geometry_shader,".","_");
				this.pipeState.geometryShader = Reflect.field(kha_Shaders,tmp2);
			}
			if(this.raw.tesscontrol_shader != null) {
				var tmp3 = StringTools.replace(this.raw.tesscontrol_shader,".","_");
				this.pipeState.tessellationControlShader = Reflect.field(kha_Shaders,tmp3);
			}
			if(this.raw.tesseval_shader != null) {
				var tmp4 = StringTools.replace(this.raw.tesseval_shader,".","_");
				this.pipeState.tessellationEvaluationShader = Reflect.field(kha_Shaders,tmp4);
			}
			this.finishCompile(done);
		}
	}
	,finishCompile: function(done) {
		if(this.overrideContext != null) {
			if(this.overrideContext.cull_mode != null) {
				this.pipeState.cullMode = this.getCullMode(this.overrideContext.cull_mode);
			}
		}
		this.pipeState.compile();
		if(this.raw.constants != null) {
			var _g = 0;
			var _g1 = this.raw.constants;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				this.addConstant(c);
			}
		}
		if(this.raw.texture_units != null) {
			var _g2 = 0;
			var _g11 = this.raw.texture_units;
			while(_g2 < _g11.length) {
				var tu = _g11[_g2];
				++_g2;
				this.addTexture(tu);
			}
		}
		done(this);
	}
	,sizeToVD: function(size) {
		if(size == 1) {
			return kha_graphics4_VertexData.Float1;
		} else if(size == 2) {
			return kha_graphics4_VertexData.Float2;
		} else if(size == 3) {
			return kha_graphics4_VertexData.Float3;
		} else if(size == 4) {
			return kha_graphics4_VertexData.Float4;
		}
		return null;
	}
	,parseVertexStructure: function() {
		this.structure = new kha_graphics4_VertexStructure();
		var _g = 0;
		var _g1 = this.raw.vertex_structure;
		while(_g < _g1.length) {
			var vs = _g1[_g];
			++_g;
			if(vs.name == "off") {
				this.instancing = true;
				continue;
			}
			this.structure.add(vs.name,this.sizeToVD(vs.size));
		}
	}
	,deleteShader: function(shader) {
		if(shader.shader == null) {
			return;
		}
		shader["delete"]();
	}
	,'delete': function() {
		if(this.pipeState.fragmentShader != null) {
			var shader = this.pipeState.fragmentShader;
			if(shader.shader != null) {
				shader["delete"]();
			}
		}
		if(this.pipeState.vertexShader != null) {
			var shader1 = this.pipeState.vertexShader;
			if(shader1.shader != null) {
				shader1["delete"]();
			}
		}
		if(this.pipeState.geometryShader != null) {
			var shader2 = this.pipeState.geometryShader;
			if(shader2.shader != null) {
				shader2["delete"]();
			}
		}
		if(this.pipeState.tessellationControlShader != null) {
			var shader3 = this.pipeState.tessellationControlShader;
			if(shader3.shader != null) {
				shader3["delete"]();
			}
		}
		if(this.pipeState.tessellationEvaluationShader != null) {
			var shader4 = this.pipeState.tessellationEvaluationShader;
			if(shader4.shader != null) {
				shader4["delete"]();
			}
		}
		this.pipeState["delete"]();
	}
	,getCompareMode: function(s) {
		switch(s) {
		case "always":
			return kha_graphics4_CompareMode.Always;
		case "equal":
			return kha_graphics4_CompareMode.Equal;
		case "greater":
			return kha_graphics4_CompareMode.Greater;
		case "greater_equal":
			return kha_graphics4_CompareMode.GreaterEqual;
		case "less":
			return kha_graphics4_CompareMode.Less;
		case "less_equal":
			return kha_graphics4_CompareMode.LessEqual;
		case "never":
			return kha_graphics4_CompareMode.Never;
		case "not_equal":
			return kha_graphics4_CompareMode.NotEqual;
		default:
			return kha_graphics4_CompareMode.Less;
		}
	}
	,getCullMode: function(s) {
		switch(s) {
		case "clockwise":
			return kha_graphics4_CullMode.Clockwise;
		case "none":
			return kha_graphics4_CullMode.None;
		default:
			return kha_graphics4_CullMode.CounterClockwise;
		}
	}
	,getBlendingOperation: function(s) {
		switch(s) {
		case "add":
			return kha_graphics4_BlendingOperation.Add;
		case "max":
			return kha_graphics4_BlendingOperation.Max;
		case "min":
			return kha_graphics4_BlendingOperation.Min;
		case "reverse_substract":
			return kha_graphics4_BlendingOperation.ReverseSubtract;
		case "substract":
			return kha_graphics4_BlendingOperation.Subtract;
		default:
			return kha_graphics4_BlendingOperation.Add;
		}
	}
	,getBlendingFactor: function(s) {
		switch(s) {
		case "blend_one":
			return kha_graphics4_BlendingFactor.BlendOne;
		case "blend_zero":
			return kha_graphics4_BlendingFactor.BlendZero;
		case "destination_alpha":
			return kha_graphics4_BlendingFactor.DestinationAlpha;
		case "destination_color":
			return kha_graphics4_BlendingFactor.DestinationColor;
		case "inverse_destination_alpha":
			return kha_graphics4_BlendingFactor.InverseDestinationAlpha;
		case "inverse_destination_color":
			return kha_graphics4_BlendingFactor.InverseDestinationColor;
		case "inverse_source_alpha":
			return kha_graphics4_BlendingFactor.InverseSourceAlpha;
		case "inverse_source_color":
			return kha_graphics4_BlendingFactor.InverseSourceColor;
		case "source_alpha":
			return kha_graphics4_BlendingFactor.SourceAlpha;
		case "source_color":
			return kha_graphics4_BlendingFactor.SourceColor;
		default:
			return kha_graphics4_BlendingFactor.Undefined;
		}
	}
	,getTextureAddresing: function(s) {
		switch(s) {
		case "mirror":
			return kha_graphics4_TextureAddressing.Mirror;
		case "repeat":
			return kha_graphics4_TextureAddressing.Repeat;
		default:
			return kha_graphics4_TextureAddressing.Clamp;
		}
	}
	,getTextureFilter: function(s) {
		switch(s) {
		case "linear":
			return kha_graphics4_TextureFilter.LinearFilter;
		case "point":
			return kha_graphics4_TextureFilter.PointFilter;
		default:
			return kha_graphics4_TextureFilter.AnisotropicFilter;
		}
	}
	,getMipmapFilter: function(s) {
		switch(s) {
		case "no":
			return kha_graphics4_MipMapFilter.NoMipFilter;
		case "point":
			return kha_graphics4_MipMapFilter.PointMipFilter;
		default:
			return kha_graphics4_MipMapFilter.LinearMipFilter;
		}
	}
	,addConstant: function(c) {
		this.constants.push(this.pipeState.getConstantLocation(c.name));
	}
	,addTexture: function(tu) {
		var unit = this.pipeState.getTextureUnit(tu.name);
		this.textureUnits.push(unit);
	}
	,setTextureParameters: function(g,unitIndex,tex) {
		var unit = this.textureUnits[unitIndex];
		g.setTextureParameters(unit,tex.u_addressing == null ? kha_graphics4_TextureAddressing.Repeat : this.getTextureAddresing(tex.u_addressing),tex.v_addressing == null ? kha_graphics4_TextureAddressing.Repeat : this.getTextureAddresing(tex.v_addressing),tex.min_filter == null ? kha_graphics4_TextureFilter.LinearFilter : this.getTextureFilter(tex.min_filter),tex.mag_filter == null ? kha_graphics4_TextureFilter.LinearFilter : this.getTextureFilter(tex.mag_filter),tex.mipmap_filter == null ? kha_graphics4_MipMapFilter.NoMipFilter : this.getMipmapFilter(tex.mipmap_filter));
	}
	,__class__: iron_data_ShaderContext
};
var iron_data_WorldData = $hxClasses["iron.data.WorldData"] = function(raw,done) {
	this.vec = new iron_math_Vec4();
	this.shirr = null;
	var _gthis = this;
	iron_data_Data.call(this);
	this.raw = raw;
	this.name = raw.name;
	if(raw.probes != null && raw.probes.length > 0) {
		this.probes = [];
		var _g = 0;
		var _g1 = raw.probes;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			new iron_data_Probe(p,function(self) {
				_gthis.probes.push(self);
				if(_gthis.probes.length == raw.probes.length) {
					done(_gthis);
				}
			});
		}
	} else {
		done(this);
	}
};
iron_data_WorldData.__name__ = true;
iron_data_WorldData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getWorldRawByName(format.world_datas,id);
		if(raw == null) {
			haxe_Log.trace("World data \"" + id + "\" not found!",{ fileName : "WorldData.hx", lineNumber : 40, className : "iron.data.WorldData", methodName : "parse"});
			done(null);
		}
		new iron_data_WorldData(raw,done);
	});
};
iron_data_WorldData.getEmptyIrradiance = function() {
	if(iron_data_WorldData.emptyIrr == null) {
		var this1 = new Array(28);
		iron_data_WorldData.emptyIrr = this1;
		var _g1 = 0;
		var _g = iron_data_WorldData.emptyIrr.length;
		while(_g1 < _g) {
			var i = _g1++;
			iron_data_WorldData.emptyIrr[i] = 0.0;
		}
	}
	return iron_data_WorldData.emptyIrr;
};
iron_data_WorldData.__super__ = iron_data_Data;
iron_data_WorldData.prototype = $extend(iron_data_Data.prototype,{
	getGlobalProbe: function() {
		return this.probes[0];
	}
	,getLocalProbe: function(i) {
		if(i < this.probes.length) {
			return this.probes[i];
		} else {
			return null;
		}
	}
	,getSHIrradiance: function() {
		if(this.shirr == null) {
			var this1 = new Array(28);
			this.shirr = this1;
			var p = this.probes[0];
			var _g1 = 0;
			var _g = p.irradiance.length;
			while(_g1 < _g) {
				var j = _g1++;
				this.shirr[j] = p.irradiance[j];
			}
		}
		return this.shirr;
	}
	,getProbeID: function(t) {
		this.vec.x = t.world.self._30;
		this.vec.y = t.world.self._31;
		this.vec.z = t.world.self._32;
		var size = t.size;
		var _g1 = 1;
		var _g = this.probes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this.probes[i];
			if(this.vec.x + size.x / 2 < p.volumeMin.x || this.vec.x - size.x / 2 > p.volumeMax.x || this.vec.y + size.y / 2 < p.volumeMin.y || this.vec.y - size.y / 2 > p.volumeMax.y || this.vec.z + size.z / 2 < p.volumeMin.z || this.vec.z - size.z / 2 > p.volumeMax.z) {
				continue;
			}
			return i;
		}
		return 0;
	}
	,getProbeVolumeCenter: function(t) {
		return this.probes[this.getProbeID(t)].volumeCenter;
	}
	,getProbeVolumeSize: function(t) {
		return this.probes[this.getProbeID(t)].volume;
	}
	,getProbeStrength: function(t) {
		return this.probes[this.getProbeID(t)].raw.strength;
	}
	,getProbeBlending: function(t) {
		return this.probes[this.getProbeID(t)].raw.blending;
	}
	,__class__: iron_data_WorldData
});
var iron_data_Probe = $hxClasses["iron.data.Probe"] = function(raw,done) {
	var _gthis = this;
	this.raw = raw;
	this.setIrradiance(function(irr) {
		_gthis.irradiance = irr;
		if(raw.radiance != null) {
			iron_data_Data.getImage(raw.radiance,function(rad) {
				_gthis.radiance = rad;
				var radianceMipmaps = [];
				while(radianceMipmaps.length < raw.radiance_mipmaps) radianceMipmaps.push(null);
				var ext = raw.radiance.substring(raw.radiance.length - 4);
				var base = raw.radiance.substring(0,raw.radiance.length - 4);
				var mipsLoaded = 0;
				var _g1 = 0;
				var _g = raw.radiance_mipmaps;
				while(_g1 < _g) {
					var i = [_g1++];
					iron_data_Data.getImage(base + "_" + i[0] + ext,(function(i1) {
						return function(mipimg) {
							radianceMipmaps[i1[0]] = mipimg;
							mipsLoaded += 1;
							if(mipsLoaded == raw.radiance_mipmaps) {
								_gthis.radiance.setMipmaps(radianceMipmaps);
								_gthis.mipsSet(done);
							}
						};
					})(i),true);
				}
			});
		} else {
			_gthis.mipsSet(done);
		}
	});
};
iron_data_Probe.__name__ = true;
iron_data_Probe.prototype = {
	mipsSet: function(done) {
		this.volume = new iron_math_Vec4(this.raw.volume[0],this.raw.volume[1],this.raw.volume[2]);
		this.volumeCenter = new iron_math_Vec4(this.raw.volume_center[0],this.raw.volume_center[1],this.raw.volume_center[2]);
		this.volumeMin = new iron_math_Vec4(this.volumeCenter.x - this.volume.x,this.volumeCenter.y - this.volume.y,this.volumeCenter.z - this.volume.z);
		this.volumeMax = new iron_math_Vec4(this.volumeCenter.x + this.volume.x,this.volumeCenter.y + this.volume.y,this.volumeCenter.z + this.volume.z);
		done(this);
	}
	,setIrradiance: function(done) {
		if(this.raw.irradiance == "") {
			var ar = [1.0281457342829743,1.1617608778901902,1.3886220898440544,-0.13044863139637752,-0.2794659158733846,-0.5736106907295643,0.04065421813873111,0.0434367391348577,0.03567450494792305,0.10964557605577738,0.1129839085793664,0.11261660812141877,-0.08271974283263238,-0.08068091195339556,-0.06432614970480094,-0.12517787967665814,-0.11638582546310804,-0.09743696224655113,0.20068697715947176,0.2158788783296805,0.2109374396869599,0.19636637427150455,0.19445523113118082,0.17825330699680575,0.31440860839538637,0.33041120060402407,0.30867788630062676,0.0];
			done(ar);
		} else {
			iron_data_Data.getBlob(this.raw.irradiance + ".arm",function(b) {
				var irradianceData = b;
				var irradianceParsed = JSON.parse(irradianceData.toString());
				var this1 = new Array(28);
				var irr = this1;
				var _g = 0;
				while(_g < 27) {
					var i = _g++;
					irr[i] = irradianceParsed.irradiance[i];
				}
				irr[27] = 0.0;
				done(irr);
			});
		}
	}
	,__class__: iron_data_Probe
};
var iron_math_Mat3 = $hxClasses["iron.math.Mat3"] = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this.self = new kha_math_FastMatrix3(_00,_10,_20,_01,_11,_21,_02,_12,_22);
};
iron_math_Mat3.__name__ = true;
iron_math_Mat3.identity = function() {
	return new iron_math_Mat3(1,0,0,0,1,0,0,0,1);
};
iron_math_Mat3.prototype = {
	setFrom4: function(m) {
		this.self._00 = m.self._00;
		this.self._01 = m.self._01;
		this.self._02 = m.self._02;
		this.self._10 = m.self._10;
		this.self._11 = m.self._11;
		this.self._12 = m.self._12;
		this.self._20 = m.self._20;
		this.self._21 = m.self._21;
		this.self._22 = m.self._22;
	}
	,get__00: function() {
		return this.self._00;
	}
	,set__00: function(f) {
		return this.self._00 = f;
	}
	,get__01: function() {
		return this.self._01;
	}
	,set__01: function(f) {
		return this.self._01 = f;
	}
	,get__02: function() {
		return this.self._02;
	}
	,set__02: function(f) {
		return this.self._02 = f;
	}
	,get__10: function() {
		return this.self._10;
	}
	,set__10: function(f) {
		return this.self._10 = f;
	}
	,get__11: function() {
		return this.self._11;
	}
	,set__11: function(f) {
		return this.self._11 = f;
	}
	,get__12: function() {
		return this.self._12;
	}
	,set__12: function(f) {
		return this.self._12 = f;
	}
	,get__20: function() {
		return this.self._20;
	}
	,set__20: function(f) {
		return this.self._20 = f;
	}
	,get__21: function() {
		return this.self._21;
	}
	,set__21: function(f) {
		return this.self._21 = f;
	}
	,get__22: function() {
		return this.self._22;
	}
	,set__22: function(f) {
		return this.self._22 = f;
	}
	,__class__: iron_math_Mat3
	,__properties__: {set__22:"set__22",get__22:"get__22",set__21:"set__21",get__21:"get__21",set__20:"set__20",get__20:"get__20",set__12:"set__12",get__12:"get__12",set__11:"set__11",get__11:"get__11",set__10:"set__10",get__10:"get__10",set__02:"set__02",get__02:"get__02",set__01:"set__01",get__01:"get__01",set__00:"set__00",get__00:"get__00"}
};
var kha_math_FastMatrix4 = $hxClasses["kha.math.FastMatrix4"] = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
kha_math_FastMatrix4.__name__ = true;
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_FastMatrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var zaxis = new kha_math_FastVector3(at.x - eye.x,at.y - eye.y,at.z - eye.z);
	zaxis.set_length(1);
	var _x = zaxis.y * up.z - zaxis.z * up.y;
	var _y = zaxis.z * up.x - zaxis.x * up.z;
	var _z = zaxis.x * up.y - zaxis.y * up.x;
	var xaxis = new kha_math_FastVector3(_x,_y,_z);
	xaxis.set_length(1);
	var yaxis_z;
	var yaxis_y;
	var yaxis_x;
	var _x1 = xaxis.y * zaxis.z - xaxis.z * zaxis.y;
	var _y1 = xaxis.z * zaxis.x - xaxis.x * zaxis.z;
	var _z1 = xaxis.x * zaxis.y - xaxis.y * zaxis.x;
	yaxis_x = _x1;
	yaxis_y = _y1;
	yaxis_z = _z1;
	return new kha_math_FastMatrix4(xaxis.x,xaxis.y,xaxis.z,-(xaxis.x * eye.x + xaxis.y * eye.y + xaxis.z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis.x,-zaxis.y,-zaxis.z,zaxis.x * eye.x + zaxis.y * eye.y + zaxis.z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	__class__: kha_math_FastMatrix4
};
var iron_math_Vec4 = $hxClasses["iron.math.Vec4"] = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.quat = new iron_math_Quat();
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
iron_math_Vec4.__name__ = true;
iron_math_Vec4.lerp = function(v1,v2,t) {
	var target = new iron_math_Vec4();
	target.x = v2.x + (v1.x - v2.x) * t;
	target.y = v2.y + (v1.y - v2.y) * t;
	target.z = v2.z + (v1.z - v2.z) * t;
	return target;
};
iron_math_Vec4.distance3d = function(v1,v2) {
	var vx = v1.x - v2.x;
	var vy = v1.y - v2.y;
	var vz = v1.z - v2.z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec4.distance3df = function(v1x,v1y,v1z,v2x,v2y,v2z) {
	var vx = v1x - v2x;
	var vy = v1y - v2y;
	var vz = v1z - v2z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec4.xAxis = function() {
	return new iron_math_Vec4(1.0,0.0,0.0);
};
iron_math_Vec4.yAxis = function() {
	return new iron_math_Vec4(0.0,1.0,0.0);
};
iron_math_Vec4.zAxis = function() {
	return new iron_math_Vec4(0.0,0.0,1.0);
};
iron_math_Vec4.prototype = {
	cross: function(v) {
		var x2 = this.y * v.z - this.z * v.y;
		var y2 = this.z * v.x - this.x * v.z;
		var z2 = this.x * v.y - this.y * v.x;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		return this;
	}
	,crossvecs: function(a,b) {
		var x2 = a.y * b.z - a.z * b.y;
		var y2 = a.z * b.x - a.x * b.z;
		var z2 = a.x * b.y - a.y * b.x;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		return this;
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1.0;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		return this;
	}
	,addf: function(x,y,z) {
		this.x += x;
		this.y += y;
		this.z += z;
		return this;
	}
	,addvecs: function(a,b) {
		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		return this;
	}
	,subvecs: function(a,b) {
		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		return this;
	}
	,normalize: function() {
		var n = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(n > 0.0) {
			var invN = 1.0 / n;
			this.x *= invN;
			this.y *= invN;
			this.z *= invN;
		}
		return this;
	}
	,mult: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,setFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	,clone: function() {
		return new iron_math_Vec4(this.x,this.y,this.z,this.w);
	}
	,applyproj: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var d = 1.0 / (m.self._03 * x + m.self._13 * y + m.self._23 * z + m.self._33);
		this.x = (m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30) * d;
		this.y = (m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31) * d;
		this.z = (m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32) * d;
		return this;
	}
	,applymat: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		this.x = m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30;
		this.y = m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31;
		this.z = m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32;
		return this;
	}
	,applymat4: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;
		this.x = m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30 * w;
		this.y = m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31 * w;
		this.z = m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32 * w;
		this.w = m.self._03 * x + m.self._13 * y + m.self._23 * z + m.self._33 * w;
		return this;
	}
	,applyAxisAngle: function(axis,angle) {
		this.quat.fromAxisAngle(axis,angle);
		return this.applyQuat(this.quat);
	}
	,applyQuat: function(q) {
		var ix = q.w * this.x + q.y * this.z - q.z * this.y;
		var iy = q.w * this.y + q.z * this.x - q.x * this.z;
		var iz = q.w * this.z + q.x * this.y - q.y * this.x;
		var iw = -q.x * this.x - q.y * this.y - q.z * this.z;
		this.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
		this.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
		this.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,sub: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		return this;
	}
	,distanceTo: function(p) {
		return Math.sqrt((p.x - this.x) * (p.x - this.x) + (p.y - this.y) * (p.y - this.y) + (p.z - this.z) * (p.z - this.z));
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: iron_math_Vec4
};
var iron_math_Mat4 = $hxClasses["iron.math.Mat4"] = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this.self = new kha_math_FastMatrix4(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33);
};
iron_math_Mat4.__name__ = true;
iron_math_Mat4.identity = function() {
	return new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
};
iron_math_Mat4.fromArray = function(a,offset) {
	if(offset == null) {
		offset = 0;
	}
	return new iron_math_Mat4(a[offset],a[1 + offset],a[2 + offset],a[3 + offset],a[4 + offset],a[5 + offset],a[6 + offset],a[7 + offset],a[8 + offset],a[9 + offset],a[10 + offset],a[11 + offset],a[12 + offset],a[13 + offset],a[14 + offset],a[15 + offset]);
};
iron_math_Mat4.fromFloat32Array = function(a,offset) {
	if(offset == null) {
		offset = 0;
	}
	return new iron_math_Mat4(a[offset],a[1 + offset],a[2 + offset],a[3 + offset],a[4 + offset],a[5 + offset],a[6 + offset],a[7 + offset],a[8 + offset],a[9 + offset],a[10 + offset],a[11 + offset],a[12 + offset],a[13 + offset],a[14 + offset],a[15 + offset]);
};
iron_math_Mat4.perspective = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
iron_math_Mat4.orthogonal = function(left,right,bottom,top,near,far,orthoScale) {
	if(orthoScale == null) {
		orthoScale = 2;
	}
	var w = right - left;
	var h = top - bottom;
	var p = far - near;
	var x = (right + left) / w;
	var y = (top + bottom) / h;
	var z = (far + near) / p;
	return new iron_math_Mat4(orthoScale / w,0,0,-x,0,orthoScale / h,0,-y,0,0,-orthoScale / p,-z,0,0,0,1);
};
iron_math_Mat4.lookAt = function(eye,center,up) {
	return iron_math_Mat4.identity().setLookAt(eye,center,up);
};
iron_math_Mat4.prototype = {
	compose: function(location,quaternion,sc) {
		this.fromQuaternion(quaternion);
		this.scale(sc);
		this.setLocation(location);
		return this;
	}
	,decompose: function(location,quaternion,scale) {
		iron_math_Mat4.helpVec.w = 0.0;
		var _this = iron_math_Mat4.helpVec.set(this.self._00,this.self._01,this.self._02);
		var sx = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
		var _this1 = iron_math_Mat4.helpVec.set(this.self._10,this.self._11,this.self._12);
		var sy = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
		var _this2 = iron_math_Mat4.helpVec.set(this.self._20,this.self._21,this.self._22);
		var sz = Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z);
		var _this3 = this.self;
		var m3 = _this3._12;
		var m4 = _this3._22;
		var m5 = _this3._32;
		var m6 = _this3._13;
		var m7 = _this3._23;
		var m8 = _this3._33;
		var c00 = _this3._11 * (m4 * m8 - m5 * m7) - _this3._21 * (m3 * m8 - m5 * m6) + _this3._31 * (m3 * m7 - m4 * m6);
		var m31 = _this3._12;
		var m41 = _this3._22;
		var m51 = _this3._32;
		var m61 = _this3._13;
		var m71 = _this3._23;
		var m81 = _this3._33;
		var c01 = _this3._10 * (m41 * m81 - m51 * m71) - _this3._20 * (m31 * m81 - m51 * m61) + _this3._30 * (m31 * m71 - m41 * m61);
		var m32 = _this3._11;
		var m42 = _this3._21;
		var m52 = _this3._31;
		var m62 = _this3._13;
		var m72 = _this3._23;
		var m82 = _this3._33;
		var c02 = _this3._10 * (m42 * m82 - m52 * m72) - _this3._20 * (m32 * m82 - m52 * m62) + _this3._30 * (m32 * m72 - m42 * m62);
		var m33 = _this3._11;
		var m43 = _this3._21;
		var m53 = _this3._31;
		var m63 = _this3._12;
		var m73 = _this3._22;
		var m83 = _this3._32;
		var c03 = _this3._10 * (m43 * m83 - m53 * m73) - _this3._20 * (m33 * m83 - m53 * m63) + _this3._30 * (m33 * m73 - m43 * m63);
		var det = _this3._00 * c00 - _this3._01 * c01 + _this3._02 * c02 - _this3._03 * c03;
		if(det < 0.0) {
			sx = -sx;
		}
		location.x = this.self._30;
		location.y = this.self._31;
		location.z = this.self._32;
		iron_math_Mat4.helpMat.self._00 = this.self._00;
		iron_math_Mat4.helpMat.self._10 = this.self._10;
		iron_math_Mat4.helpMat.self._20 = this.self._20;
		iron_math_Mat4.helpMat.self._30 = this.self._30;
		iron_math_Mat4.helpMat.self._01 = this.self._01;
		iron_math_Mat4.helpMat.self._11 = this.self._11;
		iron_math_Mat4.helpMat.self._21 = this.self._21;
		iron_math_Mat4.helpMat.self._31 = this.self._31;
		iron_math_Mat4.helpMat.self._02 = this.self._02;
		iron_math_Mat4.helpMat.self._12 = this.self._12;
		iron_math_Mat4.helpMat.self._22 = this.self._22;
		iron_math_Mat4.helpMat.self._32 = this.self._32;
		iron_math_Mat4.helpMat.self._03 = this.self._03;
		iron_math_Mat4.helpMat.self._13 = this.self._13;
		iron_math_Mat4.helpMat.self._23 = this.self._23;
		iron_math_Mat4.helpMat.self._33 = this.self._33;
		var invSX = 1.0 / sx;
		var invSY = 1.0 / sy;
		var invSZ = 1.0 / sz;
		var _g = iron_math_Mat4.helpMat;
		_g.self._00 *= invSX;
		var _g1 = iron_math_Mat4.helpMat;
		_g1.self._01 *= invSX;
		var _g2 = iron_math_Mat4.helpMat;
		_g2.self._02 *= invSX;
		iron_math_Mat4.helpMat.self._03 = 0.0;
		var _g3 = iron_math_Mat4.helpMat;
		_g3.self._10 *= invSY;
		var _g4 = iron_math_Mat4.helpMat;
		_g4.self._11 *= invSY;
		var _g5 = iron_math_Mat4.helpMat;
		_g5.self._12 *= invSY;
		iron_math_Mat4.helpMat.self._13 = 0.0;
		var _g6 = iron_math_Mat4.helpMat;
		_g6.self._20 *= invSZ;
		var _g7 = iron_math_Mat4.helpMat;
		_g7.self._21 *= invSZ;
		var _g8 = iron_math_Mat4.helpMat;
		_g8.self._22 *= invSZ;
		iron_math_Mat4.helpMat.self._23 = 0.0;
		iron_math_Mat4.helpMat.self._30 = 0.0;
		iron_math_Mat4.helpMat.self._31 = 0.0;
		iron_math_Mat4.helpMat.self._32 = 0.0;
		iron_math_Mat4.helpMat.self._33 = 0.0;
		quaternion.fromRotationMat(iron_math_Mat4.helpMat);
		scale.x = sx;
		scale.y = sy;
		scale.z = sz;
		return this;
	}
	,setLocation: function(v) {
		this.self._30 = v.x;
		this.self._31 = v.y;
		this.self._32 = v.z;
		return this;
	}
	,fromQuaternion: function(q) {
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this.self._00 = 1.0 - (yy + zz);
		this.self._10 = xy - wz;
		this.self._20 = xz + wy;
		this.self._01 = xy + wz;
		this.self._11 = 1.0 - (xx + zz);
		this.self._21 = yz - wx;
		this.self._02 = xz - wy;
		this.self._12 = yz + wx;
		this.self._22 = 1.0 - (xx + yy);
		this.self._03 = 0.0;
		this.self._13 = 0.0;
		this.self._23 = 0.0;
		this.self._30 = 0.0;
		this.self._31 = 0.0;
		this.self._32 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,toArray: function() {
		return [this.self._00,this.self._10,this.self._20,this.self._30,this.self._01,this.self._11,this.self._21,this.self._31,this.self._02,this.self._12,this.self._22,this.self._32,this.self._03,this.self._13,this.self._23,this.self._33];
	}
	,setIdentity: function() {
		this.self._00 = 1.0;
		this.self._01 = 0.0;
		this.self._02 = 0.0;
		this.self._03 = 0.0;
		this.self._10 = 0.0;
		this.self._11 = 1.0;
		this.self._12 = 0.0;
		this.self._13 = 0.0;
		this.self._20 = 0.0;
		this.self._21 = 0.0;
		this.self._22 = 1.0;
		this.self._23 = 0.0;
		this.self._30 = 0.0;
		this.self._31 = 0.0;
		this.self._32 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,initTranslate: function(x,y,z) {
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.self._00 = 1.0;
		this.self._01 = 0.0;
		this.self._02 = 0.0;
		this.self._03 = 0.0;
		this.self._10 = 0.0;
		this.self._11 = 1.0;
		this.self._12 = 0.0;
		this.self._13 = 0.0;
		this.self._20 = 0.0;
		this.self._21 = 0.0;
		this.self._22 = 1.0;
		this.self._23 = 0.0;
		this.self._30 = x;
		this.self._31 = y;
		this.self._32 = z;
		this.self._33 = 1.0;
	}
	,translate: function(x,y,z) {
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var _g = this;
		_g.self._00 += x * this.self._03;
		var _g1 = this;
		_g1.self._01 += y * this.self._03;
		var _g2 = this;
		_g2.self._02 += z * this.self._03;
		var _g3 = this;
		_g3.self._10 += x * this.self._13;
		var _g4 = this;
		_g4.self._11 += y * this.self._13;
		var _g5 = this;
		_g5.self._12 += z * this.self._13;
		var _g6 = this;
		_g6.self._20 += x * this.self._23;
		var _g7 = this;
		_g7.self._21 += y * this.self._23;
		var _g8 = this;
		_g8.self._22 += z * this.self._23;
		var _g9 = this;
		_g9.self._30 += x * this.self._33;
		var _g10 = this;
		_g10.self._31 += y * this.self._33;
		var _g11 = this;
		_g11.self._32 += z * this.self._33;
	}
	,scale: function(v) {
		var _g = this;
		_g.self._00 *= v.x;
		var _g1 = this;
		_g1.self._01 *= v.x;
		var _g2 = this;
		_g2.self._02 *= v.x;
		var _g3 = this;
		_g3.self._03 *= v.x;
		var _g4 = this;
		_g4.self._10 *= v.y;
		var _g5 = this;
		_g5.self._11 *= v.y;
		var _g6 = this;
		_g6.self._12 *= v.y;
		var _g7 = this;
		_g7.self._13 *= v.y;
		var _g8 = this;
		_g8.self._20 *= v.z;
		var _g9 = this;
		_g9.self._21 *= v.z;
		var _g10 = this;
		_g10.self._22 *= v.z;
		var _g11 = this;
		_g11.self._23 *= v.z;
	}
	,multmat3x4: function(a,b) {
		var m11 = a.self._00;
		var m12 = a.self._01;
		var m13 = a.self._02;
		var m21 = a.self._10;
		var m22 = a.self._11;
		var m23 = a.self._12;
		var a31 = a.self._20;
		var a32 = a.self._21;
		var a33 = a.self._22;
		var a41 = a.self._30;
		var a42 = a.self._31;
		var a43 = a.self._32;
		var b11 = b.self._00;
		var b12 = b.self._01;
		var b13 = b.self._02;
		var b21 = b.self._10;
		var b22 = b.self._11;
		var b23 = b.self._12;
		var b31 = b.self._20;
		var b32 = b.self._21;
		var b33 = b.self._22;
		var b41 = b.self._30;
		var b42 = b.self._31;
		var b43 = b.self._32;
		this.self._00 = m11 * b11 + m12 * b21 + m13 * b31;
		this.self._01 = m11 * b12 + m12 * b22 + m13 * b32;
		this.self._02 = m11 * b13 + m12 * b23 + m13 * b33;
		this.self._03 = 0.0;
		this.self._10 = m21 * b11 + m22 * b21 + m23 * b31;
		this.self._11 = m21 * b12 + m22 * b22 + m23 * b32;
		this.self._12 = m21 * b13 + m22 * b23 + m23 * b33;
		this.self._13 = 0.0;
		this.self._20 = a31 * b11 + a32 * b21 + a33 * b31;
		this.self._21 = a31 * b12 + a32 * b22 + a33 * b32;
		this.self._22 = a31 * b13 + a32 * b23 + a33 * b33;
		this.self._23 = 0.0;
		this.self._30 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this.self._31 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this.self._32 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this.self._33 = 1.0;
	}
	,multmat: function(m) {
		return new iron_math_Mat4(this.self._00 * m.self._00 + this.self._10 * m.self._01 + this.self._20 * m.self._02 + this.self._30 * m.self._03,this.self._00 * m.self._10 + this.self._10 * m.self._11 + this.self._20 * m.self._12 + this.self._30 * m.self._13,this.self._00 * m.self._20 + this.self._10 * m.self._21 + this.self._20 * m.self._22 + this.self._30 * m.self._23,this.self._00 * m.self._30 + this.self._10 * m.self._31 + this.self._20 * m.self._32 + this.self._30 * m.self._33,this.self._01 * m.self._00 + this.self._11 * m.self._01 + this.self._21 * m.self._02 + this.self._31 * m.self._03,this.self._01 * m.self._10 + this.self._11 * m.self._11 + this.self._21 * m.self._12 + this.self._31 * m.self._13,this.self._01 * m.self._20 + this.self._11 * m.self._21 + this.self._21 * m.self._22 + this.self._31 * m.self._23,this.self._01 * m.self._30 + this.self._11 * m.self._31 + this.self._21 * m.self._32 + this.self._31 * m.self._33,this.self._02 * m.self._00 + this.self._12 * m.self._01 + this.self._22 * m.self._02 + this.self._32 * m.self._03,this.self._02 * m.self._10 + this.self._12 * m.self._11 + this.self._22 * m.self._12 + this.self._32 * m.self._13,this.self._02 * m.self._20 + this.self._12 * m.self._21 + this.self._22 * m.self._22 + this.self._32 * m.self._23,this.self._02 * m.self._30 + this.self._12 * m.self._31 + this.self._22 * m.self._32 + this.self._32 * m.self._33,this.self._03 * m.self._00 + this.self._13 * m.self._01 + this.self._23 * m.self._02 + this.self._33 * m.self._03,this.self._03 * m.self._10 + this.self._13 * m.self._11 + this.self._23 * m.self._12 + this.self._33 * m.self._13,this.self._03 * m.self._20 + this.self._13 * m.self._21 + this.self._23 * m.self._22 + this.self._33 * m.self._23,this.self._03 * m.self._30 + this.self._13 * m.self._31 + this.self._23 * m.self._32 + this.self._33 * m.self._33);
	}
	,multmat2: function(m) {
		var a11 = this.self._00;
		var a12 = this.self._01;
		var a13 = this.self._02;
		var a14 = this.self._03;
		var a21 = this.self._10;
		var a22 = this.self._11;
		var a23 = this.self._12;
		var a24 = this.self._13;
		var a31 = this.self._20;
		var a32 = this.self._21;
		var a33 = this.self._22;
		var a34 = this.self._23;
		var a41 = this.self._30;
		var a42 = this.self._31;
		var a43 = this.self._32;
		var a44 = this.self._33;
		var b11 = m.self._00;
		var b12 = m.self._01;
		var b13 = m.self._02;
		var b14 = m.self._03;
		var b21 = m.self._10;
		var b22 = m.self._11;
		var b23 = m.self._12;
		var b24 = m.self._13;
		var b31 = m.self._20;
		var b32 = m.self._21;
		var b33 = m.self._22;
		var b34 = m.self._23;
		var b41 = m.self._30;
		var b42 = m.self._31;
		var b43 = m.self._32;
		var b44 = m.self._33;
		this.self._00 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this.self._01 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this.self._02 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this.self._03 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this.self._10 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this.self._11 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this.self._12 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this.self._13 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this.self._20 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this.self._21 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this.self._22 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this.self._23 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this.self._30 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this.self._31 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this.self._32 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this.self._33 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
		return this;
	}
	,multmats: function(a,b) {
		var a11 = a.self._00;
		var a12 = a.self._10;
		var a13 = a.self._20;
		var a14 = a.self._30;
		var a21 = a.self._01;
		var a22 = a.self._11;
		var a23 = a.self._21;
		var a24 = a.self._31;
		var a31 = a.self._02;
		var a32 = a.self._12;
		var a33 = a.self._22;
		var a34 = a.self._32;
		var a41 = a.self._03;
		var a42 = a.self._13;
		var a43 = a.self._23;
		var a44 = a.self._33;
		var b11 = b.self._00;
		var b12 = b.self._10;
		var b13 = b.self._20;
		var b14 = b.self._30;
		var b21 = b.self._01;
		var b22 = b.self._11;
		var b23 = b.self._21;
		var b24 = b.self._31;
		var b31 = b.self._02;
		var b32 = b.self._12;
		var b33 = b.self._22;
		var b34 = b.self._32;
		var b41 = b.self._03;
		var b42 = b.self._13;
		var b43 = b.self._23;
		var b44 = b.self._33;
		this.self._00 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this.self._10 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this.self._20 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this.self._30 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this.self._01 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this.self._11 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this.self._21 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this.self._31 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this.self._02 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this.self._12 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this.self._22 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this.self._32 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this.self._03 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this.self._13 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this.self._23 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this.self._33 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
		return this;
	}
	,getInverse: function(m) {
		var n11 = m.self._00;
		var n12 = m.self._10;
		var n13 = m.self._20;
		var n14 = m.self._30;
		var n21 = m.self._01;
		var n22 = m.self._11;
		var n23 = m.self._21;
		var n24 = m.self._31;
		var n31 = m.self._02;
		var n32 = m.self._12;
		var n33 = m.self._22;
		var n34 = m.self._32;
		var n41 = m.self._03;
		var n42 = m.self._13;
		var n43 = m.self._23;
		var n44 = m.self._33;
		this.self._00 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
		this.self._10 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
		this.self._20 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
		this.self._30 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
		this.self._01 = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
		this.self._11 = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
		this.self._21 = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
		this.self._31 = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
		this.self._02 = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
		this.self._12 = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
		this.self._22 = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
		this.self._32 = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
		this.self._03 = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
		this.self._13 = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
		this.self._23 = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
		this.self._33 = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;
		var det = n11 * this.self._00 + n21 * this.self._10 + n31 * this.self._20 + n41 * this.self._30;
		if(det == 0.0) {
			return this.setIdentity();
		}
		this.mult(1.0 / det);
		return this;
	}
	,transpose: function() {
		var tmp = this.self._01;
		this.self._01 = this.self._10;
		this.self._10 = tmp;
		tmp = this.self._02;
		this.self._02 = this.self._20;
		this.self._20 = tmp;
		tmp = this.self._03;
		this.self._03 = this.self._30;
		this.self._30 = tmp;
		tmp = this.self._12;
		this.self._12 = this.self._21;
		this.self._21 = tmp;
		tmp = this.self._13;
		this.self._13 = this.self._31;
		this.self._31 = tmp;
		tmp = this.self._23;
		this.self._23 = this.self._32;
		this.self._32 = tmp;
	}
	,transpose3x3: function() {
		var tmp = this.self._01;
		this.self._01 = this.self._10;
		this.self._10 = tmp;
		tmp = this.self._02;
		this.self._02 = this.self._20;
		this.self._20 = tmp;
		tmp = this.self._12;
		this.self._12 = this.self._21;
		this.self._21 = tmp;
	}
	,clone: function() {
		var m = iron_math_Mat4.identity();
		m.self._00 = this.self._00;
		m.self._01 = this.self._01;
		m.self._02 = this.self._02;
		m.self._03 = this.self._03;
		m.self._10 = this.self._10;
		m.self._11 = this.self._11;
		m.self._12 = this.self._12;
		m.self._13 = this.self._13;
		m.self._20 = this.self._20;
		m.self._21 = this.self._21;
		m.self._22 = this.self._22;
		m.self._23 = this.self._23;
		m.self._30 = this.self._30;
		m.self._31 = this.self._31;
		m.self._32 = this.self._32;
		m.self._33 = this.self._33;
		return m;
	}
	,init: function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
		this.self._00 = _00;
		this.self._10 = _10;
		this.self._20 = _20;
		this.self._30 = _30;
		this.self._01 = _01;
		this.self._11 = _11;
		this.self._21 = _21;
		this.self._31 = _31;
		this.self._02 = _02;
		this.self._12 = _12;
		this.self._22 = _22;
		this.self._32 = _32;
		this.self._03 = _03;
		this.self._13 = _13;
		this.self._23 = _23;
		this.self._33 = _33;
	}
	,set: function(a,offset) {
		if(offset == null) {
			offset = 0;
		}
		this.self._00 = a[offset];
		this.self._10 = a[1 + offset];
		this.self._20 = a[2 + offset];
		this.self._30 = a[3 + offset];
		this.self._01 = a[4 + offset];
		this.self._11 = a[5 + offset];
		this.self._21 = a[6 + offset];
		this.self._31 = a[7 + offset];
		this.self._02 = a[8 + offset];
		this.self._12 = a[9 + offset];
		this.self._22 = a[10 + offset];
		this.self._32 = a[11 + offset];
		this.self._03 = a[12 + offset];
		this.self._13 = a[13 + offset];
		this.self._23 = a[14 + offset];
		this.self._33 = a[15 + offset];
	}
	,setF32: function(a,offset) {
		if(offset == null) {
			offset = 0;
		}
		this.self._00 = a[offset];
		this.self._10 = a[1 + offset];
		this.self._20 = a[2 + offset];
		this.self._30 = a[3 + offset];
		this.self._01 = a[4 + offset];
		this.self._11 = a[5 + offset];
		this.self._21 = a[6 + offset];
		this.self._31 = a[7 + offset];
		this.self._02 = a[8 + offset];
		this.self._12 = a[9 + offset];
		this.self._22 = a[10 + offset];
		this.self._32 = a[11 + offset];
		this.self._03 = a[12 + offset];
		this.self._13 = a[13 + offset];
		this.self._23 = a[14 + offset];
		this.self._33 = a[15 + offset];
	}
	,setFrom: function(m) {
		this.self._00 = m.self._00;
		this.self._01 = m.self._01;
		this.self._02 = m.self._02;
		this.self._03 = m.self._03;
		this.self._10 = m.self._10;
		this.self._11 = m.self._11;
		this.self._12 = m.self._12;
		this.self._13 = m.self._13;
		this.self._20 = m.self._20;
		this.self._21 = m.self._21;
		this.self._22 = m.self._22;
		this.self._23 = m.self._23;
		this.self._30 = m.self._30;
		this.self._31 = m.self._31;
		this.self._32 = m.self._32;
		this.self._33 = m.self._33;
	}
	,getLoc: function() {
		return new iron_math_Vec4(this.self._30,this.self._31,this.self._32,this.self._33);
	}
	,getScale: function() {
		return new iron_math_Vec4(Math.sqrt(this.self._00 * this.self._00 + this.self._10 * this.self._10 + this.self._20 * this.self._20),Math.sqrt(this.self._01 * this.self._01 + this.self._11 * this.self._11 + this.self._21 * this.self._21),Math.sqrt(this.self._02 * this.self._02 + this.self._12 * this.self._12 + this.self._22 * this.self._22));
	}
	,mult: function(s) {
		var _g = this;
		_g.self._00 *= s;
		var _g1 = this;
		_g1.self._10 *= s;
		var _g2 = this;
		_g2.self._20 *= s;
		var _g3 = this;
		_g3.self._30 *= s;
		var _g4 = this;
		_g4.self._01 *= s;
		var _g5 = this;
		_g5.self._11 *= s;
		var _g6 = this;
		_g6.self._21 *= s;
		var _g7 = this;
		_g7.self._31 *= s;
		var _g8 = this;
		_g8.self._02 *= s;
		var _g9 = this;
		_g9.self._12 *= s;
		var _g10 = this;
		_g10.self._22 *= s;
		var _g11 = this;
		_g11.self._32 *= s;
		var _g12 = this;
		_g12.self._03 *= s;
		var _g13 = this;
		_g13.self._13 *= s;
		var _g14 = this;
		_g14.self._23 *= s;
		var _g15 = this;
		_g15.self._33 *= s;
		return this;
	}
	,toRotation: function() {
		var v1 = new iron_math_Vec4();
		var _this = v1.set(this.self._00,this.self._01,this.self._02);
		var scaleX = 1.0 / Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
		var _this1 = v1.set(this.self._10,this.self._11,this.self._12);
		var scaleY = 1.0 / Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
		var _this2 = v1.set(this.self._20,this.self._21,this.self._22);
		var scaleZ = 1.0 / Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z);
		this.self._00 *= scaleX;
		this.self._01 *= scaleX;
		this.self._02 *= scaleX;
		this.self._03 = 0.0;
		this.self._10 *= scaleY;
		this.self._11 *= scaleY;
		this.self._12 *= scaleY;
		this.self._13 = 0.0;
		this.self._20 *= scaleZ;
		this.self._21 *= scaleZ;
		this.self._22 *= scaleZ;
		this.self._23 = 0.0;
		this.self._30 = 0.0;
		this.self._31 = 0.0;
		this.self._32 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,getQuat: function() {
		var m = this.clone();
		m.toRotation();
		var q = new iron_math_Quat();
		var m11 = this.self._00;
		var m12 = this.self._10;
		var m13 = this.self._20;
		var m21 = this.self._01;
		var m22 = this.self._11;
		var m23 = this.self._21;
		var m31 = this.self._02;
		var m32 = this.self._12;
		var m33 = this.self._22;
		var ftrace = m11 + m22 + m33;
		var s = 0.0;
		if(ftrace > 0.0) {
			s = 0.5 / Math.sqrt(ftrace + 1.0);
			q.w = 0.25 / s;
			q.x = (m32 - m23) * s;
			q.y = (m13 - m31) * s;
			q.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			q.w = (m32 - m23) / s;
			q.x = 0.25 * s;
			q.y = (m12 + m21) / s;
			q.z = (m13 + m31) / s;
		} else if(m22 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			q.w = (m13 - m31) / s;
			q.x = (m12 + m21) / s;
			q.y = 0.25 * s;
			q.z = (m23 + m32) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			q.w = (m21 - m12) / s;
			q.x = (m13 + m31) / s;
			q.y = (m23 + m32) / s;
			q.z = 0.25 * s;
		}
		return q;
	}
	,setLookAt: function(eye,center,up) {
		var f0 = center.x - eye.x;
		var f1 = center.y - eye.y;
		var f2 = center.z - eye.z;
		var n = 1.0 / Math.sqrt(f0 * f0 + f1 * f1 + f2 * f2);
		f0 *= n;
		f1 *= n;
		f2 *= n;
		var s0 = f1 * up.z - f2 * up.y;
		var s1 = f2 * up.x - f0 * up.z;
		var s2 = f0 * up.y - f1 * up.x;
		n = 1.0 / Math.sqrt(s0 * s0 + s1 * s1 + s2 * s2);
		s0 *= n;
		s1 *= n;
		s2 *= n;
		var u0 = s1 * f2 - s2 * f1;
		var u1 = s2 * f0 - s0 * f2;
		var u2 = s0 * f1 - s1 * f0;
		var d0 = -eye.x * s0 - eye.y * s1 - eye.z * s2;
		var d1 = -eye.x * u0 - eye.y * u1 - eye.z * u2;
		var d2 = eye.x * f0 + eye.y * f1 + eye.z * f2;
		this.self._00 = s0;
		this.self._10 = s1;
		this.self._20 = s2;
		this.self._30 = d0;
		this.self._01 = u0;
		this.self._11 = u1;
		this.self._21 = u2;
		this.self._31 = d1;
		this.self._02 = -f0;
		this.self._12 = -f1;
		this.self._22 = -f2;
		this.self._32 = d2;
		this.self._03 = 0.0;
		this.self._13 = 0.0;
		this.self._23 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,multvec: function(value) {
		var _this = this.self;
		var product = new kha_math_FastVector4();
		product.x = _this._00 * value.x + _this._10 * value.y + _this._20 * value.z + _this._30 * value.w;
		product.y = _this._01 * value.x + _this._11 * value.y + _this._21 * value.z + _this._31 * value.w;
		product.z = _this._02 * value.x + _this._12 * value.y + _this._22 * value.z + _this._32 * value.w;
		product.w = _this._03 * value.x + _this._13 * value.y + _this._23 * value.z + _this._33 * value.w;
		return product;
	}
	,right: function() {
		return new iron_math_Vec4(this.self._00,this.self._01,this.self._02);
	}
	,up: function() {
		return new iron_math_Vec4(this.self._20,this.self._21,this.self._22);
	}
	,look: function() {
		return new iron_math_Vec4(this.self._10,this.self._11,this.self._12);
	}
	,get__00: function() {
		return this.self._00;
	}
	,set__00: function(f) {
		return this.self._00 = f;
	}
	,get__01: function() {
		return this.self._01;
	}
	,set__01: function(f) {
		return this.self._01 = f;
	}
	,get__02: function() {
		return this.self._02;
	}
	,set__02: function(f) {
		return this.self._02 = f;
	}
	,get__03: function() {
		return this.self._03;
	}
	,set__03: function(f) {
		return this.self._03 = f;
	}
	,get__10: function() {
		return this.self._10;
	}
	,set__10: function(f) {
		return this.self._10 = f;
	}
	,get__11: function() {
		return this.self._11;
	}
	,set__11: function(f) {
		return this.self._11 = f;
	}
	,get__12: function() {
		return this.self._12;
	}
	,set__12: function(f) {
		return this.self._12 = f;
	}
	,get__13: function() {
		return this.self._13;
	}
	,set__13: function(f) {
		return this.self._13 = f;
	}
	,get__20: function() {
		return this.self._20;
	}
	,set__20: function(f) {
		return this.self._20 = f;
	}
	,get__21: function() {
		return this.self._21;
	}
	,set__21: function(f) {
		return this.self._21 = f;
	}
	,get__22: function() {
		return this.self._22;
	}
	,set__22: function(f) {
		return this.self._22 = f;
	}
	,get__23: function() {
		return this.self._23;
	}
	,set__23: function(f) {
		return this.self._23 = f;
	}
	,get__30: function() {
		return this.self._30;
	}
	,set__30: function(f) {
		return this.self._30 = f;
	}
	,get__31: function() {
		return this.self._31;
	}
	,set__31: function(f) {
		return this.self._31 = f;
	}
	,get__32: function() {
		return this.self._32;
	}
	,set__32: function(f) {
		return this.self._32 = f;
	}
	,get__33: function() {
		return this.self._33;
	}
	,set__33: function(f) {
		return this.self._33 = f;
	}
	,toString: function() {
		return "[[" + this.self._00 + ", " + this.self._10 + ", " + this.self._20 + ", " + this.self._30 + "], [" + this.self._01 + ", " + this.self._11 + ", " + this.self._21 + ", " + this.self._31 + "], [" + this.self._02 + ", " + this.self._12 + ", " + this.self._22 + ", " + this.self._32 + "], [" + this.self._03 + ", " + this.self._13 + ", " + this.self._23 + ", " + this.self._33 + "]]";
	}
	,__class__: iron_math_Mat4
	,__properties__: {set__33:"set__33",get__33:"get__33",set__32:"set__32",get__32:"get__32",set__31:"set__31",get__31:"get__31",set__30:"set__30",get__30:"get__30",set__23:"set__23",get__23:"get__23",set__22:"set__22",get__22:"get__22",set__21:"set__21",get__21:"get__21",set__20:"set__20",get__20:"get__20",set__13:"set__13",get__13:"get__13",set__12:"set__12",get__12:"get__12",set__11:"set__11",get__11:"get__11",set__10:"set__10",get__10:"get__10",set__03:"set__03",get__03:"get__03",set__02:"set__02",get__02:"get__02",set__01:"set__01",get__01:"get__01",set__00:"set__00",get__00:"get__00"}
};
var iron_math_Quat = $hxClasses["iron.math.Quat"] = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
iron_math_Quat.__name__ = true;
iron_math_Quat.lerp = function(q1,q2,ratio) {
	var c = new iron_math_Quat();
	var ca = new iron_math_Quat();
	ca.setFrom(q1);
	var dot = q1.dot(q2);
	if(dot < 0.0) {
		ca.w = -ca.w;
		ca.x = -ca.x;
		ca.y = -ca.y;
		ca.z = -ca.z;
	}
	c.x = ca.x + (q2.x - ca.x) * ratio;
	c.y = ca.y + (q2.y - ca.y) * ratio;
	c.z = ca.z + (q2.z - ca.z) * ratio;
	c.w = ca.w + (q2.w - ca.w) * ratio;
	c.normalize();
	return c;
};
iron_math_Quat.prototype = {
	set: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,fromAxisAngle: function(axis,angle) {
		var s = Math.sin(angle * 0.5);
		this.x = axis.x * s;
		this.y = axis.y * s;
		this.z = axis.z * s;
		this.w = Math.cos(angle * 0.5);
	}
	,toAxisAngle: function(axis) {
		this.normalize();
		var angle = 2 * Math.acos(this.w);
		var s = Math.sqrt(1 - this.w * this.w);
		if(s < 0.001) {
			axis.x = this.x;
			axis.y = this.y;
			axis.z = this.z;
		} else {
			axis.x = this.x / s;
			axis.y = this.y / s;
			axis.z = this.z / s;
		}
		return angle;
	}
	,fromRotationMat: function(m) {
		var m11 = m.self._00;
		var m12 = m.self._10;
		var m13 = m.self._20;
		var m21 = m.self._01;
		var m22 = m.self._11;
		var m23 = m.self._21;
		var m31 = m.self._02;
		var m32 = m.self._12;
		var m33 = m.self._22;
		var tr = m11 + m22 + m33;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			this.w = 0.25 / s;
			this.x = (m32 - m23) * s;
			this.y = (m13 - m31) * s;
			this.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			this.w = (m32 - m23) / s;
			this.x = 0.25 * s;
			this.y = (m12 + m21) / s;
			this.z = (m13 + m31) / s;
		} else if(m22 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			this.w = (m13 - m31) / s;
			this.x = (m12 + m21) / s;
			this.y = 0.25 * s;
			this.z = (m23 + m32) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			this.w = (m21 - m12) / s;
			this.x = (m13 + m31) / s;
			this.y = (m23 + m32) / s;
			this.z = 0.25 * s;
		}
		return this;
	}
	,mult: function(q) {
		this.multquats(this,q);
	}
	,multquats: function(q1,q2) {
		var x2 = q1.x * q2.w + q1.w * q2.x + q1.y * q2.z - q1.z * q2.y;
		var y2 = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x;
		var z2 = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w;
		var w2 = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		this.w = w2;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(l == 0.0) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 0;
		} else {
			l = 1.0 / l;
			this.x *= l;
			this.y *= l;
			this.z *= l;
			this.w *= l;
		}
	}
	,setFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,getEuler: function() {
		var roll = NaN;
		var yaw = 0.0;
		var pitch = 0.0;
		var test = this.x * this.y + this.z * this.w;
		if(test > 0.499) {
			roll = 2 * Math.atan2(this.x,this.w);
			yaw = Math.PI / 2;
			pitch = 0;
		}
		if(test < -0.499) {
			roll = -2 * Math.atan2(this.x,this.w);
			yaw = -Math.PI / 2;
			pitch = 0;
		}
		if(isNaN(roll)) {
			var sqx = this.x * this.x;
			var sqy = this.y * this.y;
			var sqz = this.z * this.z;
			roll = Math.atan2(2 * this.y * this.w - 2 * this.x * this.z,1.0 - 2 * sqy - 2 * sqz);
			yaw = Math.asin(2 * test);
			pitch = Math.atan2(2 * this.x * this.w - 2 * this.y * this.z,1.0 - 2 * sqx - 2 * sqz);
		}
		return new iron_math_Vec4(pitch,roll,yaw);
	}
	,fromEuler: function(x,y,z) {
		var c1 = Math.cos(x / 2);
		var c2 = Math.cos(y / 2);
		var c3 = Math.cos(z / 2);
		var s1 = Math.sin(x / 2);
		var s2 = Math.sin(y / 2);
		var s3 = Math.sin(z / 2);
		this.x = s1 * c2 * c3 + c1 * s2 * s3;
		this.y = c1 * s2 * c3 + s1 * c2 * s3;
		this.z = c1 * c2 * s3 - s1 * s2 * c3;
		this.w = c1 * c2 * c3 - s1 * s2 * s3;
		return this;
	}
	,toMat: function(m) {
		var x2 = this.x + this.x;
		var y2 = this.y + this.y;
		var z2 = this.z + this.z;
		var xx = this.x * x2;
		var xy = this.x * y2;
		var xz = this.x * z2;
		var yy = this.y * y2;
		var yz = this.y * z2;
		var zz = this.z * z2;
		var wx = this.w * x2;
		var wy = this.w * y2;
		var wz = this.w * z2;
		m.self._00 = 1 - (yy + zz);
		m.self._10 = xy - wz;
		m.self._20 = xz + wy;
		m.self._01 = xy + wz;
		m.self._11 = 1 - (xx + zz);
		m.self._21 = yz - wx;
		m.self._02 = xz - wy;
		m.self._12 = yz + wx;
		m.self._22 = 1 - (xx + yy);
		m.self._03 = 0;
		m.self._13 = 0;
		m.self._23 = 0;
		m.self._30 = 0;
		m.self._31 = 0;
		m.self._32 = 0;
		m.self._33 = 1;
		return m;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,toString: function() {
		return this.x + ", " + this.y + ", " + this.z + ", " + this.w;
	}
	,__class__: iron_math_Quat
};
var iron_object_Animation = $hxClasses["iron.object.Animation"] = function(setup) {
	this.player = null;
	this.player = new iron_object_Player(setup);
	iron_Scene.active.animations.push(this);
};
iron_object_Animation.__name__ = true;
iron_object_Animation.prototype = {
	remove: function() {
		HxOverrides.remove(iron_Scene.active.animations,this);
	}
	,update: function(delta) {
		if(this.player.paused) {
			return;
		}
		this.player.animTime += delta * this.player.speed * this.player.dir;
	}
	,checkTimeIndex: function(player,timeValues) {
		if(player.dir > 0) {
			if(player.timeIndex + 1 < timeValues.length) {
				return player.animTime > timeValues[player.timeIndex + 1];
			} else {
				return false;
			}
		} else if(player.timeIndex - 1 > 0) {
			return player.animTime < timeValues[player.timeIndex - 1];
		} else {
			return false;
		}
	}
	,checkTrackEnd: function(player,track) {
		if(player.dir > 0) {
			if(player.timeIndex < track.times.length - 1) {
				return player.timeIndex >= player.current.end;
			} else {
				return true;
			}
		} else if(player.timeIndex > 1) {
			return player.timeIndex <= player.current.start;
		} else {
			return true;
		}
	}
	,updateAnimSampled: function(anim,targetMatrix,setFrame) {
		if(anim == null || this.player.current == null) {
			return;
		}
		var track = anim.tracks[0];
		if(this.player.dirty) {
			this.player.dirty = false;
			if(this.player.current.frames == 0) {
				this.player.paused = true;
				setFrame(this.player.current.start);
				return;
			} else {
				if(this.player.current.reflect) {
					this.player.dir *= -1;
				}
				this.player.timeIndex = this.player.dir > 0 ? this.player.current.start : this.player.current.end;
				this.player.animTime = track.times[this.player.timeIndex];
			}
		}
		while(true) {
			var player = this.player;
			var timeValues = track.times;
			if(!(player.dir > 0 ? player.timeIndex + 1 < timeValues.length && player.animTime > timeValues[player.timeIndex + 1] : player.timeIndex - 1 > 0 && player.animTime < timeValues[player.timeIndex - 1])) {
				break;
			}
			this.player.timeIndex += this.player.dir;
		}
		if(this.player.timeIndex >= track.times.length) {
			this.player.timeIndex = track.times.length - 1;
		}
		var player1 = this.player;
		if(player1.dir > 0 ? player1.timeIndex >= track.times.length - 1 || player1.timeIndex >= player1.current.end : player1.timeIndex <= 1 || player1.timeIndex <= player1.current.start) {
			if(this.player.current.loop) {
				this.player.dirty = true;
			} else {
				this.player.paused = true;
			}
			if(this.player.onTrackComplete != null) {
				this.player.onTrackComplete();
			}
			return;
		}
		var t = this.player.animTime;
		var ti = this.player.timeIndex;
		var t1 = track.times[ti];
		var t2 = track.times[ti + this.player.dir];
		var s = (t - t1) / (t2 - t1);
		iron_object_Animation.m1.setF32(track.values,ti * 16);
		iron_object_Animation.m2.setF32(track.values,(ti + this.player.dir) * 16);
		iron_object_Animation.m1.decompose(iron_object_Animation.vpos,iron_object_Animation.q1,iron_object_Animation.vscl);
		iron_object_Animation.m2.decompose(iron_object_Animation.vpos2,iron_object_Animation.q2,iron_object_Animation.vscl2);
		var fp = iron_math_Vec4.lerp(iron_object_Animation.vpos,iron_object_Animation.vpos2,1.0 - s);
		var fq = iron_math_Quat.lerp(iron_object_Animation.q1,iron_object_Animation.q2,s);
		var fs = iron_math_Vec4.lerp(iron_object_Animation.vscl,iron_object_Animation.vscl2,s);
		var m = targetMatrix;
		fq.toMat(m);
		m.scale(fs);
		m.self._30 = fp.x;
		m.self._31 = fp.y;
		m.self._32 = fp.z;
	}
	,__class__: iron_object_Animation
};
var iron_object_Player = $hxClasses["iron.object.Player"] = function(setup) {
	this.paused = false;
	this.onTrackComplete = null;
	this.tracks = new haxe_ds_StringMap();
	this.current = null;
	this.dirty = false;
	this.timeIndex = 0;
	this.animTime = 0;
	this.frameTime = setup.frame_time;
	var _g1 = 0;
	var _g = setup.names.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.addTrack(setup.names[i],setup.starts[i],setup.ends[i],setup.speeds[i],setup.loops[i],setup.reflects[i]);
	}
	this.play(setup.start_track);
};
iron_object_Player.__name__ = true;
iron_object_Player.prototype = {
	play: function(name,onTrackComplete) {
		var _this = this.tracks;
		this.current = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(this.current == null) {
			return;
		}
		this.onTrackComplete = onTrackComplete;
		this.dirty = true;
		this.paused = false;
		this.dir = this.current.speed >= 0 ? 1 : -1;
		if(this.current.reflect) {
			this.dir *= -1;
		}
		this.speed = Math.abs(this.current.speed);
	}
	,pause: function() {
		this.paused = true;
	}
	,addTrack: function(name,start,end,speed,loop,reflect) {
		var t = new iron_object_Track(name,start,end,speed,loop,reflect);
		var _this = this.tracks;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,t);
		} else {
			_this.h[name] = t;
		}
	}
	,__class__: iron_object_Player
};
var iron_object_Track = $hxClasses["iron.object.Track"] = function(name,start,end,speed,loop,reflect) {
	this.name = name;
	this.start = start;
	this.end = end;
	this.frames = end - start;
	this.speed = speed;
	this.loop = loop;
	this.reflect = reflect;
};
iron_object_Track.__name__ = true;
iron_object_Track.prototype = {
	__class__: iron_object_Track
};
var iron_object_BoneAnimation = $hxClasses["iron.object.BoneAnimation"] = function(mo,setup) {
	this.nor = new iron_math_Vec4();
	this.pos = new iron_math_Vec4();
	this.bm = iron_math_Mat4.identity();
	this.m = iron_math_Mat4.identity();
	this.boneTimeIndices = new haxe_ds_ObjectMap();
	this.boneMats = new haxe_ds_ObjectMap();
	iron_object_Animation.call(this,setup);
	this.object = mo;
	this.data = mo.data;
	this.isSkinned = this.data.isSkinned;
	this.isSampled = false;
	if(this.isSkinned) {
		var length = setup.max_bones * 8;
		var this1 = new Array(length);
		this.skinBuffer = this1;
		var _g1 = 0;
		var _g = this.skinBuffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.skinBuffer[i] = 0;
		}
		var _g2 = 0;
		var _g11 = this.data.geom.skeletonBones;
		while(_g2 < _g11.length) {
			var b = _g11[_g2];
			++_g2;
			this.boneMats.set(b,iron_math_Mat4.fromFloat32Array(b.transform.values));
			this.boneTimeIndices.set(b,0);
		}
	}
};
iron_object_BoneAnimation.__name__ = true;
iron_object_BoneAnimation.__super__ = iron_object_Animation;
iron_object_BoneAnimation.prototype = $extend(iron_object_Animation.prototype,{
	update: function(delta) {
		if(!this.object.visible || this.object.culled) {
			return;
		}
		iron_object_Animation.prototype.update.call(this,delta);
		if(this.player.paused) {
			return;
		}
		if(this.isSkinned) {
			this.updateBoneAnim();
			this.updateSkin();
		}
	}
	,updateBoneAnim: function() {
		var _g = 0;
		var _g1 = this.data.geom.skeletonBones;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.updateAnimSampled(b.animation,this.boneMats.h[b.__id__],$bind(this,this.setBoneAnimFrame));
		}
	}
	,setBoneAnimFrame: function(frame) {
		var _g = 0;
		var _g1 = this.data.geom.skeletonBones;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var boneAnim = b.animation;
			if(boneAnim != null) {
				var track = boneAnim.tracks[0];
				var m1 = iron_math_Mat4.fromFloat32Array(track.values,frame * 16);
				this.boneMats.set(b,m1);
			}
		}
		this.updateSkin();
	}
	,updateSkin: function() {
		this.updateSkinGpu();
	}
	,updateSkinGpu: function() {
		var bones = this.data.geom.skeletonBones;
		var _g1 = 0;
		var _g = bones.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.bm.setFrom(this.data.geom.skinTransform);
			this.bm.multmat2(this.data.geom.skeletonTransformsI[i]);
			this.m.setFrom(this.boneMats.h[bones[i].__id__]);
			var p = bones[i].parent;
			while(p != null) {
				var pm = this.boneMats.h[p.__id__];
				if(pm == null) {
					pm = iron_math_Mat4.fromFloat32Array(p.transform.values);
				}
				this.m.multmat2(pm);
				p = p.parent;
			}
			this.bm.multmat2(this.m);
			this.bm.decompose(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
			iron_object_BoneAnimation.q1.normalize();
			iron_object_BoneAnimation.q2.set(iron_object_BoneAnimation.vpos.x,iron_object_BoneAnimation.vpos.y,iron_object_BoneAnimation.vpos.z,0.0);
			iron_object_BoneAnimation.q2.multquats(iron_object_BoneAnimation.q2,iron_object_BoneAnimation.q1);
			iron_object_BoneAnimation.q2.x *= 0.5;
			iron_object_BoneAnimation.q2.y *= 0.5;
			iron_object_BoneAnimation.q2.z *= 0.5;
			iron_object_BoneAnimation.q2.w *= 0.5;
			this.skinBuffer[i * 8] = iron_object_BoneAnimation.q1.x;
			this.skinBuffer[i * 8 + 1] = iron_object_BoneAnimation.q1.y;
			this.skinBuffer[i * 8 + 2] = iron_object_BoneAnimation.q1.z;
			this.skinBuffer[i * 8 + 3] = iron_object_BoneAnimation.q1.w;
			this.skinBuffer[i * 8 + 4] = iron_object_BoneAnimation.q2.x;
			this.skinBuffer[i * 8 + 5] = iron_object_BoneAnimation.q2.y;
			this.skinBuffer[i * 8 + 6] = iron_object_BoneAnimation.q2.z;
			this.skinBuffer[i * 8 + 7] = iron_object_BoneAnimation.q2.w;
		}
	}
	,updateSkinCpu: function() {
		var v = this.data.geom.vertexBuffer.lock();
		var l = this.data.geom.structLength;
		var index = 0;
		var _g1 = 0;
		var _g = v.length / l | 0;
		while(_g1 < _g) {
			var i = _g1++;
			var boneCount = this.data.geom.skinBoneCounts[i];
			var boneIndices = [];
			var boneWeights = [];
			var _g3 = index;
			var _g2 = index + boneCount;
			while(_g3 < _g2) {
				var j = _g3++;
				boneIndices.push(this.data.geom.skinBoneIndices[j]);
				boneWeights.push(this.data.geom.skinBoneWeights[j]);
			}
			index += boneCount;
			this.pos.set(0,0,0);
			this.nor.set(0,0,0);
			var _g31 = 0;
			var _g21 = boneCount;
			while(_g31 < _g21) {
				var j1 = _g31++;
				var boneIndex = boneIndices[j1];
				var boneWeight = boneWeights[j1];
				var bone = this.data.geom.skeletonBones[boneIndex];
				this.m.initTranslate(this.data.geom.positions[i * 3],this.data.geom.positions[i * 3 + 1],this.data.geom.positions[i * 3 + 2]);
				this.m.multmat2(this.data.geom.skinTransform);
				this.m.multmat2(this.data.geom.skeletonTransformsI[boneIndex]);
				this.bm.setFrom(this.boneMats.h[bone.__id__]);
				var p = bone.parent;
				while(p != null) {
					var pm = this.boneMats.h[p.__id__];
					if(pm == null) {
						pm = iron_math_Mat4.fromFloat32Array(p.transform.values);
					}
					this.bm.multmat2(pm);
					p = p.parent;
				}
				this.m.multmat2(this.bm);
				this.m.mult(boneWeight);
				var _this = this.m;
				this.pos.add(new iron_math_Vec4(_this.self._30,_this.self._31,_this.self._32,_this.self._33));
				this.m.getInverse(this.bm);
				this.m.multmat2(this.data.geom.skeletonTransforms[boneIndex]);
				this.m.multmat2(this.data.geom.skinTransformI);
				this.m.translate(this.data.geom.normals[i * 3],this.data.geom.normals[i * 3 + 1],this.data.geom.normals[i * 3 + 2]);
				this.m.mult(boneWeight);
				var _this1 = this.m;
				this.nor.add(new iron_math_Vec4(_this1.self._30,_this1.self._31,_this1.self._32,_this1.self._33));
			}
			v[i * l] = this.pos.x;
			v[i * l + 1] = this.pos.y;
			v[i * l + 2] = this.pos.z;
			v[i * l + 3] = this.nor.x;
			v[i * l + 4] = this.nor.y;
			v[i * l + 5] = this.nor.z;
		}
		this.data.geom.vertexBuffer.unlock();
	}
	,__class__: iron_object_BoneAnimation
});
var iron_object_Object = $hxClasses["iron.object.Object"] = function() {
	this.properties = null;
	this.culledShadow = false;
	this.culledMesh = false;
	this.culled = false;
	this.visibleShadow = true;
	this.visibleMesh = true;
	this.visible = true;
	this.animation = null;
	this.lods = null;
	this.children = [];
	this.parent = null;
	this.traits = [];
	this.constraints = null;
	this.name = "";
	this.raw = null;
	this.uid = iron_object_Object.uidCounter++;
	this.urandom = iron_object_Object.seededRandom();
	this.transform = new iron_object_Transform(this);
};
iron_object_Object.__name__ = true;
iron_object_Object.seededRandom = function() {
	iron_object_Object.seed = (iron_object_Object.seed * 9301 + 49297) % 233280;
	return iron_object_Object.seed / 233280.0;
};
iron_object_Object.prototype = {
	addChild: function(o) {
		this.children.push(o);
		o.parent = this;
	}
	,remove: function() {
		if(this.animation != null) {
			this.animation.remove();
		}
		while(this.children.length > 0) this.children[0].remove();
		while(this.traits.length > 0) this.traits[0].remove();
		if(this.parent != null) {
			HxOverrides.remove(this.parent.children,this);
		}
		this.parent = null;
	}
	,getChild: function(name) {
		if(this.name == name) {
			return this;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var r = c.getChild(name);
				if(r != null) {
					return r;
				}
			}
		}
		return null;
	}
	,getChildOfType: function(type) {
		if(js_Boot.__instanceof(this,type)) {
			return this;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var r = c.getChildOfType(type);
				if(r != null) {
					return r;
				}
			}
		}
		return null;
	}
	,addTrait: function(t) {
		this.traits.push(t);
		t.object = this;
		if(t._add != null) {
			var _g = 0;
			var _g1 = t._add;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
			t._add = null;
		}
	}
	,removeTrait: function(t) {
		if(t._init != null) {
			var _g = 0;
			var _g1 = t._init;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				iron_App.removeInit(f);
			}
			t._init = null;
		}
		if(t._update != null) {
			var _g2 = 0;
			var _g11 = t._update;
			while(_g2 < _g11.length) {
				var f1 = _g11[_g2];
				++_g2;
				iron_App.removeUpdate(f1);
			}
			t._update = null;
		}
		if(t._lateUpdate != null) {
			var _g3 = 0;
			var _g12 = t._lateUpdate;
			while(_g3 < _g12.length) {
				var f2 = _g12[_g3];
				++_g3;
				iron_App.removeLateUpdate(f2);
			}
			t._lateUpdate = null;
		}
		if(t._render != null) {
			var _g4 = 0;
			var _g13 = t._render;
			while(_g4 < _g13.length) {
				var f3 = _g13[_g4];
				++_g4;
				iron_App.removeRender(f3);
			}
			t._render = null;
		}
		if(t._render2D != null) {
			var _g5 = 0;
			var _g14 = t._render2D;
			while(_g5 < _g14.length) {
				var f4 = _g14[_g5];
				++_g5;
				iron_App.removeRender2D(f4);
			}
			t._render2D = null;
		}
		if(t._remove != null) {
			var _g6 = 0;
			var _g15 = t._remove;
			while(_g6 < _g15.length) {
				var f5 = _g15[_g6];
				++_g6;
				f5();
			}
			t._remove = null;
		}
		HxOverrides.remove(this.traits,t);
		t.object = null;
	}
	,getTrait: function(c) {
		var _g = 0;
		var _g1 = this.traits;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if((t == null ? null : js_Boot.getClass(t)) == c) {
				return t;
			}
		}
		return null;
	}
	,setupAnimation: function(setup) {
		this.animation = new iron_object_ObjectAnimation(this,setup);
	}
	,toString: function() {
		return "Object " + this.name;
	}
	,__class__: iron_object_Object
};
var iron_object_CameraObject = $hxClasses["iron.object.CameraObject"] = function(data) {
	this.frustumPlanes = null;
	this.prevV = null;
	iron_object_Object.call(this);
	this.data = data;
	this.renderPath = new iron_data_RenderPath(this);
	this.nearPlane = data.raw.near_plane;
	this.farPlane = data.raw.far_plane;
	this.buildProjection();
	this.V = iron_math_Mat4.identity();
	this.VP = iron_math_Mat4.identity();
	if(data.raw.frustum_culling) {
		this.frustumPlanes = [];
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			this.frustumPlanes.push(new iron_object_FrustumPlane());
		}
	}
	iron_Scene.active.cameras.push(this);
};
iron_object_CameraObject.__name__ = true;
iron_object_CameraObject.buildViewFrustum = function(VP,frustumPlanes) {
	var _this = frustumPlanes[0];
	var w = VP.self._33 + VP.self._30;
	_this.normal.set(VP.self._03 + VP.self._00,VP.self._13 + VP.self._10,VP.self._23 + VP.self._20);
	_this.constant = w;
	var _this1 = frustumPlanes[1];
	var w1 = VP.self._33 - VP.self._30;
	_this1.normal.set(VP.self._03 - VP.self._00,VP.self._13 - VP.self._10,VP.self._23 - VP.self._20);
	_this1.constant = w1;
	var _this2 = frustumPlanes[2];
	var w2 = VP.self._33 - VP.self._31;
	_this2.normal.set(VP.self._03 - VP.self._01,VP.self._13 - VP.self._11,VP.self._23 - VP.self._21);
	_this2.constant = w2;
	var _this3 = frustumPlanes[3];
	var w3 = VP.self._33 + VP.self._31;
	_this3.normal.set(VP.self._03 + VP.self._01,VP.self._13 + VP.self._11,VP.self._23 + VP.self._21);
	_this3.constant = w3;
	var _this4 = frustumPlanes[4];
	var w4 = VP.self._32;
	_this4.normal.set(VP.self._02,VP.self._12,VP.self._22);
	_this4.constant = w4;
	var _this5 = frustumPlanes[5];
	var w5 = VP.self._33 - VP.self._32;
	_this5.normal.set(VP.self._03 - VP.self._02,VP.self._13 - VP.self._12,VP.self._23 - VP.self._22);
	_this5.constant = w5;
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		plane.normalize();
	}
};
iron_object_CameraObject.sphereInFrustum = function(frustumPlanes,t,radiusScale,offsetX,offsetY,offsetZ) {
	if(offsetZ == null) {
		offsetZ = 0.0;
	}
	if(offsetY == null) {
		offsetY = 0.0;
	}
	if(offsetX == null) {
		offsetX = 0.0;
	}
	if(radiusScale == null) {
		radiusScale = 1.0;
	}
	var radius = t.radius * radiusScale;
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		iron_object_CameraObject.sphereCenter.set(t.world.self._30 + offsetX,t.world.self._31 + offsetY,t.world.self._32 + offsetZ);
		if(plane.distanceToSphere(iron_object_CameraObject.sphereCenter,radius) + radius * 2 < 0) {
			return false;
		}
	}
	return true;
};
iron_object_CameraObject.__super__ = iron_object_Object;
iron_object_CameraObject.prototype = $extend(iron_object_Object.prototype,{
	buildProjection: function() {
		if(this.data.raw.projection != null) {
			this.P = iron_math_Mat4.fromFloat32Array(this.data.raw.projection);
		} else if(this.data.raw.type == "perspective") {
			this.P = iron_math_Mat4.perspective(this.data.raw.fov,kha_System.windowWidth() / kha_System.windowHeight(),this.nearPlane,this.farPlane);
		} else if(this.data.raw.type == "orthographic") {
			this.P = iron_math_Mat4.orthogonal(-10,10,-6,6,-this.farPlane,this.farPlane);
		}
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.cameras,this);
		iron_object_Object.prototype.remove.call(this);
	}
	,renderFrame: function(g,root,lamps) {
		this.buildMatrix();
		if(this.prevV == null) {
			this.prevV = iron_math_Mat4.identity();
			this.prevV.setFrom(this.V);
		}
		this.renderPath.renderFrame(g,root,lamps);
		this.prevV.setFrom(this.V);
	}
	,buildMatrix: function() {
		this.transform.buildMatrix();
		var sc = this.transform.world.getScale();
		iron_object_CameraObject.temp.set(1.0 / sc.x,1.0 / sc.y,1.0 / sc.z);
		this.transform.world.scale(iron_object_CameraObject.temp);
		this.V.getInverse(this.transform.world);
		if(this.data.raw.frustum_culling) {
			this.VP.multmats(this.P,this.V);
			iron_object_CameraObject.buildViewFrustum(this.VP,this.frustumPlanes);
		}
	}
	,rotate: function(axis,f) {
		iron_object_CameraObject.q.fromAxisAngle(axis,f);
		this.transform.rot.multquats(iron_object_CameraObject.q,this.transform.rot);
		this.buildMatrix();
	}
	,move: function(axis,f) {
		if(f == null) {
			f = 1.0;
		}
		this.transform.loc.addf(axis.x * f,axis.y * f,axis.z * f);
		this.buildMatrix();
	}
	,right: function() {
		return new iron_math_Vec4(this.transform.local.self._00,this.transform.local.self._01,this.transform.local.self._02);
	}
	,up: function() {
		return new iron_math_Vec4(this.transform.local.self._10,this.transform.local.self._11,this.transform.local.self._12);
	}
	,look: function() {
		return new iron_math_Vec4(-this.transform.local.self._20,-this.transform.local.self._21,-this.transform.local.self._22);
	}
	,rightWorld: function() {
		return new iron_math_Vec4(this.transform.world.self._00,this.transform.world.self._01,this.transform.world.self._02);
	}
	,upWorld: function() {
		return new iron_math_Vec4(this.transform.world.self._10,this.transform.world.self._11,this.transform.world.self._12);
	}
	,lookWorld: function() {
		return new iron_math_Vec4(-this.transform.world.self._20,-this.transform.world.self._21,-this.transform.world.self._22);
	}
	,toString: function() {
		return "Camera Object " + this.name;
	}
	,__class__: iron_object_CameraObject
});
var iron_object_FrustumPlane = $hxClasses["iron.object.FrustumPlane"] = function() {
	this.constant = 0.0;
	this.normal = new iron_math_Vec4(1.0,0.0,0.0);
};
iron_object_FrustumPlane.__name__ = true;
iron_object_FrustumPlane.prototype = {
	normalize: function() {
		var _this = this.normal;
		var inverseNormalLength = 1.0 / Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
		this.normal.mult(inverseNormalLength);
		this.constant *= inverseNormalLength;
	}
	,distanceToSphere: function(sphereCenter,sphereRadius) {
		return this.normal.dot(sphereCenter) + this.constant - sphereRadius;
	}
	,setComponents: function(x,y,z,w) {
		this.normal.set(x,y,z);
		this.constant = w;
	}
	,__class__: iron_object_FrustumPlane
};
var iron_object_Constraint = $hxClasses["iron.object.Constraint"] = function(constr) {
	this.target = null;
	this.raw = constr;
};
iron_object_Constraint.__name__ = true;
iron_object_Constraint.prototype = {
	apply: function(transform) {
		if(this.target == null && this.raw.target != null) {
			this.target = iron_Scene.active.getChild(this.raw.target).transform;
		}
		if(this.raw.type == "COPY_LOCATION") {
			if(this.raw.use_x) {
				transform.world.self._30 = this.target.loc.x;
				if(this.raw.use_offset) {
					var _g = transform.world;
					_g.self._30 += transform.loc.x;
				}
			}
			if(this.raw.use_y) {
				transform.world.self._31 = this.target.loc.y;
				if(this.raw.use_offset) {
					var _g1 = transform.world;
					_g1.self._31 += transform.loc.y;
				}
			}
			if(this.raw.use_z) {
				transform.world.self._32 = this.target.loc.z;
				if(this.raw.use_offset) {
					var _g2 = transform.world;
					_g2.self._32 += transform.loc.z;
				}
			}
		}
	}
	,__class__: iron_object_Constraint
};
var iron_object_DecalObject = $hxClasses["iron.object.DecalObject"] = function(material) {
	iron_object_Object.call(this);
	this.material = material;
	iron_Scene.active.decals.push(this);
};
iron_object_DecalObject.__name__ = true;
iron_object_DecalObject.__super__ = iron_object_Object;
iron_object_DecalObject.prototype = $extend(iron_object_Object.prototype,{
	remove: function() {
		HxOverrides.remove(iron_Scene.active.decals,this);
		iron_object_Object.prototype.remove.call(this);
	}
	,render: function(g,context,camera,lamp,bindParams) {
		if(this.material.raw.skip_context != null && this.material.raw.skip_context == context) {
			return;
		}
		var materialContext = null;
		var _g1 = 0;
		var _g = this.material.raw.contexts.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.material.raw.contexts[i].name == context) {
				materialContext = this.material.contexts[i];
				break;
			}
		}
		var shaderContext = this.material.shader.getContext(context);
		g.setPipeline(shaderContext.pipeState);
		iron_object_Uniforms.setConstants(g,shaderContext,this,camera,lamp,bindParams);
		iron_object_Uniforms.setMaterialConstants(g,shaderContext,materialContext);
	}
	,__class__: iron_object_DecalObject
});
var iron_object_LampObject = $hxClasses["iron.object.LampObject"] = function(data) {
	this.camSlicedP = null;
	this.frustumPlanes = null;
	this.P = null;
	this.V = iron_math_Mat4.identity();
	iron_object_Object.call(this);
	this.data = data;
	var type = data.raw.type;
	var fov = data.raw.fov;
	if(type == "sun") {
		if(iron_object_LampObject.corners == null) {
			iron_object_LampObject.corners = [];
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				iron_object_LampObject.corners.push(new iron_math_Vec4());
			}
		}
	} else if(type == "point" || type == "area") {
		this.P = iron_math_Mat4.perspective(fov,1,data.raw.near_plane,data.raw.far_plane);
	} else if(type == "spot") {
		this.P = iron_math_Mat4.perspective(fov,1,data.raw.near_plane,data.raw.far_plane);
	}
	iron_Scene.active.lamps.push(this);
};
iron_object_LampObject.__name__ = true;
iron_object_LampObject.setCorners = function() {
	iron_object_LampObject.corners[0].set(-1.0,-1.0,1.0);
	iron_object_LampObject.corners[1].set(-1.0,-1.0,-1.0);
	iron_object_LampObject.corners[2].set(-1.0,1.0,1.0);
	iron_object_LampObject.corners[3].set(-1.0,1.0,-1.0);
	iron_object_LampObject.corners[4].set(1.0,-1.0,1.0);
	iron_object_LampObject.corners[5].set(1.0,-1.0,-1.0);
	iron_object_LampObject.corners[6].set(1.0,1.0,1.0);
	iron_object_LampObject.corners[7].set(1.0,1.0,-1.0);
};
iron_object_LampObject.__super__ = iron_object_Object;
iron_object_LampObject.prototype = $extend(iron_object_Object.prototype,{
	remove: function() {
		HxOverrides.remove(iron_Scene.active.lamps,this);
		iron_object_Object.prototype.remove.call(this);
	}
	,buildMatrices: function(camera) {
		this.transform.buildMatrix();
		if(this.data.raw.type == "sun") {
			if(this.camSlicedP == null) {
				var fov = camera.data.raw.fov;
				var near_plane = this.data.raw.near_plane;
				var far_plane = this.data.raw.far_plane;
				this.camSlicedP = iron_math_Mat4.perspective(fov,kha_System.windowWidth() / kha_System.windowHeight(),near_plane,far_plane);
			}
			iron_object_LampObject.m.setFrom(camera.V);
			iron_object_LampObject.m.multmat2(this.camSlicedP);
			iron_object_LampObject.m.getInverse(iron_object_LampObject.m);
			this.V.setFrom(this.transform.world);
			this.V.toRotation();
			this.V.getInverse(this.V);
			iron_object_LampObject.m.multmat2(this.V);
			iron_object_LampObject.setCorners();
			var _g = 0;
			var _g1 = iron_object_LampObject.corners;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				v.applymat4(iron_object_LampObject.m);
				v.set(v.x / v.w,v.y / v.w,v.z / v.w);
			}
			var minx = iron_object_LampObject.corners[0].x;
			var miny = iron_object_LampObject.corners[0].y;
			var minz = iron_object_LampObject.corners[0].z;
			var maxx = iron_object_LampObject.corners[0].x;
			var maxy = iron_object_LampObject.corners[0].y;
			var maxz = iron_object_LampObject.corners[0].z;
			var _g2 = 0;
			var _g11 = iron_object_LampObject.corners;
			while(_g2 < _g11.length) {
				var v1 = _g11[_g2];
				++_g2;
				if(v1.x < minx) {
					minx = v1.x;
				}
				if(v1.x > maxx) {
					maxx = v1.x;
				}
				if(v1.y < miny) {
					miny = v1.y;
				}
				if(v1.y > maxy) {
					maxy = v1.y;
				}
				if(v1.z < minz) {
					minz = v1.z;
				}
				if(v1.z > maxz) {
					maxz = v1.z;
				}
			}
			var v11 = iron_object_LampObject.corners[0];
			var v2 = iron_object_LampObject.corners[7];
			var vx = v11.x - v2.x;
			var vy = v11.y - v2.y;
			var vz = v11.z - v2.z;
			var diag0 = Math.sqrt(vx * vx + vy * vy + vz * vz);
			var offx = (diag0 - (maxx - minx)) * 0.5;
			var offy = (diag0 - (maxy - miny)) * 0.5;
			minx -= offx;
			maxx += offx;
			miny -= offy;
			maxy += offy;
			var worldPerTexelX = (maxx - minx) / this.data.raw.shadowmap_size;
			var worldPerTexelY = (maxy - miny) / this.data.raw.shadowmap_size;
			var worldPerTexelZ = (maxz - minz) / this.data.raw.shadowmap_size;
			minx = Math.floor(minx / worldPerTexelX) * worldPerTexelX;
			miny = Math.floor(miny / worldPerTexelY) * worldPerTexelY;
			minz = Math.floor(minz / worldPerTexelZ) * worldPerTexelZ;
			maxx = Math.floor(maxx / worldPerTexelX) * worldPerTexelX;
			maxy = Math.floor(maxy / worldPerTexelY) * worldPerTexelY;
			maxz = Math.floor(maxz / worldPerTexelZ) * worldPerTexelZ;
			var hx = (maxx - minx) / 2;
			var hy = (maxy - miny) / 2;
			var hz = (maxz - minz) / 2;
			this.V.self._30 = -(minx + hx);
			this.V.self._31 = -(miny + hy);
			this.V.self._32 = -(minz + hz);
			this.P = iron_math_Mat4.orthogonal(-hx,hx,-hy,hy,-hz * 4,hz);
		} else {
			this.V.getInverse(this.transform.world);
		}
		this.updateViewFrustum(camera);
	}
	,updateViewFrustum: function(camera) {
		if(camera.data.raw.frustum_culling) {
			if(this.frustumPlanes == null) {
				this.frustumPlanes = [];
				var _g = 0;
				while(_g < 6) {
					var i = _g++;
					this.frustumPlanes.push(new iron_object_FrustumPlane());
				}
				if(iron_object_LampObject.VP == null) {
					iron_object_LampObject.VP = iron_math_Mat4.identity();
				}
			}
			iron_object_LampObject.VP.multmats(this.P,this.V);
			iron_object_CameraObject.buildViewFrustum(iron_object_LampObject.VP,this.frustumPlanes);
		}
	}
	,setCubeFace: function(face,camera) {
		iron_object_LampObject.p1.set(this.transform.world.self._30,this.transform.world.self._31,this.transform.world.self._32);
		iron_object_LampObject.p2.setFrom(iron_object_LampObject.p1);
		switch(face) {
		case 0:
			iron_object_LampObject.p2.addf(1.0,0.0,0.0);
			iron_object_LampObject.p3.set(0.0,-1.0,0.0);
			break;
		case 1:
			iron_object_LampObject.p2.addf(-1.0,0.0,0.0);
			iron_object_LampObject.p3.set(0.0,-1.0,0.0);
			break;
		case 2:
			iron_object_LampObject.p2.addf(0.0,1.0,0.0);
			iron_object_LampObject.p3.set(0.0,0.0,1.0);
			break;
		case 3:
			iron_object_LampObject.p2.addf(0.0,-1.0,0.0);
			iron_object_LampObject.p3.set(0.0,0.0,-1.0);
			break;
		case 4:
			iron_object_LampObject.p2.addf(0.0,0.0,1.0);
			iron_object_LampObject.p3.set(0.0,-1.0,0.0);
			break;
		case 5:
			iron_object_LampObject.p2.addf(0.0,0.0,-1.0);
			iron_object_LampObject.p3.set(0.0,-1.0,0.0);
			break;
		}
		this.V.setLookAt(iron_object_LampObject.p1,iron_object_LampObject.p2,iron_object_LampObject.p3);
		this.updateViewFrustum(camera);
	}
	,right: function() {
		return new iron_math_Vec4(this.V.self._00,this.V.self._10,this.V.self._20);
	}
	,up: function() {
		return new iron_math_Vec4(this.V.self._01,this.V.self._11,this.V.self._21);
	}
	,look: function() {
		return new iron_math_Vec4(this.V.self._02,this.V.self._12,this.V.self._22);
	}
	,toString: function() {
		return "Lamp Object " + this.name;
	}
	,__class__: iron_object_LampObject
});
var iron_object_MeshObject = $hxClasses["iron.object.MeshObject"] = function(data,materials) {
	this.frustumCulling = true;
	this.screenSize = 0.0;
	this.particleSystem = null;
	this.data = null;
	iron_object_Object.call(this);
	this.setData(data);
	this.materials = materials;
	iron_Scene.active.meshes.push(this);
};
iron_object_MeshObject.__name__ = true;
iron_object_MeshObject.__super__ = iron_object_Object;
iron_object_MeshObject.prototype = $extend(iron_object_Object.prototype,{
	setData: function(data) {
		this.data = data;
		data.refcount++;
		var makeBuffers = true;
		if(makeBuffers) {
			data.geom.build();
		}
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.meshes,this);
		this.data.refcount--;
		iron_object_Object.prototype.remove.call(this);
	}
	,setupAnimation: function(setup) {
		if(this.data.isSkinned) {
			this.animation = new iron_object_BoneAnimation(this,setup);
		} else {
			iron_object_Object.prototype.setupAnimation.call(this,setup);
		}
	}
	,setupParticleSystem: function(sceneName,pref) {
		this.particleSystem = new iron_object_ParticleSystem(this,sceneName,pref);
	}
	,isLodMaterial: function() {
		if(this.raw != null && this.raw.lod_material != null) {
			return this.raw.lod_material == true;
		} else {
			return false;
		}
	}
	,setCulled: function(shadowsContext,b) {
		if(shadowsContext) {
			this.culledShadow = b;
		} else {
			this.culledMesh = b;
		}
		this.culled = this.culledMesh && this.culledShadow;
		return b;
	}
	,cullMaterial: function(context,camera) {
		var mats = this.materials;
		var shadowsContext = context == camera.data.pathdata.raw.shadows_context;
		if(!(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true) && mats[0].getContext(context) == null) {
			return this.setCulled(shadowsContext,true);
		}
		if(!this.visibleMesh && !shadowsContext) {
			return this.setCulled(shadowsContext,true);
		}
		if(!this.visibleShadow && shadowsContext) {
			return this.setCulled(shadowsContext,true);
		}
		if(this.skipContext(context)) {
			return this.setCulled(shadowsContext,true);
		}
		return this.setCulled(shadowsContext,false);
	}
	,cullMesh: function(context,camera,lamp) {
		if(camera.data.raw.frustum_culling && this.frustumCulling) {
			var radiusScale = this.data.isSkinned ? 2.0 : 1.0;
			if(this.particleSystem != null) {
				radiusScale *= 100;
			}
			if(context == "voxel") {
				radiusScale *= 100;
			}
			var shadowsContext = context == camera.data.pathdata.raw.shadows_context;
			var frustumPlanes = shadowsContext ? lamp.frustumPlanes : camera.frustumPlanes;
			if(shadowsContext && lamp.data.raw.type != "sun") {
				lamp.transform.radius = lamp.data.raw.far_plane;
				if(!iron_object_CameraObject.sphereInFrustum(camera.frustumPlanes,lamp.transform)) {
					return this.setCulled(shadowsContext,true);
				}
			}
			if(this.data.geom.instanced) {
				var instanceInFrustum = false;
				var _g = 0;
				var _g1 = this.data.geom.offsetVecs;
				while(_g < _g1.length) {
					var v = _g1[_g];
					++_g;
					if(iron_object_CameraObject.sphereInFrustum(frustumPlanes,this.transform,radiusScale,v.x,v.y,v.z)) {
						instanceInFrustum = true;
						break;
					}
				}
				if(!instanceInFrustum) {
					return this.setCulled(shadowsContext,true);
				}
				var camX = camera.transform.world.self._30;
				var camY = camera.transform.world.self._31;
				var camZ = camera.transform.world.self._32;
				this.data.geom.sortInstanced(camX,camY,camZ);
			} else if(!iron_object_CameraObject.sphereInFrustum(frustumPlanes,this.transform,radiusScale)) {
				return this.setCulled(shadowsContext,true);
			}
		}
		this.culled = false;
		return this.culled;
	}
	,skipContext: function(context) {
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var mat = _g1[_g];
			++_g;
			if(mat.raw.skip_context != null && mat.raw.skip_context == context) {
				return true;
			}
		}
		return false;
	}
	,getContexts: function(context,materials,materialContexts,shaderContexts) {
		var _g = 0;
		while(_g < materials.length) {
			var mat = materials[_g];
			++_g;
			var _g2 = 0;
			var _g1 = mat.raw.contexts.length;
			while(_g2 < _g1) {
				var i = _g2++;
				if(HxOverrides.substr(mat.raw.contexts[i].name,0,context.length) == context) {
					materialContexts.push(mat.contexts[i]);
					shaderContexts.push(mat.shader.getContext(context));
					break;
				}
			}
		}
	}
	,render: function(g,context,camera,lamp,bindParams) {
		if(this.data == null || !this.data.geom.ready) {
			return;
		}
		if(!this.visible) {
			return;
		}
		if(this.cullMaterial(context,camera)) {
			return;
		}
		if(this.cullMesh(context,camera,lamp)) {
			return;
		}
		var mats = this.materials;
		var lod = this;
		if(this.raw != null && this.raw.lods != null && this.raw.lods.length > 0) {
			var tr = this.transform;
			var volume = tr.size.x * tr.scale.x * tr.size.y * tr.scale.y * tr.size.z * tr.scale.z;
			this.screenSize = volume * (1.0 / this.cameraDistance);
			this.screenSize = this.screenSize > 1.0 ? 1.0 : this.screenSize;
			if(this.lods == null) {
				this.lods = [];
				var _g = 0;
				var _g1 = this.raw.lods;
				while(_g < _g1.length) {
					var l = _g1[_g];
					++_g;
					if(l.object_ref == "") {
						this.lods.push(null);
					} else {
						this.lods.push(iron_Scene.active.getChild(l.object_ref));
					}
				}
			}
			var _g11 = 0;
			var _g2 = this.raw.lods.length;
			while(_g11 < _g2) {
				var i = _g11++;
				if(this.screenSize > this.raw.lods[i].screen_size) {
					break;
				}
				lod = this.lods[i];
				if(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true) {
					mats = lod.materials;
				}
			}
			if(lod == null) {
				return;
			}
		}
		if(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true && mats[0].getContext(context) == null) {
			return;
		}
		var materialContexts = [];
		var shaderContexts = [];
		this.getContexts(context,mats,materialContexts,shaderContexts);
		if(lod.particleSystem != null) {
			lod.particleSystem.update();
		}
		this.transform.update();
		var ldata = lod.data;
		if(ldata.geom.instanced) {
			g.setVertexBuffers([ldata.geom.vertexBuffer,ldata.geom.instancedVB]);
		} else {
			g.setVertexBuffer(ldata.geom.vertexBuffer);
		}
		var _g12 = 0;
		var _g3 = ldata.geom.indexBuffers.length;
		while(_g12 < _g3) {
			var i1 = _g12++;
			var mi = ldata.geom.materialIndices[i1];
			if(shaderContexts.length <= mi) {
				continue;
			}
			g.setIndexBuffer(ldata.geom.indexBuffers[i1]);
			g.setPipeline(shaderContexts[mi].pipeState);
			iron_object_Uniforms.setConstants(g,shaderContexts[mi],this,camera,lamp,bindParams);
			if(materialContexts.length > mi) {
				iron_object_Uniforms.setMaterialConstants(g,shaderContexts[mi],materialContexts[mi]);
			}
			if(ldata.geom.instanced) {
				g.drawIndexedVerticesInstanced(ldata.geom.instanceCount);
			} else {
				g.drawIndexedVertices();
			}
		}
	}
	,renderBatch: function(g,context,camera,lamp,bindParams,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(!this.visible) {
			return;
		}
		if(this.cullMesh(context,camera,lamp)) {
			return;
		}
		var lod = this;
		var materialContexts = [];
		var shaderContexts = [];
		this.getContexts(context,this.materials,materialContexts,shaderContexts);
		if(lod.particleSystem != null) {
			lod.particleSystem.update();
		}
		this.transform.update();
		iron_object_Uniforms.setConstants(g,shaderContexts[0],this,camera,lamp,bindParams);
		iron_object_Uniforms.setMaterialConstants(g,shaderContexts[0],materialContexts[0]);
		g.drawIndexedVertices(start,count);
	}
	,validContext: function(mat,context) {
		return mat.getContext(context) != null;
	}
	,computeCameraDistance: function(camX,camY,camZ) {
		var vx = camX - this.transform.world.self._30;
		var vy = camY - this.transform.world.self._31;
		var vz = camZ - this.transform.world.self._32;
		this.cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
	}
	,computeScreenSize: function(camera) {
		var tr = this.transform;
		var volume = tr.size.x * tr.scale.x * tr.size.y * tr.scale.y * tr.size.z * tr.scale.z;
		this.screenSize = volume * (1.0 / this.cameraDistance);
		this.screenSize = this.screenSize > 1.0 ? 1.0 : this.screenSize;
	}
	,initLods: function() {
		if(this.lods == null) {
			this.lods = [];
			var _g = 0;
			var _g1 = this.raw.lods;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(l.object_ref == "") {
					this.lods.push(null);
				} else {
					this.lods.push(iron_Scene.active.getChild(l.object_ref));
				}
			}
		}
	}
	,toString: function() {
		return "Mesh Object " + this.name;
	}
	,__class__: iron_object_MeshObject
});
var iron_object_ObjectAnimation = $hxClasses["iron.object.ObjectAnimation"] = function(object,setup) {
	iron_object_Animation.call(this,setup);
	this.isSkinned = false;
	this.object = object;
	if(object.raw.animation_transforms != null) {
		this.isSampled = false;
		iron_object_ObjectAnimation.parseAnimationTransforms(object.transform,object.raw.animation_transforms);
	} else {
		this.isSampled = true;
	}
};
iron_object_ObjectAnimation.__name__ = true;
iron_object_ObjectAnimation.parseAnimationTransforms = function(t,animation_transforms) {
	var _g = 0;
	while(_g < animation_transforms.length) {
		var at = animation_transforms[_g];
		++_g;
		var _g1 = at.type;
		switch(_g1) {
		case "rotation":
			t.setRotation(at.values[0],at.values[1],at.values[2]);
			break;
		case "rotation_x":
			t.setRotation(at.value,0,0);
			break;
		case "rotation_y":
			t.setRotation(0,at.value,0);
			break;
		case "rotation_z":
			t.setRotation(0,0,at.value);
			break;
		case "scale":
			t.scale.set(at.values[0],at.values[1],at.values[2]);
			break;
		case "scale_x":
			t.scale.x = at.value;
			break;
		case "scale_y":
			t.scale.y = at.value;
			break;
		case "scale_z":
			t.scale.z = at.value;
			break;
		case "translation":
			t.loc.set(at.values[0],at.values[1],at.values[2]);
			break;
		case "translation_x":
			t.loc.x = at.value;
			break;
		case "translation_y":
			t.loc.y = at.value;
			break;
		case "translation_z":
			t.loc.z = at.value;
			break;
		}
	}
	t.buildMatrix();
};
iron_object_ObjectAnimation.__super__ = iron_object_Animation;
iron_object_ObjectAnimation.prototype = $extend(iron_object_Animation.prototype,{
	update: function(delta) {
		if(!this.object.visible || this.object.culled) {
			return;
		}
		iron_object_Animation.prototype.update.call(this,delta);
		if(this.player.paused) {
			return;
		}
		if(!this.isSkinned) {
			this.updateObjectAnim();
		}
	}
	,updateObjectAnim: function() {
		if(this.isSampled) {
			this.updateAnimSampled(this.object.raw.animation,this.object.transform.world,$bind(this,this.setObjectAnimFrame));
			this.object.transform.world.decompose(this.object.transform.loc,this.object.transform.rot,this.object.transform.scale);
		} else {
			this.updateAnimNonSampled(this.object.raw.animation,this.object.transform);
			this.object.transform.buildMatrix();
		}
	}
	,setObjectAnimFrame: function(frame) {
		var objectAnim = this.object.raw.animation;
		if(objectAnim != null) {
			var track = objectAnim.tracks[0];
			var m1 = iron_math_Mat4.fromFloat32Array(track.values,frame * 16);
			this.object.transform.world = m1;
		}
	}
	,interpolateLinear: function(t,t1,t2) {
		return (t - t1) / (t2 - t1);
	}
	,interpolateBezier: function(t,t1,t2) {
		var k = (t - t1) / (t2 - t1);
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.pow(2,-10 * k);
		}
	}
	,interpolateTcb: function() {
	}
	,updateAnimNonSampled: function(anim,transform) {
		if(anim == null || this.player.current == null) {
			return;
		}
		var begin = anim.begin;
		var end = anim.end;
		var total = end - begin;
		if(this.player.dirty) {
			this.player.dirty = false;
			this.player.animTime = this.player.current.start * this.player.frameTime;
			this.player.timeIndex = 0;
			var track = anim.tracks[0];
			while(this.player.animTime > track.times[this.player.timeIndex] + this.player.frameTime) this.player.timeIndex++;
		}
		if(this.player.current.frames == 0) {
			return;
		}
		var _g = 0;
		var _g1 = anim.tracks;
		while(_g < _g1.length) {
			var track1 = _g1[_g];
			++_g;
			if(this.player.timeIndex >= track1.times.length) {
				continue;
			}
			if(this.player.animTime > total || this.player.animTime < 0 || this.player.animTime > this.player.current.end * this.player.frameTime - this.player.frameTime && this.player.dir > 0 || this.player.animTime < this.player.current.start * this.player.frameTime + this.player.frameTime && this.player.dir < 0) {
				if(!this.player.current.loop) {
					this.player.paused = true;
					return;
				}
				if(this.player.current.reflect) {
					this.player.dir *= -1;
				}
				this.player.animTime = this.player.dir > 0 ? 0 : total;
				this.player.timeIndex = this.player.dir > 0 ? 0 : track1.times.length - 1;
			}
			var t = this.player.animTime + begin;
			if(this.player.dir > 0) {
				while(this.player.timeIndex < track1.times.length - 2 && t > track1.times[this.player.timeIndex + 1]) this.player.timeIndex++;
			} else {
				while(this.player.timeIndex > 1 && t < track1.times[this.player.timeIndex - 1]) this.player.timeIndex--;
			}
			var ti = this.player.timeIndex;
			var t1 = track1.times[ti];
			var t2 = track1.times[ti + this.player.dir];
			var interpolate = $bind(this,this.interpolateLinear);
			var _g2 = track1.curve;
			switch(_g2) {
			case "bezier":
				interpolate = $bind(this,this.interpolateBezier);
				break;
			case "linear":
				interpolate = $bind(this,this.interpolateLinear);
				break;
			}
			var s = this.player.dir > 0 ? interpolate(t,t1,t2) : interpolate(t1 - (t - t2),t2,t1);
			var invs = 1.0 - s;
			var v1 = track1.values[ti];
			var v2 = track1.values[ti + this.player.dir];
			var v = v1 * invs + v2 * s;
			var _g3 = track1.target;
			switch(_g3) {
			case "xloc":
				transform.loc.x = v;
				break;
			case "xrot":
				transform.setRotation(v,transform._eulerY,transform._eulerZ);
				break;
			case "xscl":
				transform.scale.x = v;
				break;
			case "yloc":
				transform.loc.y = v;
				break;
			case "yrot":
				transform.setRotation(transform._eulerX,v,transform._eulerZ);
				break;
			case "yscl":
				transform.scale.y = v;
				break;
			case "zloc":
				transform.loc.z = v;
				break;
			case "zrot":
				transform.setRotation(transform._eulerX,transform._eulerY,v);
				break;
			case "zscl":
				transform.scale.z = v;
				break;
			}
		}
	}
	,__class__: iron_object_ObjectAnimation
});
var iron_object_ParticleSystem = $hxClasses["iron.object.ParticleSystem"] = function(object,sceneName,pref) {
	var _gthis = this;
	this.object = object;
	this.name = pref.name;
	this.seed = pref.seed;
	this.particles = [];
	this.ready = false;
	iron_data_Data.getParticle(sceneName,pref.particle,function(b) {
		_gthis.data = b;
		var r = _gthis.data.raw;
		var _g1 = 0;
		var _g = r.count;
		while(_g1 < _g) {
			var i = _g1++;
			var p = new iron_object_Particle();
			_gthis.particles.push(p);
			p.offset = new iron_math_Vec4(0.0,0.0,0.0);
			p.velocity = new iron_math_Vec4(0.0,0.0,0.0);
			_gthis.setVelocity(p.velocity);
			p.lifetime = Std.random(r.lifetime * 1000 | 0) / 1000;
		}
		var this1 = new Float32Array(_gthis.particles.length * 3);
		var instancedData = this1;
		var i1 = 0;
		var _g2 = 0;
		var _g11 = _gthis.particles;
		while(_g2 < _g11.length) {
			var p1 = _g11[_g2];
			++_g2;
			instancedData[i1] = p1.offset.x;
			++i1;
			instancedData[i1] = p1.offset.y;
			++i1;
			instancedData[i1] = p1.offset.z;
			++i1;
		}
		object.data.geom.setupInstanced(instancedData,kha_graphics4_Usage.DynamicUsage);
		_gthis.ready = true;
	});
};
iron_object_ParticleSystem.__name__ = true;
iron_object_ParticleSystem.prototype = {
	update: function() {
		if(!this.ready) {
			return;
		}
		var _g = 0;
		var _g1 = this.particles;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.lifetime += 0.0166666666666666664;
			if(p.lifetime > this.data.raw.lifetime) {
				p.lifetime = 0;
				this.setVelocity(p.velocity);
			}
			p.offset.x = p.lifetime * p.velocity.x;
			p.offset.y = p.lifetime * p.velocity.y;
			p.offset.z = p.lifetime * p.velocity.z;
		}
		this.sort();
		var vb = this.object.data.geom.instancedVB;
		var instancedData = vb.lock();
		var _g11 = 0;
		var _g2 = this.particles.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var p1 = this.particles[i];
			instancedData[i * 3] = p1.offset.x;
			instancedData[i * 3 + 1] = p1.offset.y;
			instancedData[i * 3 + 2] = p1.offset.z;
		}
		vb.unlock();
	}
	,setVelocity: function(v) {
		var r = this.data.raw;
		v.set(r.object_align_factor[0],r.object_align_factor[1],r.object_align_factor[2]);
		if(r.factor_random != 0) {
			v.x += Std.random(r.factor_random * 1000 | 0) / 1000 - r.factor_random / 2;
			v.y += Std.random(r.factor_random * 1000 | 0) / 1000 - r.factor_random / 2;
			v.z += Std.random(r.factor_random * 1000 | 0) / 1000 - r.factor_random / 2;
		}
	}
	,sort: function() {
		var camera = iron_Scene.active.camera;
		var _g = 0;
		var _g1 = this.particles;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var v1 = p.offset;
			var v2 = camera.transform.loc;
			var vx = v1.x - v2.x;
			var vy = v1.y - v2.y;
			var vz = v1.z - v2.z;
			p.cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
		}
		this.particles.sort(function(p1,p2) {
			if(p1.cameraDistance > p2.cameraDistance) {
				return -1;
			}
			if(p1.cameraDistance < p2.cameraDistance) {
				return 1;
			}
			return 0;
		});
	}
	,__class__: iron_object_ParticleSystem
};
var iron_object_Particle = $hxClasses["iron.object.Particle"] = function() {
};
iron_object_Particle.__name__ = true;
iron_object_Particle.prototype = {
	__class__: iron_object_Particle
};
var iron_object_SpeakerObject = $hxClasses["iron.object.SpeakerObject"] = function(data) {
	this.sound = null;
	var _gthis = this;
	iron_object_Object.call(this);
	this.data = data;
	iron_Scene.active.speakers.push(this);
	if(data.sound == "") {
		return;
	}
	iron_data_Data.getSound(data.sound,function(sound) {
		_gthis.sound = sound;
		if(_gthis.visible) {
			iron_Scene.active.notifyOnInit($bind(_gthis,_gthis.play));
		}
	});
};
iron_object_SpeakerObject.__name__ = true;
iron_object_SpeakerObject.__super__ = iron_object_Object;
iron_object_SpeakerObject.prototype = $extend(iron_object_Object.prototype,{
	play: function() {
		if(this.sound == null || this.data.muted) {
			return;
		}
		iron_system_Audio.play(this.sound,this.data.loop);
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.speakers,this);
		iron_object_Object.prototype.remove.call(this);
	}
	,__class__: iron_object_SpeakerObject
});
var iron_object_Transform = $hxClasses["iron.object.Transform"] = function(object) {
	this.appendMats = null;
	this.prependMats = null;
	this.localOnly = false;
	this.object = object;
	this.reset();
};
iron_object_Transform.__name__ = true;
iron_object_Transform.prototype = {
	reset: function() {
		this.world = iron_math_Mat4.identity();
		this.local = iron_math_Mat4.identity();
		this.loc = new iron_math_Vec4();
		this.rot = new iron_math_Quat();
		this.scale = new iron_math_Vec4(1.0,1.0,1.0);
		this.size = new iron_math_Vec4();
		this.dirty = true;
	}
	,update: function() {
		if(this.dirty) {
			this.dirty = false;
			this.buildMatrix();
		}
	}
	,prependMatrix: function(m) {
		if(this.prependMats == null) {
			this.prependMats = [];
		}
		this.prependMats.push(m);
	}
	,popPrependMatrix: function() {
		if(this.prependMats != null) {
			this.prependMats.pop();
			if(this.prependMats.length == 0) {
				this.prependMats = null;
			}
		}
	}
	,appendMatrix: function(m) {
		if(this.appendMats == null) {
			this.appendMats = [];
		}
		this.appendMats.push(m);
	}
	,popAppendMatrix: function() {
		if(this.appendMats != null) {
			this.appendMats.pop();
			if(this.appendMats.length == 0) {
				this.appendMats = null;
			}
		}
	}
	,buildMatrix: function() {
		this.local.compose(this.loc,this.rot,this.scale);
		if(this.prependMats != null) {
			iron_object_Transform.temp.setIdentity();
			var _g = 0;
			var _g1 = this.prependMats;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				iron_object_Transform.temp.multmat2(m);
			}
			iron_object_Transform.temp.multmat2(this.local);
			this.local.setFrom(iron_object_Transform.temp);
		}
		if(this.appendMats != null) {
			var _g2 = 0;
			var _g11 = this.appendMats;
			while(_g2 < _g11.length) {
				var m1 = _g11[_g2];
				++_g2;
				this.local.multmat2(m1);
			}
		}
		if(!this.localOnly && this.object.parent != null) {
			this.world.multmat3x4(this.local,this.object.parent.transform.world);
		} else {
			this.world.setFrom(this.local);
		}
		if(this.object.constraints != null) {
			var _g3 = 0;
			var _g12 = this.object.constraints;
			while(_g3 < _g12.length) {
				var c = _g12[_g3];
				++_g3;
				c.apply(this);
			}
		}
		var _g4 = 0;
		var _g13 = this.object.children;
		while(_g4 < _g13.length) {
			var n = _g13[_g4];
			++_g4;
			n.transform.buildMatrix();
		}
	}
	,set: function(x,y,z,rX,rY,rZ,sX,sY,sZ) {
		if(sZ == null) {
			sZ = 1.0;
		}
		if(sY == null) {
			sY = 1.0;
		}
		if(sX == null) {
			sX = 1.0;
		}
		if(rZ == null) {
			rZ = 0.0;
		}
		if(rY == null) {
			rY = 0.0;
		}
		if(rX == null) {
			rX = 0.0;
		}
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.loc.set(x,y,z);
		this.setRotation(rX,rY,rZ);
		this.scale.set(sX,sY,sZ);
		this.buildMatrix();
	}
	,translate: function(x,y,z) {
		this.loc.x += x;
		this.loc.y += y;
		this.loc.z += z;
		this.buildMatrix();
	}
	,setMatrix: function(mat) {
		this.local.setFrom(mat);
		this.decompose();
	}
	,multMatrix: function(mat) {
		this.local.multmat2(mat);
		this.decompose();
	}
	,decompose: function() {
		this.local.decompose(this.loc,this.rot,this.scale);
	}
	,rotate: function(axis,f) {
		var q = new iron_math_Quat();
		q.fromAxisAngle(axis,f);
		this.rot.multquats(q,this.rot);
		this.dirty = true;
	}
	,setRotation: function(x,y,z) {
		this.rot.fromEuler(x,y,z);
		this.dirty = true;
		this._eulerX = x;
		this._eulerY = y;
		this._eulerZ = z;
	}
	,computeRadius: function() {
		this.radius = Math.sqrt(this.size.x * this.size.x + this.size.y * this.size.y + this.size.z * this.size.z);
	}
	,setDimensions: function(x,y,z) {
		this.size.set(x,y,z);
		this.computeRadius();
	}
	,look: function() {
		var _this = this.world;
		return new iron_math_Vec4(_this.self._10,_this.self._11,_this.self._12);
	}
	,right: function() {
		var _this = this.world;
		return new iron_math_Vec4(_this.self._00,_this.self._01,_this.self._02);
	}
	,up: function() {
		var _this = this.world;
		return new iron_math_Vec4(_this.self._20,_this.self._21,_this.self._22);
	}
	,worldx: function() {
		return this.world.self._30;
	}
	,worldy: function() {
		return this.world.self._31;
	}
	,worldz: function() {
		return this.world.self._32;
	}
	,__class__: iron_object_Transform
};
var kha_math_FastMatrix3 = $hxClasses["kha.math.FastMatrix3"] = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
kha_math_FastMatrix3.__name__ = true;
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	__class__: kha_math_FastMatrix3
};
var iron_object_Uniforms = $hxClasses["iron.object.Uniforms"] = function() { };
iron_object_Uniforms.__name__ = true;
iron_object_Uniforms.setConstants = function(g,context,object,camera,lamp,bindParams) {
	if(context.raw.constants != null) {
		var _g1 = 0;
		var _g = context.raw.constants.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = context.raw.constants[i];
			iron_object_Uniforms.setConstant(g,object,camera,lamp,context.constants[i],c);
		}
	}
	if(bindParams != null) {
		var _g11 = 0;
		var _g2 = bindParams.length / 2 | 0;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var pos = i1 * 2;
			var rtID = bindParams[pos];
			var samplerID = bindParams[pos + 1];
			var pathdata = camera.data.pathdata;
			var attachDepth = false;
			var $char = rtID.charAt(0);
			if($char == "_") {
				attachDepth = true;
			}
			if(attachDepth) {
				rtID = HxOverrides.substr(rtID,1,null);
			}
			if(rtID == "shadowMap" && lamp != null && lamp.data.raw.shadowmap_cube) {
				rtID += "Cube";
				samplerID += "Cube";
			}
			var rt;
			if(attachDepth) {
				var _this = pathdata.depthToRenderTarget;
				if(__map_reserved[rtID] != null) {
					rt = _this.getReserved(rtID);
				} else {
					rt = _this.h[rtID];
				}
			} else {
				var _this1 = pathdata.renderTargets;
				if(__map_reserved[rtID] != null) {
					rt = _this1.getReserved(rtID);
				} else {
					rt = _this1.h[rtID];
				}
			}
			iron_object_Uniforms.bindRenderTarget(g,rt,context,samplerID,attachDepth);
		}
	}
	if(context.raw.texture_units != null) {
		var _g12 = 0;
		var _g3 = context.raw.texture_units.length;
		while(_g12 < _g3) {
			var j = _g12++;
			var tulink = context.raw.texture_units[j].link;
			if(tulink == null) {
				continue;
			}
			var tuid = context.raw.texture_units[j].name;
			if(tulink == "_envmapRadiance") {
				var w = iron_Scene.active.world;
				if(w != null) {
					g.setTexture(context.textureUnits[j],w.getGlobalProbe().radiance);
					g.setTextureParameters(context.textureUnits[j],kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_MipMapFilter.LinearMipFilter);
				}
			} else if(tulink == "_envmapBrdf") {
				var _this2 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved["brdf.png"] != null ? _this2.getReserved("brdf.png") : _this2.h["brdf.png"]);
			} else if(tulink == "_noise8") {
				var _this3 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved["noise8.png"] != null ? _this3.getReserved("noise8.png") : _this3.h["noise8.png"]);
				g.setTextureParameters(context.textureUnits[j],kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_MipMapFilter.NoMipFilter);
			} else if(tulink == "_noise64") {
				var _this4 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved["noise64.png"] != null ? _this4.getReserved("noise64.png") : _this4.h["noise64.png"]);
				g.setTextureParameters(context.textureUnits[j],kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_MipMapFilter.NoMipFilter);
			} else if(tulink == "_noise256") {
				var _this5 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved["noise256.png"] != null ? _this5.getReserved("noise256.png") : _this5.h["noise256.png"]);
				g.setTextureParameters(context.textureUnits[j],kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_MipMapFilter.NoMipFilter);
			} else if(tulink == "_lampColorTexture") {
				if(lamp != null) {
					g.setTexture(context.textureUnits[j],lamp.data.colorTexture);
					g.setTextureParameters(context.textureUnits[j],kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_MipMapFilter.NoMipFilter);
				}
			} else if(tulink == "_lensTexture") {
				var _this6 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved["lenstexture.jpg"] != null ? _this6.getReserved("lenstexture.jpg") : _this6.h["lenstexture.jpg"]);
			} else if(tulink == "_iesTexture") {
				var _this7 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved["iestexture.png"] != null ? _this7.getReserved("iestexture.png") : _this7.h["iestexture.png"]);
				g.setTextureParameters(context.textureUnits[j],kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureAddressing.Repeat,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_TextureFilter.LinearFilter,kha_graphics4_MipMapFilter.NoMipFilter);
			} else if(tulink != "_sdfTexture") {
				if(iron_object_Uniforms.externalTextureLinks != null) {
					var _g21 = 0;
					var _g31 = iron_object_Uniforms.externalTextureLinks;
					while(_g21 < _g31.length) {
						var f = _g31[_g21];
						++_g21;
						var image = f(tulink);
						if(image != null) {
							g.setTexture(context.textureUnits[j],image);
							break;
						}
					}
				}
			}
		}
	}
};
iron_object_Uniforms.bindRenderTarget = function(g,rt,context,samplerID,attachDepth) {
	if(rt != null) {
		var tus = context.raw.texture_units;
		if(rt.pong != null && !rt.pongState) {
			rt = rt.pong;
		}
		var _g1 = 0;
		var _g = tus.length;
		while(_g1 < _g) {
			var j = _g1++;
			if(samplerID == tus[j].name) {
				if(!(tus[j].is_image != null && tus[j].is_image)) {
					if(rt.isCubeMap) {
						if(attachDepth) {
							g.setCubeMapDepth(context.textureUnits[j],rt.cubeMap);
						} else {
							g.setCubeMap(context.textureUnits[j],rt.cubeMap);
						}
					} else if(attachDepth) {
						g.setTextureDepth(context.textureUnits[j],rt.image);
					} else {
						g.setTexture(context.textureUnits[j],rt.image);
					}
				}
			}
		}
	}
};
iron_object_Uniforms.setConstant = function(g,object,camera,lamp,location,c) {
	if(c.link == null) {
		return;
	}
	if(c.type == "mat4") {
		var m = null;
		if(c.link == "_worldMatrix") {
			m = object.transform.world;
		} else if(c.link == "_inverseWorldMatrix") {
			iron_object_Uniforms.helpMat.getInverse(object.transform.world);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_viewMatrix") {
			m = camera.V;
		} else if(c.link == "_transposeInverseViewMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(camera.V);
			iron_object_Uniforms.helpMat.getInverse(iron_object_Uniforms.helpMat);
			iron_object_Uniforms.helpMat.transpose();
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_inverseViewMatrix") {
			iron_object_Uniforms.helpMat.getInverse(camera.V);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_transposeViewMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(camera.V);
			iron_object_Uniforms.helpMat.transpose3x3();
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_projectionMatrix") {
			m = camera.P;
		} else if(c.link == "_inverseProjectionMatrix") {
			iron_object_Uniforms.helpMat.getInverse(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_inverseViewProjectionMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(camera.V);
			iron_object_Uniforms.helpMat.multmat2(camera.P);
			iron_object_Uniforms.helpMat.getInverse(iron_object_Uniforms.helpMat);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(object.transform.world);
			iron_object_Uniforms.helpMat.multmat2(camera.V);
			iron_object_Uniforms.helpMat.multmat2(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(object.transform.world);
			iron_object_Uniforms.helpMat.multmat2(camera.V);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_viewProjectionMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(camera.V);
			iron_object_Uniforms.helpMat.multmat2(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_prevViewProjectionMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(camera.prevV);
			iron_object_Uniforms.helpMat.multmat2(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_lampWorldViewProjectionMatrix") {
			if(lamp != null) {
				iron_object_Uniforms.helpMat.setIdentity();
				if(object != null) {
					iron_object_Uniforms.helpMat.multmat2(object.transform.world);
				}
				iron_object_Uniforms.helpMat.multmat2(lamp.V);
				iron_object_Uniforms.helpMat.multmat2(lamp.P);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_biasLampWorldViewProjectionMatrix") {
			if(lamp != null) {
				iron_object_Uniforms.helpMat.setIdentity();
				if(object != null) {
					iron_object_Uniforms.helpMat.multmat2(object.transform.world);
				}
				iron_object_Uniforms.helpMat.multmat2(lamp.V);
				iron_object_Uniforms.helpMat.multmat2(lamp.P);
				iron_object_Uniforms.helpMat.multmat2(iron_object_Uniforms.biasMat);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lampViewProjectionMatrix") {
			if(lamp != null) {
				iron_object_Uniforms.helpMat.setIdentity();
				iron_object_Uniforms.helpMat.multmat2(lamp.V);
				iron_object_Uniforms.helpMat.multmat2(lamp.P);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_biasLampViewProjectionMatrix") {
			if(lamp != null) {
				iron_object_Uniforms.helpMat.setIdentity();
				iron_object_Uniforms.helpMat.multmat2(lamp.V);
				iron_object_Uniforms.helpMat.multmat2(lamp.P);
				iron_object_Uniforms.helpMat.multmat2(iron_object_Uniforms.biasMat);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lampVolumeWorldViewProjectionMatrix") {
			if(lamp != null) {
				var tr = lamp.transform;
				var type = lamp.data.raw.type;
				if(type == "spot") {
					iron_object_Uniforms.helpVec.set(tr.world.self._30,tr.world.self._31,tr.world.self._32);
					iron_object_Uniforms.helpVec2.set(lamp.data.raw.far_plane,lamp.data.raw.far_plane * 2.0,lamp.data.raw.far_plane * 2.0);
					iron_object_Uniforms.helpMat.compose(iron_object_Uniforms.helpVec,iron_object_Uniforms.helpQuat,iron_object_Uniforms.helpVec2);
				} else if(type == "point" || type == "area") {
					iron_object_Uniforms.helpVec.set(tr.world.self._30,tr.world.self._31,tr.world.self._32);
					iron_object_Uniforms.helpVec2.set(lamp.data.raw.far_plane,lamp.data.raw.far_plane * 2.0,lamp.data.raw.far_plane * 2.0);
					iron_object_Uniforms.helpMat.compose(iron_object_Uniforms.helpVec,iron_object_Uniforms.helpQuat,iron_object_Uniforms.helpVec2);
				}
				iron_object_Uniforms.helpMat.multmat2(camera.V);
				iron_object_Uniforms.helpMat.multmat2(camera.P);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_skydomeMatrix") {
			var tr1 = camera.transform;
			iron_object_Uniforms.helpVec.set(tr1.world.self._30,tr1.world.self._31,tr1.world.self._32 - 3.5);
			var bounds = camera.farPlane * 0.95;
			iron_object_Uniforms.helpVec2.set(bounds,bounds,bounds);
			iron_object_Uniforms.helpMat.compose(iron_object_Uniforms.helpVec,iron_object_Uniforms.helpQuat,iron_object_Uniforms.helpVec2);
			iron_object_Uniforms.helpMat.multmat2(camera.V);
			iron_object_Uniforms.helpMat.multmat2(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_lampViewMatrix") {
			if(lamp != null) {
				m = lamp.V;
			}
		} else if(c.link == "_lampProjectionMatrix") {
			if(lamp != null) {
				m = lamp.P;
			}
		} else if(iron_object_Uniforms.externalMat4Links != null) {
			var _g = 0;
			var _g1 = iron_object_Uniforms.externalMat4Links;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				m = fn(c.link);
				if(m != null) {
					break;
				}
			}
		}
		if(m == null) {
			return;
		}
		g.setMatrix(location,m.self);
	} else if(c.type == "mat3") {
		var m1 = null;
		if(c.link == "_normalMatrix") {
			iron_object_Uniforms.helpMat.setIdentity();
			iron_object_Uniforms.helpMat.multmat2(object.transform.world);
			iron_object_Uniforms.helpMat.getInverse(iron_object_Uniforms.helpMat);
			iron_object_Uniforms.helpMat.transpose3x3();
			iron_object_Uniforms.helpMat3.setFrom4(iron_object_Uniforms.helpMat);
			m1 = iron_object_Uniforms.helpMat3;
		}
		if(m1 == null) {
			return;
		}
		g.setMatrix3(location,m1.self);
	} else if(c.type == "vec4") {
		var v = null;
		iron_object_Uniforms.helpVec.set(0,0,0);
		if(c.link == "_input") {
			iron_object_Uniforms.helpVec.set(iron_system_Input.getMouse().x / kha_System.windowWidth(),iron_system_Input.getMouse().y / kha_System.windowHeight(),iron_system_Input.getMouse().down() ? 1.0 : 0.0,0.0);
			v = iron_object_Uniforms.helpVec;
		} else if(iron_object_Uniforms.externalVec4Links != null) {
			var _g2 = 0;
			var _g11 = iron_object_Uniforms.externalVec4Links;
			while(_g2 < _g11.length) {
				var fn1 = _g11[_g2];
				++_g2;
				v = fn1(c.link);
				if(v != null) {
					break;
				}
			}
		}
		if(v == null) {
			return;
		}
		g.setFloat4(location,v.x,v.y,v.z,v.w);
	} else if(c.type == "vec3") {
		var v1 = null;
		iron_object_Uniforms.helpVec.set(0,0,0);
		if(c.link == "_lampPosition") {
			if(lamp != null) {
				iron_object_Uniforms.helpVec.set(lamp.transform.world.self._30,lamp.transform.world.self._31,lamp.transform.world.self._32);
			}
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_lampDirection") {
			if(lamp != null) {
				iron_object_Uniforms.helpVec = new iron_math_Vec4(lamp.V.self._02,lamp.V.self._12,lamp.V.self._22);
			}
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_lampColor") {
			if(lamp != null) {
				var str = lamp.data.raw.strength;
				iron_object_Uniforms.helpVec.set(lamp.data.raw.color[0] * str,lamp.data.raw.color[1] * str,lamp.data.raw.color[2] * str);
			}
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_lampColorVoxel") {
			if(lamp != null) {
				var str1 = lamp.data.raw.strength;
				if(lamp.data.raw.type == "sun") {
					str1 *= 100;
				}
				iron_object_Uniforms.helpVec.set(lamp.data.raw.color[0] * str1,lamp.data.raw.color[1] * str1,lamp.data.raw.color[2] * str1);
			}
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_lampArea0") {
			if(lamp != null && lamp.data.raw.size != null) {
				var sx = lamp.data.raw.size / 2;
				var sy = lamp.data.raw.size_y / 2;
				iron_object_Uniforms.helpVec.set(-sx,sy,0.0);
				iron_object_Uniforms.helpVec.applymat(lamp.transform.world);
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lampArea1") {
			if(lamp != null && lamp.data.raw.size != null) {
				var sx1 = lamp.data.raw.size / 2;
				var sy1 = lamp.data.raw.size_y / 2;
				iron_object_Uniforms.helpVec.set(sx1,sy1,0.0);
				iron_object_Uniforms.helpVec.applymat(lamp.transform.world);
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lampArea2") {
			if(lamp != null && lamp.data.raw.size != null) {
				var sx2 = lamp.data.raw.size / 2;
				var sy2 = lamp.data.raw.size_y / 2;
				iron_object_Uniforms.helpVec.set(sx2,-sy2,0.0);
				iron_object_Uniforms.helpVec.applymat(lamp.transform.world);
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lampArea3") {
			if(lamp != null && lamp.data.raw.size != null) {
				var sx3 = lamp.data.raw.size / 2;
				var sy3 = lamp.data.raw.size_y / 2;
				iron_object_Uniforms.helpVec.set(-sx3,-sy3,0.0);
				iron_object_Uniforms.helpVec.applymat(lamp.transform.world);
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_cameraPosition") {
			iron_object_Uniforms.helpVec.set(camera.transform.world.self._30,camera.transform.world.self._31,camera.transform.world.self._32);
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraLook") {
			iron_object_Uniforms.helpVec = new iron_math_Vec4(-camera.transform.world.self._20,-camera.transform.world.self._21,-camera.transform.world.self._22);
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_backgroundCol") {
			iron_object_Uniforms.helpVec.set(camera.data.raw.clear_color[0],camera.data.raw.clear_color[1],camera.data.raw.clear_color[2]);
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_probeVolumeCenter") {
			v1 = iron_Scene.active.world.getProbeVolumeCenter(object.transform);
		} else if(c.link == "_probeVolumeSize") {
			v1 = iron_Scene.active.world.getProbeVolumeSize(object.transform);
		} else if(iron_object_Uniforms.externalVec3Links != null) {
			var _g3 = 0;
			var _g12 = iron_object_Uniforms.externalVec3Links;
			while(_g3 < _g12.length) {
				var f = _g12[_g3];
				++_g3;
				v1 = f(c.link);
				if(v1 != null) {
					break;
				}
			}
		}
		if(v1 == null) {
			return;
		}
		g.setFloat3(location,v1.x,v1.y,v1.z);
	} else if(c.type == "vec2") {
		var vx = 0;
		var vy = 0;
		if(c.link == "_vec2x") {
			vx = 1.0;
		} else if(c.link == "_vec2xInv") {
			vx = 1.0 / camera.renderPath.currentRenderTargetW;
		} else if(c.link == "_vec2x2") {
			vx = 2.0;
		} else if(c.link == "_vec2x2Inv") {
			vx = 2.0 / camera.renderPath.currentRenderTargetW;
		} else if(c.link == "_vec2y") {
			vy = 1.0;
		} else if(c.link == "_vec2yInv") {
			vy = 1.0 / camera.renderPath.currentRenderTargetH;
		} else if(c.link == "_vec2y2") {
			vy = 2.0;
		} else if(c.link == "_vec2y2Inv") {
			vy = 2.0 / camera.renderPath.currentRenderTargetH;
		} else if(c.link == "_vec2y3") {
			vy = 3.0;
		} else if(c.link == "_vec2y3Inv") {
			vy = 3.0 / camera.renderPath.currentRenderTargetH;
		} else if(c.link == "_windowSize") {
			vx = kha_System.windowWidth();
			vy = kha_System.windowHeight();
		} else if(c.link == "_windowSizeInv") {
			vx = 1.0 / kha_System.windowWidth();
			vy = 1.0 / kha_System.windowHeight();
		} else if(c.link == "_screenSize") {
			vx = camera.renderPath.currentRenderTargetW;
			vy = camera.renderPath.currentRenderTargetH;
		} else if(c.link == "_screenSizeInv") {
			vx = 1.0 / camera.renderPath.currentRenderTargetW;
			vy = 1.0 / camera.renderPath.currentRenderTargetH;
		} else if(c.link == "_aspectRatio") {
			vx = camera.renderPath.currentRenderTargetH / camera.renderPath.currentRenderTargetW;
			vy = camera.renderPath.currentRenderTargetW / camera.renderPath.currentRenderTargetH;
			if(vx > 1.0) {
				vx = 1.0;
			} else {
				vx = vx;
			}
			if(vy > 1.0) {
				vy = 1.0;
			} else {
				vy = vy;
			}
		} else if(c.link == "_cameraPlane") {
			vx = camera.data.raw.near_plane;
			vy = camera.data.raw.far_plane;
		} else if(c.link == "_lampPlane") {
			if(lamp == null) {
				vx = 0.0;
			} else {
				vx = lamp.data.raw.near_plane;
			}
			if(lamp == null) {
				vy = 0.0;
			} else {
				vy = lamp.data.raw.far_plane;
			}
		} else if(c.link == "_spotlampData") {
			if(lamp == null) {
				vx = 0.0;
			} else {
				vx = lamp.data.raw.spot_size;
			}
			if(lamp == null) {
				vy = 0.0;
			} else {
				vy = vx - lamp.data.raw.spot_blend;
			}
		} else if(iron_object_Uniforms.externalVec2Links != null) {
			var _g4 = 0;
			var _g13 = iron_object_Uniforms.externalVec2Links;
			while(_g4 < _g13.length) {
				var fn2 = _g13[_g4];
				++_g4;
				var v2 = fn2(c.link);
				if(v2 != null) {
					vx = v2.x;
					vy = v2.y;
					break;
				}
			}
		}
		g.setFloat2(location,vx,vy);
	} else if(c.type == "float") {
		var f1 = 0.0;
		if(c.link == "_time") {
			f1 = kha_Scheduler.time();
		} else if(c.link == "_deltaTime") {
			f1 = 0.0166666666666666664;
		} else if(c.link == "_lampRadius") {
			if(lamp == null) {
				f1 = 0.0;
			} else {
				f1 = lamp.data.raw.far_plane;
			}
		} else if(c.link == "_lampShadowsBias") {
			if(lamp == null) {
				f1 = 0.0;
			} else {
				f1 = lamp.data.raw.shadows_bias;
			}
		} else if(c.link == "_lampSize") {
			if(lamp != null && lamp.data.raw.lamp_size != null) {
				f1 = lamp.data.raw.lamp_size;
			}
		} else if(c.link == "_lampSizeUV") {
			if(lamp != null && lamp.data.raw.lamp_size != null) {
				f1 = lamp.data.raw.lamp_size / lamp.data.raw.fov;
			}
		} else if(c.link == "_envmapStrength") {
			if(iron_Scene.active.world == null) {
				f1 = 0.0;
			} else {
				f1 = iron_Scene.active.world.getGlobalProbe().raw.strength;
			}
		} else if(c.link == "_probeStrength") {
			f1 = iron_Scene.active.world.getProbeStrength(object.transform);
		} else if(c.link == "_probeBlending") {
			f1 = iron_Scene.active.world.getProbeBlending(object.transform);
		} else if(c.link == "_aspectRatioF") {
			f1 = camera.renderPath.currentRenderTargetW / camera.renderPath.currentRenderTargetH;
		} else if(c.link == "_aspectRatioWindowF") {
			f1 = kha_System.windowWidth() / kha_System.windowHeight();
		} else if(c.link == "_objectInfoIndex") {
			f1 = object.uid;
		} else if(c.link == "_objectInfoMaterialIndex") {
			if(camera.renderPath.currentMaterial != null) {
				f1 = camera.renderPath.currentMaterial.uid;
			} else {
				f1 = (js_Boot.__cast(object , iron_object_MeshObject)).materials[0].uid;
			}
		} else if(c.link == "_objectInfoRandom") {
			f1 = object.urandom;
		} else if(iron_object_Uniforms.externalFloatLinks != null) {
			var _g5 = 0;
			var _g14 = iron_object_Uniforms.externalFloatLinks;
			while(_g5 < _g14.length) {
				var fn3 = _g14[_g5];
				++_g5;
				var res = fn3(c.link);
				if(res != null) {
					f1 = res;
					break;
				}
			}
		}
		g.setFloat(location,f1);
	} else if(c.type == "floats") {
		var fa = null;
		if(c.link == "_skinBones") {
			if(object.animation != null) {
				fa = (js_Boot.__cast(object.animation , iron_object_BoneAnimation)).skinBuffer;
			}
		} else if(c.link == "_envmapIrradiance") {
			if(iron_Scene.active.world == null) {
				fa = iron_data_WorldData.getEmptyIrradiance();
			} else {
				fa = iron_Scene.active.world.getSHIrradiance();
			}
		} else if(iron_object_Uniforms.externalFloatsLinks != null) {
			var _g6 = 0;
			var _g15 = iron_object_Uniforms.externalFloatsLinks;
			while(_g6 < _g15.length) {
				var fn4 = _g15[_g6];
				++_g6;
				fa = fn4(c.link);
				if(fa != null) {
					break;
				}
			}
		}
		if(fa != null) {
			g.setFloats(location,fa);
		}
	} else if(c.type == "int") {
		var i = 0;
		if(c.link == "_uid") {
			i = object.uid;
		}
		if(c.link == "_lampType") {
			if(lamp == null) {
				i = 0;
			} else {
				switch(lamp.data.raw.type) {
				case "area":
					i = 3;
					break;
				case "point":
					i = 1;
					break;
				case "spot":
					i = 2;
					break;
				case "sun":
					i = 0;
					break;
				default:
					i = 0;
				}
			}
		} else if(c.link == "_lampIndex") {
			i = camera.renderPath.currentLampIndex;
		} else if(c.link == "_lampCastShadow") {
			if(lamp != null && lamp.data.raw.cast_shadow) {
				if(lamp.data.raw.shadowmap_cube) {
					i = 2;
				} else {
					i = 1;
				}
			}
		} else if(c.link == "_envmapNumMipmaps") {
			var w = iron_Scene.active.world;
			if(w != null) {
				i = w.getGlobalProbe().raw.radiance_mipmaps + 1;
			} else {
				i = 1;
			}
		} else if(iron_object_Uniforms.externalIntLinks != null) {
			var _g7 = 0;
			var _g16 = iron_object_Uniforms.externalIntLinks;
			while(_g7 < _g16.length) {
				var fn5 = _g16[_g7];
				++_g7;
				var res1 = fn5(c.link);
				if(res1 != null) {
					i = res1;
					break;
				}
			}
		}
		g.setInt(location,i);
	}
};
iron_object_Uniforms.setMaterialConstants = function(g,context,materialContext) {
	if(materialContext.raw.bind_constants != null) {
		var _g1 = 0;
		var _g = materialContext.raw.bind_constants.length;
		while(_g1 < _g) {
			var i = _g1++;
			var matc = materialContext.raw.bind_constants[i];
			var pos = -1;
			var _g3 = 0;
			var _g2 = context.raw.constants.length;
			while(_g3 < _g2) {
				var i1 = _g3++;
				if(context.raw.constants[i1].name == matc.name) {
					pos = i1;
					break;
				}
			}
			if(pos == -1) {
				continue;
			}
			var c = context.raw.constants[pos];
			iron_object_Uniforms.setMaterialConstant(g,context.constants[pos],c,matc);
		}
	}
	if(materialContext.textures != null) {
		var _g11 = 0;
		var _g4 = materialContext.textures.length;
		while(_g11 < _g4) {
			var i2 = _g11++;
			var mname = materialContext.raw.bind_textures[i2].name;
			var _g31 = 0;
			var _g21 = context.textureUnits.length;
			while(_g31 < _g21) {
				var j = _g31++;
				var sname = context.raw.texture_units[j].name;
				if(mname == sname) {
					g.setTexture(context.textureUnits[j],materialContext.textures[i2]);
					materialContext.setTextureParameters(g,i2,context,j);
					break;
				}
			}
		}
	}
};
iron_object_Uniforms.setMaterialConstant = function(g,location,c,matc) {
	var _g = c.type;
	switch(_g) {
	case "bool":
		g.setBool(location,matc.bool);
		break;
	case "float":
		g.setFloat(location,matc["float"]);
		break;
	case "int":
		g.setInt(location,matc["int"]);
		break;
	case "vec2":
		g.setFloat2(location,matc.vec2[0],matc.vec2[1]);
		break;
	case "vec3":
		g.setFloat3(location,matc.vec3[0],matc.vec3[1],matc.vec3[2]);
		break;
	case "vec4":
		g.setFloat4(location,matc.vec4[0],matc.vec4[1],matc.vec4[2],matc.vec4[3]);
		break;
	}
};
var iron_system_ArmPack = $hxClasses["iron.system.ArmPack"] = function() { };
iron_system_ArmPack.__name__ = true;
iron_system_ArmPack.decode = function(b) {
	var i = new haxe_io_BytesInput(b);
	i.set_bigEndian(true);
	return iron_system_ArmPack.read(i);
};
iron_system_ArmPack.read = function(i) {
	try {
		var b = i.readByte();
		switch(b) {
		case 192:
			return null;
		case 194:
			return false;
		case 195:
			return true;
		case 196:
			return i.read(i.readByte());
		case 197:
			return i.read(i.readUInt16());
		case 198:
			return i.read(i.readInt32());
		case 202:
			return i.readFloat();
		case 203:
			return i.readDouble();
		case 204:
			return i.readByte();
		case 205:
			return i.readUInt16();
		case 206:
			return i.readInt32();
		case 208:
			return i.readInt8();
		case 209:
			return i.readInt16();
		case 210:
			return i.readInt32();
		case 217:
			return i.readString(i.readByte());
		case 218:
			return i.readString(i.readUInt16());
		case 219:
			return i.readString(i.readInt32());
		case 220:
			return iron_system_ArmPack.readArray(i,i.readUInt16());
		case 221:
			return iron_system_ArmPack.readArray(i,i.readInt32());
		case 222:
			return iron_system_ArmPack.readMap(i,i.readUInt16());
		case 223:
			return iron_system_ArmPack.readMap(i,i.readInt32());
		default:
			if(b < 128) {
				return b;
			} else if(b < 144) {
				return iron_system_ArmPack.readMap(i,15 & b);
			} else if(b < 160) {
				return iron_system_ArmPack.readArray(i,15 & b);
			} else if(b < 192) {
				return i.readString(31 & b);
			} else if(b > 223) {
				return -256 | b;
			}
		}
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
		} else throw(e);
	}
	return null;
};
iron_system_ArmPack.readArray = function(i,length) {
	var b = i.readByte();
	var _g = i;
	var _g1 = _g.pos;
	_g.set_position(_g1 - 1);
	if(b == 202) {
		var _g2 = i;
		var _g11 = _g2.pos;
		_g2.set_position(_g11 + 1);
		var this1 = new Float32Array(length);
		var a = this1;
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var x = _g12++;
			a[x] = i.readFloat();
		}
		return a;
	} else if(b == 210) {
		var _g4 = i;
		var _g13 = _g4.pos;
		_g4.set_position(_g13 + 1);
		var this2 = new Uint32Array(length);
		var a1 = this2;
		var _g14 = 0;
		var _g5 = length;
		while(_g14 < _g5) {
			var x1 = _g14++;
			a1[x1] = i.readInt32();
		}
		return a1;
	} else {
		var a2 = [];
		var _g15 = 0;
		var _g6 = length;
		while(_g15 < _g6) {
			var x2 = _g15++;
			a2.push(iron_system_ArmPack.read(i));
		}
		return a2;
	}
};
iron_system_ArmPack.readMap = function(i,length) {
	var out = { };
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var n = _g1++;
		var k = iron_system_ArmPack.read(i);
		var v = iron_system_ArmPack.read(i);
		out[Std.string(k)] = v;
	}
	return out;
};
var iron_system_Audio = $hxClasses["iron.system.Audio"] = function() {
};
iron_system_Audio.__name__ = true;
iron_system_Audio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	kha_audio2_Audio1.play(sound,loop);
};
iron_system_Audio.prototype = {
	__class__: iron_system_Audio
};
var iron_system_Input = $hxClasses["iron.system.Input"] = function() { };
iron_system_Input.__name__ = true;
iron_system_Input.reset = function() {
	iron_system_Input.occupied = false;
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.reset();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.reset();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.reset();
	}
};
iron_system_Input.endFrame = function() {
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.endFrame();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.endFrame();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.endFrame();
	}
	if(iron_system_Input.virtualButtons != null) {
		var _this = iron_system_Input.virtualButtons;
		var vb = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(vb.hasNext()) {
			var vb1 = vb.next();
			vb1.started = vb1.released = false;
		}
	}
};
iron_system_Input.getMouse = function() {
	if(iron_system_Input.mouse == null) {
		iron_system_Input.mouse = new iron_system_Mouse();
	}
	return iron_system_Input.mouse;
};
iron_system_Input.getSurface = function() {
	return iron_system_Input.getMouse();
};
iron_system_Input.getKeyboard = function() {
	if(iron_system_Input.keyboard == null) {
		iron_system_Input.keyboard = new iron_system_Keyboard();
	}
	return iron_system_Input.keyboard;
};
iron_system_Input.getGamepad = function(i) {
	if(i == null) {
		i = 0;
	}
	if(i >= 4) {
		return null;
	}
	while(iron_system_Input.gamepads.length <= i) iron_system_Input.gamepads.push(new iron_system_Gamepad(iron_system_Input.gamepads.length));
	if(iron_system_Input.gamepads[i].connected) {
		return iron_system_Input.gamepads[i];
	} else {
		return null;
	}
};
iron_system_Input.getSensor = function() {
	if(iron_system_Input.sensor == null) {
		iron_system_Input.sensor = new iron_system_Sensor();
	}
	return iron_system_Input.sensor;
};
iron_system_Input.getVirtualButton = function(virtual) {
	if(iron_system_Input.virtualButtons == null) {
		return null;
	}
	var _this = iron_system_Input.virtualButtons;
	if(__map_reserved[virtual] != null) {
		return _this.getReserved(virtual);
	} else {
		return _this.h[virtual];
	}
};
var iron_system_VirtualButton = $hxClasses["iron.system.VirtualButton"] = function() {
	this.down = false;
	this.released = false;
	this.started = false;
};
iron_system_VirtualButton.__name__ = true;
iron_system_VirtualButton.prototype = {
	__class__: iron_system_VirtualButton
};
var iron_system_VirutalInput = $hxClasses["iron.system.VirutalInput"] = function() {
	this.virtualButtons = null;
};
iron_system_VirutalInput.__name__ = true;
iron_system_VirutalInput.prototype = {
	setVirtual: function(virtual,button) {
		if(iron_system_Input.virtualButtons == null) {
			iron_system_Input.virtualButtons = new haxe_ds_StringMap();
		}
		var _this = iron_system_Input.virtualButtons;
		var vb = __map_reserved[virtual] != null ? _this.getReserved(virtual) : _this.h[virtual];
		if(vb == null) {
			vb = new iron_system_VirtualButton();
			var _this1 = iron_system_Input.virtualButtons;
			if(__map_reserved[virtual] != null) {
				_this1.setReserved(virtual,vb);
			} else {
				_this1.h[virtual] = vb;
			}
		}
		if(this.virtualButtons == null) {
			this.virtualButtons = new haxe_ds_StringMap();
		}
		var _this2 = this.virtualButtons;
		if(__map_reserved[button] != null) {
			_this2.setReserved(button,vb);
		} else {
			_this2.h[button] = vb;
		}
	}
	,downVirtual: function(button) {
		if(this.virtualButtons != null) {
			var _this = this.virtualButtons;
			var vb = __map_reserved[button] != null ? _this.getReserved(button) : _this.h[button];
			if(vb != null) {
				vb.down = true;
				vb.started = true;
			}
		}
	}
	,upVirtual: function(button) {
		if(this.virtualButtons != null) {
			var _this = this.virtualButtons;
			var vb = __map_reserved[button] != null ? _this.getReserved(button) : _this.h[button];
			if(vb != null) {
				vb.down = false;
				vb.released = true;
			}
		}
	}
	,__class__: iron_system_VirutalInput
};
var iron_system_Mouse = $hxClasses["iron.system.Mouse"] = function() {
	this.wheelDelta = 0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false,false,false];
	this.buttonsStarted = [false,false,false];
	this.buttonsDown = [false,false,false];
	iron_system_VirutalInput.call(this);
	kha_input_Mouse.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener),$bind(this,this.wheelListener));
};
iron_system_Mouse.__name__ = true;
iron_system_Mouse.__super__ = iron_system_VirutalInput;
iron_system_Mouse.prototype = $extend(iron_system_VirutalInput.prototype,{
	endFrame: function() {
		var tmp = this.buttonsStarted[1] = this.buttonsStarted[2] = false;
		this.buttonsStarted[0] = tmp;
		var tmp1 = this.buttonsReleased[1] = this.buttonsReleased[2] = false;
		this.buttonsReleased[0] = tmp1;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
		this.wheelDelta = 0;
	}
	,reset: function() {
		var tmp = this.buttonsDown[1] = this.buttonsDown[2] = false;
		this.buttonsDown[0] = tmp;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		if(button == "left") {
			return 0;
		} else if(button == "right") {
			return 1;
		} else {
			return 2;
		}
	}
	,down: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,downListener: function(index,x,y) {
		this.buttonsDown[index] = true;
		this.buttonsStarted[index] = true;
		this.x = x;
		this.y = y;
		this.downVirtual(iron_system_Mouse.buttons[index]);
	}
	,upListener: function(index,x,y) {
		this.buttonsDown[index] = false;
		this.buttonsReleased[index] = true;
		this.x = x;
		this.y = y;
		this.upVirtual(iron_system_Mouse.buttons[index]);
	}
	,moveListener: function(x,y,movementX,movementY) {
		this.movementX = movementX;
		this.movementY = movementY;
		this.x = x;
		this.y = y;
		this.moved = true;
	}
	,wheelListener: function(delta) {
		this.wheelDelta = delta;
	}
	,__class__: iron_system_Mouse
});
var iron_system_Keyboard = $hxClasses["iron.system.Keyboard"] = function() {
	this.keysFrame = [];
	this.keysReleased = new haxe_ds_StringMap();
	this.keysStarted = new haxe_ds_StringMap();
	this.keysDown = new haxe_ds_StringMap();
	iron_system_VirutalInput.call(this);
	this.reset();
	kha_input_Keyboard.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.pressListener));
};
iron_system_Keyboard.__name__ = true;
iron_system_Keyboard.__super__ = iron_system_VirutalInput;
iron_system_Keyboard.prototype = $extend(iron_system_VirutalInput.prototype,{
	endFrame: function() {
		if(this.keysFrame.length > 0) {
			var _g = 0;
			var _g1 = this.keysFrame;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _this = this.keysStarted;
				if(__map_reserved[s] != null) {
					_this.setReserved(s,false);
				} else {
					_this.h[s] = false;
				}
				var _this1 = this.keysReleased;
				if(__map_reserved[s] != null) {
					_this1.setReserved(s,false);
				} else {
					_this1.h[s] = false;
				}
			}
			this.keysFrame.splice(0,this.keysFrame.length);
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = iron_system_Keyboard.keys;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _this = this.keysDown;
			if(__map_reserved[s] != null) {
				_this.setReserved(s,false);
			} else {
				_this.h[s] = false;
			}
			var _this1 = this.keysStarted;
			if(__map_reserved[s] != null) {
				_this1.setReserved(s,false);
			} else {
				_this1.h[s] = false;
			}
			var _this2 = this.keysReleased;
			if(__map_reserved[s] != null) {
				_this2.setReserved(s,false);
			} else {
				_this2.h[s] = false;
			}
		}
		this.endFrame();
	}
	,down: function(key) {
		var _this = this.keysDown;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,started: function(key) {
		var _this = this.keysStarted;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,released: function(key) {
		var _this = this.keysReleased;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,keyToString: function(key) {
		if(key == 32) {
			return "space";
		} else if(key == 8) {
			return "backspace";
		} else if(key == 9) {
			return "tab";
		} else if(key == 13) {
			return "enter";
		} else if(key == 16) {
			return "shift";
		} else if(key == 17) {
			return "ctrl";
		} else if(key == 18) {
			return "alt";
		} else if(key == 27) {
			return "esc";
		} else if(key == 46) {
			return "del";
		} else if(key == 38) {
			return "up";
		} else if(key == 40) {
			return "down";
		} else if(key == 37) {
			return "left";
		} else if(key == 39) {
			return "right";
		} else if(key == 1) {
			return "back";
		} else if(key == 48) {
			return "0";
		} else if(key == 49) {
			return "1";
		} else if(key == 50) {
			return "2";
		} else if(key == 51) {
			return "3";
		} else if(key == 52) {
			return "4";
		} else if(key == 53) {
			return "5";
		} else if(key == 54) {
			return "6";
		} else if(key == 55) {
			return "7";
		} else if(key == 56) {
			return "8";
		} else if(key == 57) {
			return "9";
		} else {
			return String.fromCharCode(key).toLowerCase();
		}
	}
	,downListener: function(code) {
		var s = this.keyToString(code);
		this.keysFrame.push(s);
		var _this = this.keysStarted;
		if(__map_reserved[s] != null) {
			_this.setReserved(s,true);
		} else {
			_this.h[s] = true;
		}
		var _this1 = this.keysDown;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,true);
		} else {
			_this1.h[s] = true;
		}
		this.downVirtual(s);
	}
	,upListener: function(code) {
		var s = this.keyToString(code);
		this.keysFrame.push(s);
		var _this = this.keysReleased;
		if(__map_reserved[s] != null) {
			_this.setReserved(s,true);
		} else {
			_this.h[s] = true;
		}
		var _this1 = this.keysDown;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,false);
		} else {
			_this1.h[s] = false;
		}
		this.upVirtual(s);
	}
	,pressListener: function($char) {
	}
	,__class__: iron_system_Keyboard
});
var iron_system_GamepadStick = $hxClasses["iron.system.GamepadStick"] = function() {
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.lastY = 0.0;
	this.lastX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
iron_system_GamepadStick.__name__ = true;
iron_system_GamepadStick.prototype = {
	__class__: iron_system_GamepadStick
};
var iron_system_Gamepad = $hxClasses["iron.system.Gamepad"] = function(i) {
	this.connects = 0;
	this.num = 0;
	this.connected = false;
	this.rightStick = new iron_system_GamepadStick();
	this.leftStick = new iron_system_GamepadStick();
	this.buttonsFrame = [];
	this.buttonsReleased = [];
	this.buttonsStarted = [];
	this.buttonsDown = [];
	iron_system_VirutalInput.call(this);
	var _g = 0;
	var _g1 = iron_system_Gamepad.buttonsPS;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		this.buttonsDown.push(0.0);
		this.buttonsStarted.push(false);
		this.buttonsReleased.push(false);
	}
	this.num = i;
	this.reset();
	this.connect();
};
iron_system_Gamepad.__name__ = true;
iron_system_Gamepad.__super__ = iron_system_VirutalInput;
iron_system_Gamepad.prototype = $extend(iron_system_VirutalInput.prototype,{
	connect: function() {
		var gamepad = kha_input_Gamepad.get(this.num);
		if(gamepad == null) {
			return;
		}
		this.connected = true;
		gamepad.notify($bind(this,this.axisListener),$bind(this,this.buttonListener));
	}
	,endFrame: function() {
		if(this.buttonsFrame.length > 0) {
			var _g = 0;
			var _g1 = this.buttonsFrame;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				this.buttonsStarted[i] = false;
				this.buttonsReleased[i] = false;
			}
			this.buttonsFrame.splice(0,this.buttonsFrame.length);
		}
		this.leftStick.moved = false;
		this.leftStick.movementX = 0;
		this.leftStick.movementY = 0;
		this.rightStick.moved = false;
		this.rightStick.movementX = 0;
		this.rightStick.movementY = 0;
	}
	,reset: function() {
		var _g1 = 0;
		var _g = this.buttonsDown.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.buttonsDown[i] = 0.0;
			this.buttonsStarted[i] = false;
			this.buttonsReleased[i] = false;
		}
		this.endFrame();
	}
	,buttonIndex: function(button) {
		var _g1 = 0;
		var _g = iron_system_Gamepad.buttonsPS.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(iron_system_Gamepad.buttonsPS[i] == button) {
				return i;
			}
		}
		return 0;
	}
	,down: function(button) {
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,axisListener: function(axis,value) {
		var stick = axis <= 1 ? this.leftStick : this.rightStick;
		if(axis == 0 || axis == 2) {
			stick.x = value;
			stick.movementX = stick.x - stick.lastX;
			stick.lastX = stick.x;
		} else if(axis == 1 || axis == 3) {
			stick.y = axis == 1 ? -value : value;
			stick.movementY = stick.y - stick.lastY;
			stick.lastY = stick.y;
		}
		stick.moved = true;
	}
	,buttonListener: function(button,value) {
		this.buttonsFrame.push(button);
		this.buttonsDown[button] = value;
		if(value > 0) {
			this.buttonsStarted[button] = true;
		} else {
			this.buttonsReleased[button] = true;
		}
		if(value == 0.0) {
			this.upVirtual(iron_system_Gamepad.buttonsPS[button]);
		} else if(value == 1.0) {
			this.downVirtual(iron_system_Gamepad.buttonsPS[button]);
		}
	}
	,__class__: iron_system_Gamepad
});
var iron_system_Sensor = $hxClasses["iron.system.Sensor"] = function() {
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	kha_input_Sensor.get(kha_input_SensorType.Accelerometer).notify($bind(this,this.listener));
};
iron_system_Sensor.__name__ = true;
iron_system_Sensor.prototype = {
	listener: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,__class__: iron_system_Sensor
};
var iron_system_Time = $hxClasses["iron.system.Time"] = function() { };
iron_system_Time.__name__ = true;
iron_system_Time.time = function() {
	return kha_Scheduler.time();
};
iron_system_Time.realTime = function() {
	return kha_Scheduler.realTime();
};
iron_system_Time.update = function() {
	iron_system_Time.realDelta = kha_Scheduler.realTime() - iron_system_Time.last;
	iron_system_Time.last = kha_Scheduler.realTime();
};
var iron_system_Tween = $hxClasses["iron.system.Tween"] = function() { };
iron_system_Tween.__name__ = true;
iron_system_Tween.to = function(anim) {
	anim._time = 0;
	if(anim.ease == null) {
		anim.ease = 0;
	}
	if(anim.target != null && anim.props != null) {
		anim._comps = [];
		anim._x = [];
		anim._y = [];
		anim._z = [];
		anim._w = [];
		var _g = 0;
		var _g1 = Reflect.fields(anim.props);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var val = Reflect.getProperty(anim.target,p);
			if(js_Boot.__instanceof(val,iron_math_Vec4) || js_Boot.__instanceof(val,iron_math_Quat)) {
				anim._comps.push(4);
				anim._x.push(val.x);
				anim._y.push(val.y);
				anim._z.push(val.z);
				anim._w.push(val.w);
			} else {
				anim._comps.push(1);
				anim._x.push(val);
				anim._y.push(0);
				anim._z.push(0);
				anim._w.push(0);
			}
		}
	}
	iron_system_Tween.anims.push(anim);
	if(anim.target != null) {
		iron_system_Tween.map.set(anim.target,anim);
	}
};
iron_system_Tween.timer = function(delay,done) {
	iron_system_Tween.to({ target : null, props : null, duration : 0, delay : delay, done : done});
};
iron_system_Tween.stop = function(target) {
	var anim = iron_system_Tween.map.h[target.__id__];
	if(anim != null) {
		HxOverrides.remove(iron_system_Tween.anims,anim);
	}
};
iron_system_Tween.reset = function() {
	iron_system_Tween.anims = [];
	iron_system_Tween.map = new haxe_ds_ObjectMap();
};
iron_system_Tween.update = function() {
	var d = 0.0166666666666666664;
	var i = iron_system_Tween.anims.length;
	while(i-- > 0 && iron_system_Tween.anims.length > 0) {
		var a = iron_system_Tween.anims[i];
		if(a.delay > 0) {
			a.delay -= d;
			if(a.delay > 0) {
				continue;
			}
		}
		a._time += d;
		if(a.target != null) {
			if(js_Boot.__instanceof(a.target,iron_object_Transform)) {
				a.target.dirty = true;
			}
			var ps = Reflect.fields(a.props);
			var _g1 = 0;
			var _g = ps.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				var p = ps[i1];
				var k = a._time / a.duration;
				if(k > 1) {
					k = 1;
				}
				if(a._comps[i1] == 1) {
					var fromVal = a._x[i1];
					var toVal = Reflect.getProperty(a.props,p);
					var val = fromVal + (toVal - fromVal) * iron_system_Tween.eases[a.ease](k);
					Reflect.setProperty(a.target,p,val);
				} else {
					var _g3 = 0;
					var _g2 = a._comps[i1];
					while(_g3 < _g2) {
						var j = _g3++;
						var fromVal1 = j == 0 ? a._x[i1] : j == 1 ? a._y[i1] : j == 2 ? a._z[i1] : a._w[i1];
						var obj = Reflect.getProperty(a.props,p);
						var toVal1 = Reflect.getProperty(obj,iron_system_Tween.comps[j]);
						var val1 = fromVal1 + (toVal1 - fromVal1) * iron_system_Tween.eases[a.ease](k);
						var t = Reflect.getProperty(a.target,p);
						Reflect.setProperty(t,iron_system_Tween.comps[j],val1);
					}
				}
			}
		}
		if(a.tick != null) {
			a.tick();
		}
		if(a._time >= a.duration) {
			iron_system_Tween.anims.splice(i,1);
			--i;
			if(a.done != null) {
				a.done();
			}
		}
	}
};
iron_system_Tween.easeLinear = function(k) {
	return k;
};
iron_system_Tween.easeExpoOut = function(k) {
	if(k == 1) {
		return 1;
	} else {
		return 1 - Math.pow(2,-10 * k);
	}
};
var js__$Boot_HaxeError = $hxClasses["js._Boot.HaxeError"] = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = $hxClasses["js.Boot"] = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = $hxClasses["js.html.compat.ArrayBuffer"] = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = $hxClasses["js.html.compat.DataView"] = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = $hxClasses["js.html.compat.Float32Array"] = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = $hxClasses["js.html.compat.Uint8Array"] = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var kha_Canvas = $hxClasses["kha.Canvas"] = function() { };
kha_Canvas.__name__ = true;
kha_Canvas.prototype = {
	__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha__$Color_Color_$Impl_$ = $hxClasses["kha._Color.Color_Impl_"] = $hx_exports["kha"]["_Color"]["Color_Impl_"] = {};
kha__$Color_Color_$Impl_$.__name__ = true;
kha__$Color_Color_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha__$Color_Color_$Impl_$.fromValue = function(value) {
	return kha__$Color_Color_$Impl_$._new(value);
};
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha__$Color_Color_$Impl_$._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha__$Color_Color_$Impl_$.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(colorValue);
	} else {
		throw new js__$Boot_HaxeError("Invalid Color string: '" + value + "'");
	}
};
kha__$Color_Color_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_value = function(this1) {
	return this1;
};
kha__$Color_Color_$Impl_$.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha__$Color_Color_$Impl_$.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha__$Color_Color_$Impl_$.get_Bb = function(this1) {
	return this1 & 255;
};
kha__$Color_Color_$Impl_$.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha__$Color_Color_$Impl_$.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha__$Color_Color_$Impl_$.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var kha_FontStyle = $hxClasses["kha.FontStyle"] = function(bold,italic,underlined) {
	this.bold = bold;
	this.italic = italic;
	this.underlined = underlined;
};
kha_FontStyle.__name__ = true;
kha_FontStyle.prototype = {
	getBold: function() {
		return this.bold;
	}
	,getItalic: function() {
		return this.italic;
	}
	,getUnderlined: function() {
		return this.underlined;
	}
	,__class__: kha_FontStyle
};
var kha_Framebuffer = $hxClasses["kha.Framebuffer"] = function(windowId,g1,g2,g4) {
	this.windowId = windowId;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
kha_Framebuffer.__name__ = true;
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g1: function() {
		return this.graphics1;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,get_width: function() {
		return kha_System.windowWidth(this.windowId);
	}
	,get_height: function() {
		return kha_System.windowHeight(this.windowId);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1"}
};
var kha_Resource = $hxClasses["kha.Resource"] = function() { };
kha_Resource.__name__ = true;
kha_Resource.prototype = {
	__class__: kha_Resource
};
var kha_Image = $hxClasses["kha.Image"] = function(texture) {
	this.pixels = null;
	this.bytes = null;
	this.texture_ = texture;
};
kha_Image.__name__ = true;
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported",get_maxSize:"get_maxSize"};
kha_Image.getRenderTargetFormat = function(format) {
	switch(format[1]) {
	case 0:
		return 0;
	case 1:
		return 5;
	case 2:
		return 3;
	case 3:
		return 4;
	case 4:
		return 1;
	case 5:
		return 2;
	case 6:
		return 6;
	}
};
kha_Image.getDepthBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return 24;
	case 2:
		return 24;
	case 3:
		return 24;
	case 4:
		return 32;
	case 5:
		return 16;
	}
};
kha_Image.getStencilBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return -1;
	case 2:
		return 8;
	case 3:
		return 8;
	case 4:
		return 8;
	case 5:
		return 0;
	}
};
kha_Image.getTextureFormat = function(format) {
	switch(format[1]) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 7;
	default:
		return 1;
	}
};
kha_Image._fromTexture = function(texture) {
	return new kha_Image(texture);
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	var readable = true;
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTextureFromBytes(bytes.b.bufferValue,width,height,kha_Image.getTextureFormat(format),readable);
	return image;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	var readable = true;
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTextureFromBytes3D(bytes.b.bufferValue,width,height,depth,kha_Image.getTextureFormat(format),readable);
	return image;
};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTexture(width,height,kha_Image.getTextureFormat(format));
	return image;
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTexture3D(width,height,depth,kha_Image.getTextureFormat(format));
	return image;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.renderTarget_ = Krom.createRenderTarget(width,height,kha_Image.getDepthBufferBits(depthStencil),kha_Image.getRenderTargetFormat(format),kha_Image.getStencilBufferBits(depthStencil),contextId);
	return image;
};
kha_Image.get_maxSize = function() {
	return 4096;
};
kha_Image.get_nonPow2Supported = function() {
	return true;
};
kha_Image.formatByteSize = function(format) {
	switch(format[1]) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	}
};
kha_Image.prototype = {
	isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
		Krom.unloadImage(this);
		this.texture_ = null;
		this.renderTarget_ = null;
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.format == kha_graphics4_TextureFormat.RGBA32 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		Krom.unlockTexture(this.texture_,this.bytes.b.bufferValue);
	}
	,getPixels: function() {
		if(this.renderTarget_ == null) {
			return null;
		}
		if(this.pixels == null) {
			this.pixels = new haxe_io_Bytes(new ArrayBuffer(kha_Image.formatByteSize(this.format) * this.get_width() * this.get_height()));
		}
		Krom.getRenderTargetPixels(this.renderTarget_,this.pixels.b.bufferValue);
		return this.pixels;
	}
	,generateMipmaps: function(levels) {
		if(this.texture_ == null) {
			Krom.generateRenderTargetMipmaps(this.renderTarget_,levels);
		} else {
			Krom.generateTextureMipmaps(this.texture_,levels);
		}
	}
	,setMipmaps: function(mipmaps) {
		Krom.setMipmaps(this.texture_,mipmaps);
	}
	,setDepthStencilFrom: function(image) {
		Krom.setDepthStencilFrom(this.renderTarget_,image.renderTarget_);
	}
	,clear: function(x,y,z,width,height,depth,color) {
		Krom.clearTexture(this.texture_,x,y,z,width,height,depth,color);
	}
	,get_width: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.width;
		}
	}
	,get_height: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.height;
		}
	}
	,get_depth: function() {
		if(this.texture_ != null) {
			return this.texture_.depth;
		} else {
			return 1;
		}
	}
	,get_realWidth: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.realWidth;
		}
	}
	,get_realHeight: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.realHeight;
		}
	}
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_krom_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var kha_AlignedQuad = $hxClasses["kha.AlignedQuad"] = function() {
};
kha_AlignedQuad.__name__ = true;
kha_AlignedQuad.prototype = {
	__class__: kha_AlignedQuad
};
var kha_KravurImage = $hxClasses["kha.KravurImage"] = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var $char = chars[_g];
		++_g;
		$char.yoff += this.baseline;
	}
	this.texture = kha_Image.create(width,height,kha_graphics4_TextureFormat.L8);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g1 = 0;
	var _g2 = height;
	while(_g1 < _g2) {
		var y = _g1++;
		var _g3 = 0;
		var _g21 = width;
		while(_g3 < _g21) {
			var x = _g3++;
			var v = pixels.readU8(pos);
			bytes.b[pos] = v & 255;
			++pos;
		}
	}
	this.texture.unlock();
};
kha_KravurImage.__name__ = true;
kha_KravurImage.prototype = {
	getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.gaps[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g1 = 1;
		var _g = kha_KravurImage.gaps.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			var prevEnd = kha_KravurImage.gaps[i * 2 - 1];
			var start = kha_KravurImage.gaps[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - prevEnd;
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(string) {
		var str = new String(string);
		var width = 0;
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var c = _g1++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g1 = start;
		var _g = start + length;
		while(_g1 < _g) {
			var i = _g1++;
			width += this.getCharWidth(characters[i]);
		}
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = $hxClasses["kha.Kravur"] = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
};
kha_Kravur.__name__ = true;
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes) {
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_Kravur.prototype = {
	_get: function(fontSize,glyphs) {
		if(glyphs == null) {
			glyphs = kha_graphics2_Graphics._glyphs;
		}
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.gaps = [glyphs[0]];
			var next = kha_KravurImage.gaps[0] + 1;
			var _g1 = 1;
			var _g = glyphs.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(glyphs[i] != next) {
					kha_KravurImage.gaps.push(glyphs[i - 1]);
					kha_KravurImage.gaps.push(glyphs[i]);
					next = glyphs[i] + 1;
				} else {
					++next;
				}
			}
			kha_KravurImage.gaps.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = glyphs == null ? fontSize : fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var length = glyphs.length;
			var this1 = new Array(length);
			var baked = this1;
			var _g11 = 0;
			var _g2 = baked.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				baked[i1] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var status = -1;
			while(status < 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,0,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,0);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(fontSize | 0,ascent,descent,lineGap,width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = $hxClasses["kha.LoaderImpl"] = function() { };
kha_LoaderImpl.__name__ = true;
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	done(kha_Image._fromTexture(Krom.loadImage(desc.files[0],readable)));
};
kha_LoaderImpl.getSoundFormats = function() {
	return ["wav","ogg"];
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done) {
	done(new kha_krom_Sound(haxe_io_Bytes.ofData(Krom.loadSound(desc.files[0]))));
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done) {
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done) {
	done(new kha_internal_BytesBlob(haxe_io_Bytes.ofData(Krom.loadBlob(desc.files[0]))));
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	});
};
var kha_TimeTask = $hxClasses["kha.TimeTask"] = function() {
};
kha_TimeTask.__name__ = true;
kha_TimeTask.prototype = {
	__class__: kha_TimeTask
};
var kha_FrameTask = $hxClasses["kha.FrameTask"] = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
kha_FrameTask.__name__ = true;
kha_FrameTask.prototype = {
	__class__: kha_FrameTask
};
var kha_Scheduler = $hxClasses["kha.Scheduler"] = function() { };
kha_Scheduler.__name__ = true;
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g1 = 0;
	var _g = kha_Scheduler.DIF_COUNT;
	while(_g1 < _g) {
		var i = _g1++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_System.get_vsync();
	var hz = kha_System.get_refreshRate();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g1 = 0;
	var _g = kha_Scheduler.DIF_COUNT;
	while(_g1 < _g) {
		var i = _g1++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g2 = 0;
		var _g11 = kha_Scheduler.timeTasks;
		while(_g2 < _g11.length) {
			var timeTask = _g11[_g2];
			++_g2;
			timeTask.paused = false;
		}
		var _g3 = 0;
		var _g12 = kha_Scheduler.frameTasks;
		while(_g3 < _g12.length) {
			var frameTask = _g12[_g3];
			++_g3;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasksBack = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			var sinceStart = time - timeTask.start;
			var times = Math.ceil(sinceStart / timeTask.period);
			timeTask.next = timeTask.start + times * timeTask.period;
		}
	}
};
kha_Scheduler.warp = function(time) {
	if(time < kha_Scheduler.lastTime) {
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.outdatedTimeTasks);
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.timeTasks);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next >= time) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g2 = 0;
		var _g11 = kha_Scheduler.timeTasksScratchpad;
		while(_g2 < _g11.length) {
			var task1 = _g11[_g2];
			++_g2;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		var _g3 = 0;
		var _g12 = kha_Scheduler.timeTasksScratchpad;
		while(_g3 < _g12.length) {
			var task2 = _g12[_g3];
			++_g3;
			kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,task2);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	} else if(time > kha_Scheduler.lastTime) {
		kha_Scheduler.startTime -= time - kha_Scheduler.lastTime;
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.executeTimeTasks(time);
	}
};
kha_Scheduler.executeFrame = function() {
	var now = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.current;
	if(delta >= 0) {
		if(kha_network_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var realdif = kha_Scheduler.onedifhz;
				while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
				delta = realdif;
				var _g1 = 0;
				var _g = kha_Scheduler.DIF_COUNT - 2;
				while(_g1 < _g) {
					var i = _g1++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g11 = 0;
				var _g2 = kha_Scheduler.DIF_COUNT - 1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g12 = 0;
				var _g3 = kha_Scheduler.DIF_COUNT;
				while(_g12 < _g3) {
					var i2 = _g12++;
					next += kha_Scheduler.deltas[i2];
				}
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = frameEnd;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.current = frameEnd;
		}
		var _g4 = 0;
		var _g13 = kha_Scheduler.pausedTimeTasks;
		while(_g4 < _g13.length) {
			var pausedTask = _g13[_g4];
			++_g4;
			pausedTask.next += delta;
		}
		if(kha_Scheduler.stopped) {
			var _g5 = 0;
			var _g14 = kha_Scheduler.timeTasks;
			while(_g5 < _g14.length) {
				var timeTask = _g14[_g5];
				++_g5;
				timeTask.next += delta;
			}
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g6 = 0;
		var _g15 = kha_Scheduler.outdatedTimeTasks;
		while(_g6 < _g15.length) {
			var task = _g15[_g6];
			++_g6;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g7 = 0;
		var _g16 = kha_Scheduler.timeTasksScratchpad;
		while(_g7 < _g16.length) {
			var task1 = _g16[_g7];
			++_g7;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.sortFrameTasks();
	var _g8 = 0;
	var _g17 = kha_Scheduler.frameTasks;
	while(_g8 < _g17.length) {
		var frameTask = _g17[_g8];
		++_g8;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g9 = 0;
	var _g18 = kha_Scheduler.frameTasks;
	while(_g9 < _g18.length) {
		var frameTask1 = _g18[_g9];
		++_g9;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g11 = 0;
	var _g2 = kha_Scheduler.DIF_COUNT;
	while(_g11 < _g2) {
		var i = _g11++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g2 = 0;
	var _g11 = kha_Scheduler.pausedTimeTasks;
	while(_g2 < _g11.length) {
		var timeTask1 = _g11[_g2];
		++_g2;
		if(timeTask1.id == id) {
			return timeTask1;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g2 = 0;
	var _g11 = kha_Scheduler.timeTasksScratchpad;
	while(_g2 < _g11.length) {
		var timeTask1 = _g11[_g2];
		++_g2;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask1);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g1 = 0;
	var _g = list.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_ScreenRotation = $hxClasses["kha.ScreenRotation"] = { __ename__ : true, __constructs__ : ["RotationNone","Rotation90","Rotation180","Rotation270"] };
kha_ScreenRotation.RotationNone = ["RotationNone",0];
kha_ScreenRotation.RotationNone.toString = $estr;
kha_ScreenRotation.RotationNone.__enum__ = kha_ScreenRotation;
kha_ScreenRotation.Rotation90 = ["Rotation90",1];
kha_ScreenRotation.Rotation90.toString = $estr;
kha_ScreenRotation.Rotation90.__enum__ = kha_ScreenRotation;
kha_ScreenRotation.Rotation180 = ["Rotation180",2];
kha_ScreenRotation.Rotation180.toString = $estr;
kha_ScreenRotation.Rotation180.__enum__ = kha_ScreenRotation;
kha_ScreenRotation.Rotation270 = ["Rotation270",3];
kha_ScreenRotation.Rotation270.toString = $estr;
kha_ScreenRotation.Rotation270.__enum__ = kha_ScreenRotation;
var kha_Shaders = $hxClasses["kha.Shaders"] = function() { };
kha_Shaders.__name__ = true;
kha_Shaders.init = function() {
	var blobs = [];
	var _g = 0;
	while(_g < 1) {
		var i = _g++;
		var data = Reflect.field(kha_Shaders,"sdfgen_fragData" + i);
		var bytes = haxe_Unserializer.run(data);
		blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	}
	kha_Shaders.sdfgen_frag = new kha_graphics4_FragmentShader(blobs,["sdfgen.frag.glsl"]);
	var blobs1 = [];
	var _g1 = 0;
	while(_g1 < 1) {
		var i1 = _g1++;
		var data1 = Reflect.field(kha_Shaders,"sdfgen_vertData" + i1);
		var bytes1 = haxe_Unserializer.run(data1);
		blobs1.push(kha_internal_BytesBlob.fromBytes(bytes1));
	}
	kha_Shaders.sdfgen_vert = new kha_graphics4_VertexShader(blobs1,["sdfgen.vert.glsl"]);
	var blobs2 = [];
	var _g2 = 0;
	while(_g2 < 1) {
		var i2 = _g2++;
		var data2 = Reflect.field(kha_Shaders,"painter_colored_fragData" + i2);
		var bytes2 = haxe_Unserializer.run(data2);
		blobs2.push(kha_internal_BytesBlob.fromBytes(bytes2));
	}
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs2,["painter-colored.frag.glsl"]);
	var blobs3 = [];
	var _g3 = 0;
	while(_g3 < 1) {
		var i3 = _g3++;
		var data3 = Reflect.field(kha_Shaders,"painter_colored_vertData" + i3);
		var bytes3 = haxe_Unserializer.run(data3);
		blobs3.push(kha_internal_BytesBlob.fromBytes(bytes3));
	}
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs3,["painter-colored.vert.glsl"]);
	var blobs4 = [];
	var _g4 = 0;
	while(_g4 < 1) {
		var i4 = _g4++;
		var data4 = Reflect.field(kha_Shaders,"painter_image_vertData" + i4);
		var bytes4 = haxe_Unserializer.run(data4);
		blobs4.push(kha_internal_BytesBlob.fromBytes(bytes4));
	}
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs4,["painter-image.vert.glsl"]);
	var blobs5 = [];
	var _g5 = 0;
	while(_g5 < 1) {
		var i5 = _g5++;
		var data5 = Reflect.field(kha_Shaders,"painter_image_fragData" + i5);
		var bytes5 = haxe_Unserializer.run(data5);
		blobs5.push(kha_internal_BytesBlob.fromBytes(bytes5));
	}
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs5,["painter-image.frag.glsl"]);
	var blobs6 = [];
	var _g6 = 0;
	while(_g6 < 1) {
		var i6 = _g6++;
		var data6 = Reflect.field(kha_Shaders,"painter_text_fragData" + i6);
		var bytes6 = haxe_Unserializer.run(data6);
		blobs6.push(kha_internal_BytesBlob.fromBytes(bytes6));
	}
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs6,["painter-text.frag.glsl"]);
	var blobs7 = [];
	var _g7 = 0;
	while(_g7 < 1) {
		var i7 = _g7++;
		var data7 = Reflect.field(kha_Shaders,"painter_text_vertData" + i7);
		var bytes7 = haxe_Unserializer.run(data7);
		blobs7.push(kha_internal_BytesBlob.fromBytes(bytes7));
	}
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs7,["painter-text.vert.glsl"]);
	var blobs8 = [];
	var _g8 = 0;
	while(_g8 < 1) {
		var i8 = _g8++;
		var data8 = Reflect.field(kha_Shaders,"painter_video_vertData" + i8);
		var bytes8 = haxe_Unserializer.run(data8);
		blobs8.push(kha_internal_BytesBlob.fromBytes(bytes8));
	}
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs8,["painter-video.vert.glsl"]);
	var blobs9 = [];
	var _g9 = 0;
	while(_g9 < 1) {
		var i9 = _g9++;
		var data9 = Reflect.field(kha_Shaders,"painter_video_fragData" + i9);
		var bytes9 = haxe_Unserializer.run(data9);
		blobs9.push(kha_internal_BytesBlob.fromBytes(bytes9));
	}
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs9,["painter-video.frag.glsl"]);
};
var kha_Sound = $hxClasses["kha.Sound"] = function() {
};
kha_Sound.__name__ = true;
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	uncompress: function(done) {
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			var this1 = new Array(count * 2);
			this.uncompressedData = this1;
			var _g1 = 0;
			var _g = count;
			while(_g1 < _g) {
				var i = _g1++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			var this2 = new Array(count);
			this.uncompressedData = this2;
			var _g11 = 0;
			var _g2 = count;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.uncompressedData[i1] = soundBytes.getFloat(i1 * 4);
			}
		}
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_System = $hxClasses["kha.System"] = function() { };
kha_System.__name__ = true;
kha_System.__properties__ = {get_systemId:"get_systemId",get_refreshRate:"get_refreshRate",get_vsync:"get_vsync",get_screenRotation:"get_screenRotation",get_time:"get_time",get_title:"get_title"};
kha_System.init = function(options,callback) {
	if(options.title == null) {
		options.title = "Kha";
	}
	if(options.width == null) {
		options.width = 800;
	}
	if(options.height == null) {
		options.height = 600;
	}
	if(options.samplesPerPixel == null) {
		options.samplesPerPixel = 1;
	}
	if(options.vSync == null) {
		options.vSync = true;
	}
	if(options.windowMode == null) {
		options.windowMode = kha_WindowMode.Window;
	}
	if(options.resizable == null) {
		options.resizable = false;
	}
	if(options.maximizable == null) {
		options.maximizable = false;
	}
	if(options.minimizable == null) {
		options.minimizable = true;
	}
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.initEx = function(title,options,windowCallback,callback) {
	kha_System.theTitle = title;
	kha_SystemImpl.initEx(title,options,windowCallback,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	while(id >= kha_System.renderListeners.length) kha_System.renderListeners.push([]);
	kha_System.renderListeners[id].push(listener);
};
kha_System.removeRenderListener = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	HxOverrides.remove(kha_System.renderListeners[id],listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.render = function(id,framebuffer) {
	if(kha_System.renderListeners.length == 0) {
		return;
	}
	var _g = 0;
	var _g1 = kha_System.renderListeners[id];
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffer);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function(windowId) {
	if(windowId == null) {
		windowId = 0;
	}
	return kha_SystemImpl.windowWidth(windowId);
};
kha_System.windowHeight = function(windowId) {
	if(windowId == null) {
		windowId = 0;
	}
	return kha_SystemImpl.windowHeight(windowId);
};
kha_System.screenDpi = function() {
	return kha_SystemImpl.screenDpi();
};
kha_System.get_screenRotation = function() {
	return kha_SystemImpl.getScreenRotation();
};
kha_System.get_vsync = function() {
	return kha_SystemImpl.getVsync();
};
kha_System.get_refreshRate = function() {
	return kha_SystemImpl.getRefreshRate();
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.requestShutdown = function() {
	kha_SystemImpl.requestShutdown();
};
kha_System.changeResolution = function(width,height) {
	kha_SystemImpl.changeResolution(width,height);
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
var kha_SystemImpl = $hxClasses["kha.SystemImpl"] = function() { };
kha_SystemImpl.__name__ = true;
kha_SystemImpl.renderCallback = function() {
	kha_Scheduler.executeFrame();
	kha_System.render(0,kha_SystemImpl.framebuffer);
};
kha_SystemImpl.dropFilesCallback = function(filePath) {
	kha_System.dropFiles(filePath);
};
kha_SystemImpl.keyboardDownCallback = function(code) {
	kha_SystemImpl.keyboard.sendDownEvent(code);
};
kha_SystemImpl.keyboardUpCallback = function(code) {
	kha_SystemImpl.keyboard.sendUpEvent(code);
};
kha_SystemImpl.keyboardPressCallback = function(charCode) {
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCharCode(charCode));
};
kha_SystemImpl.mouseDownCallback = function(button,x,y) {
	kha_SystemImpl.mouse.sendDownEvent(0,button,x,y);
};
kha_SystemImpl.mouseUpCallback = function(button,x,y) {
	kha_SystemImpl.mouse.sendUpEvent(0,button,x,y);
};
kha_SystemImpl.mouseMoveCallback = function(x,y,mx,my) {
	kha_SystemImpl.mouse.sendMoveEvent(0,x,y,mx,my);
};
kha_SystemImpl.mouseWheelCallback = function(delta) {
	kha_SystemImpl.mouse.sendWheelEvent(0,delta);
};
kha_SystemImpl.gamepadAxisCallback = function(gamepad,axis,value) {
	kha_SystemImpl.gamepads[gamepad].sendAxisEvent(axis,value);
};
kha_SystemImpl.gamepadButtonCallback = function(gamepad,button,value) {
	kha_SystemImpl.gamepads[gamepad].sendButtonEvent(button,value);
};
kha_SystemImpl.audioCallback = function(samples) {
	var this1 = new Array(samples);
	kha_SystemImpl.audioOutputData = this1;
	kha_audio2_Audio._callCallback(samples);
	var _g1 = 0;
	var _g = samples;
	while(_g1 < _g) {
		var i = _g1++;
		var value = kha_audio2_Audio._readSample();
		kha_SystemImpl.audioOutputData[i] = value;
	}
	var _g11 = 0;
	var _g2 = samples;
	while(_g11 < _g2) {
		var i1 = _g11++;
		Krom.writeAudioBuffer(kha_SystemImpl.audioOutputData[i1]);
	}
};
kha_SystemImpl.init = function(options,callback) {
	Krom.init(options.title,options.width,options.height,options.samplesPerPixel,options.vSync,kha_SystemImpl.translateWindowMode(options.windowMode),options.resizable,options.maximizable,options.minimizable);
	kha_SystemImpl.start = Krom.getTime();
	haxe_Log.trace = function(v,infos) {
		Krom.log(v);
	};
	kha_Scheduler.init();
	kha_Shaders.init();
	var g4 = new kha_krom_Graphics();
	kha_SystemImpl.framebuffer = new kha_Framebuffer(0,null,null,g4);
	kha_SystemImpl.framebuffer.init(new kha_graphics2_Graphics1(kha_SystemImpl.framebuffer),new kha_graphics4_Graphics2(kha_SystemImpl.framebuffer),g4);
	Krom.setCallback(kha_SystemImpl.renderCallback);
	Krom.setDropFilesCallback(kha_SystemImpl.dropFilesCallback);
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.gamepads = [];
	var _g1 = 0;
	var _g = kha_SystemImpl.maxGamepads;
	while(_g1 < _g) {
		var i = _g1++;
		kha_SystemImpl.gamepads[i] = new kha_input_Gamepad(i);
	}
	Krom.setKeyboardDownCallback(kha_SystemImpl.keyboardDownCallback);
	Krom.setKeyboardUpCallback(kha_SystemImpl.keyboardUpCallback);
	Krom.setKeyboardPressCallback(kha_SystemImpl.keyboardPressCallback);
	Krom.setMouseDownCallback(kha_SystemImpl.mouseDownCallback);
	Krom.setMouseUpCallback(kha_SystemImpl.mouseUpCallback);
	Krom.setMouseMoveCallback(kha_SystemImpl.mouseMoveCallback);
	Krom.setMouseWheelCallback(kha_SystemImpl.mouseWheelCallback);
	Krom.setGamepadAxisCallback(kha_SystemImpl.gamepadAxisCallback);
	Krom.setGamepadButtonCallback(kha_SystemImpl.gamepadButtonCallback);
	kha_audio2_Audio._init();
	kha_audio2_Audio1._init();
	Krom.setAudioCallback(kha_SystemImpl.audioCallback);
	kha_Scheduler.start();
	callback();
};
kha_SystemImpl.initEx = function(title,options,windowCallback,callback) {
};
kha_SystemImpl.translateWindowMode = function(value) {
	if(value == null) {
		return 0;
	}
	switch(value[1]) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	}
};
kha_SystemImpl.getScreenRotation = function() {
	return kha_ScreenRotation.RotationNone;
};
kha_SystemImpl.getTime = function() {
	return Krom.getTime() - kha_SystemImpl.start;
};
kha_SystemImpl.windowWidth = function(id) {
	return Krom.windowWidth(id);
};
kha_SystemImpl.windowHeight = function(id) {
	return Krom.windowHeight(id);
};
kha_SystemImpl.screenDpi = function() {
	return Krom.screenDpi();
};
kha_SystemImpl.getVsync = function() {
	return true;
};
kha_SystemImpl.getRefreshRate = function() {
	return 60;
};
kha_SystemImpl.getSystemId = function() {
	return Krom.systemId();
};
kha_SystemImpl.requestShutdown = function() {
	Krom.requestShutdown();
};
kha_SystemImpl.getMouse = function(num) {
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.lockMouse = function() {
	if(!kha_SystemImpl.isMouseLocked()) {
		Krom.lockMouse();
		var _g = 0;
		var _g1 = kha_SystemImpl.mouseLockListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(kha_SystemImpl.isMouseLocked()) {
		Krom.unlockMouse();
		var _g = 0;
		var _g1 = kha_SystemImpl.mouseLockListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
	}
};
kha_SystemImpl.canLockMouse = function() {
	return Krom.canLockMouse();
};
kha_SystemImpl.isMouseLocked = function() {
	return Krom.isMouseLocked();
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	if(kha_SystemImpl.canLockMouse() && func != null) {
		kha_SystemImpl.mouseLockListeners.push(func);
	}
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	if(kha_SystemImpl.canLockMouse() && func != null) {
		HxOverrides.remove(kha_SystemImpl.mouseLockListeners,func);
	}
};
kha_SystemImpl.unload = function() {
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return false;
};
kha_SystemImpl.isFullscreen = function() {
	return false;
};
kha_SystemImpl.requestFullscreen = function() {
};
kha_SystemImpl.exitFullscreen = function() {
};
kha_SystemImpl.changeResolution = function(width,height) {
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
};
kha_SystemImpl.getGamepadId = function(index) {
	return "unkown";
};
kha_SystemImpl.prototype = {
	notifyOfFullscreenChange: function(func,error) {
	}
	,removeFromFullscreenChange: function(func,error) {
	}
	,__class__: kha_SystemImpl
};
var kha_Video = $hxClasses["kha.Video"] = function() {
};
kha_Video.__name__ = true;
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
	,__properties__: {set_position:"set_position",get_position:"get_position"}
};
var kha_WindowMode = $hxClasses["kha.WindowMode"] = { __ename__ : true, __constructs__ : ["Window","BorderlessWindow","Fullscreen"] };
kha_WindowMode.Window = ["Window",0];
kha_WindowMode.Window.toString = $estr;
kha_WindowMode.Window.__enum__ = kha_WindowMode;
kha_WindowMode.BorderlessWindow = ["BorderlessWindow",1];
kha_WindowMode.BorderlessWindow.toString = $estr;
kha_WindowMode.BorderlessWindow.__enum__ = kha_WindowMode;
kha_WindowMode.Fullscreen = ["Fullscreen",2];
kha_WindowMode.Fullscreen.toString = $estr;
kha_WindowMode.Fullscreen.__enum__ = kha_WindowMode;
var kha_Position = $hxClasses["kha.Position"] = { __ename__ : true, __constructs__ : ["Center","Fixed"] };
kha_Position.Center = ["Center",0];
kha_Position.Center.toString = $estr;
kha_Position.Center.__enum__ = kha_Position;
kha_Position.Fixed = function(v) { var $x = ["Fixed",1,v]; $x.__enum__ = kha_Position; $x.toString = $estr; return $x; };
var kha_TargetDisplay = $hxClasses["kha.TargetDisplay"] = { __ename__ : true, __constructs__ : ["Primary","ById"] };
kha_TargetDisplay.Primary = ["Primary",0];
kha_TargetDisplay.Primary.toString = $estr;
kha_TargetDisplay.Primary.__enum__ = kha_TargetDisplay;
kha_TargetDisplay.ById = function(id) { var $x = ["ById",1,id]; $x.__enum__ = kha_TargetDisplay; $x.toString = $estr; return $x; };
var kha_RendererOptions = $hxClasses["kha.RendererOptions"] = function(textureFormat,depthStencilFormat,samplesPerPixel) {
	this.textureFormat = textureFormat;
	this.depthStencilFormat = depthStencilFormat;
	this.samplesPerPixel = samplesPerPixel;
};
kha_RendererOptions.__name__ = true;
kha_RendererOptions.prototype = {
	__class__: kha_RendererOptions
};
var kha_WindowedModeOptions = $hxClasses["kha.WindowedModeOptions"] = function(minimizable,maximizable,resizable) {
	this.minimizable = minimizable;
	this.maximizable = maximizable;
	this.resizable = resizable;
};
kha_WindowedModeOptions.__name__ = true;
kha_WindowedModeOptions.prototype = {
	__class__: kha_WindowedModeOptions
};
var kha_WindowOptions = $hxClasses["kha.WindowOptions"] = function(width,height,mode,title,x,y,targetDisplay,rendererOptions,windowedModeOptions) {
	this.width = width;
	this.height = height;
	this.mode = mode;
	this.title = title;
	this.x = x;
	this.y = y;
	this.targetDisplay = targetDisplay;
	this.rendererOptions = rendererOptions;
	this.windowedModeOptions = windowedModeOptions;
};
kha_WindowOptions.__name__ = true;
kha_WindowOptions.prototype = {
	__class__: kha_WindowOptions
};
var kha_arrays__$Float32Array_Float32Array_$Impl_$ = $hxClasses["kha.arrays._Float32Array.Float32Array_Impl_"] = {};
kha_arrays__$Float32Array_Float32Array_$Impl_$.__name__ = true;
kha_arrays__$Float32Array_Float32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Float32Array_Float32Array_$Impl_$._new = function(elements) {
	var this1 = new Float32Array(elements);
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Uint32Array_Uint32Array_$Impl_$ = $hxClasses["kha.arrays._Uint32Array.Uint32Array_Impl_"] = {};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__name__ = true;
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$._new = function(elements) {
	var this1 = new Uint32Array(elements);
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_audio1_AudioChannel = $hxClasses["kha.audio1.AudioChannel"] = function() { };
kha_audio1_AudioChannel.__name__ = true;
kha_audio1_AudioChannel.prototype = {
	__class__: kha_audio1_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Audio = $hxClasses["kha.audio2.Audio"] = function() { };
kha_audio2_Audio.__name__ = true;
kha_audio2_Audio._init = function() {
	var bufferSize = 2048;
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(bufferSize * 4,2,44100);
};
kha_audio2_Audio._callCallback = function(samples) {
	if(kha_audio2_Audio.buffer == null) {
		return;
	}
	if(kha_audio2_Audio.audioCallback != null) {
		kha_audio2_Audio.audioCallback(samples,kha_audio2_Audio.buffer);
	} else {
		var _g1 = 0;
		var _g = samples;
		while(_g1 < _g) {
			var i = _g1++;
			kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.writeLocation] = 0;
			kha_audio2_Audio.buffer.writeLocation += 1;
			if(kha_audio2_Audio.buffer.writeLocation >= kha_audio2_Audio.buffer.size) {
				kha_audio2_Audio.buffer.writeLocation = 0;
			}
		}
	}
};
kha_audio2_Audio._readSample = function() {
	if(kha_audio2_Audio.buffer == null) {
		return 0;
	}
	var value = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
	kha_audio2_Audio.buffer.readLocation += 1;
	if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
		kha_audio2_Audio.buffer.readLocation = 0;
	}
	return value;
};
kha_audio2_Audio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return null;
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return null;
};
var kha_audio2_Audio1 = $hxClasses["kha.audio2.Audio1"] = function() { };
kha_audio2_Audio1.__name__ = true;
kha_audio2_Audio1._init = function() {
	var this1 = new Array(16);
	kha_audio2_Audio1.soundChannels = this1;
	var this2 = new Array(16);
	kha_audio2_Audio1.streamChannels = this2;
	var this3 = new Array(16);
	kha_audio2_Audio1.internalSoundChannels = this3;
	var this4 = new Array(16);
	kha_audio2_Audio1.internalStreamChannels = this4;
	var this5 = new Array(512);
	kha_audio2_Audio1.sampleCache1 = this5;
	var this6 = new Array(512);
	kha_audio2_Audio1.sampleCache2 = this6;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samples,buffer) {
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		var this1 = new Array(samples);
		kha_audio2_Audio1.sampleCache1 = this1;
		var this2 = new Array(samples);
		kha_audio2_Audio1.sampleCache2 = this2;
	}
	var _g1 = 0;
	var _g = samples;
	while(_g1 < _g) {
		var i = _g1++;
		kha_audio2_Audio1.sampleCache2[i] = 0;
	}
	var _g2 = 0;
	while(_g2 < 16) {
		var i1 = _g2++;
		kha_audio2_Audio1.internalSoundChannels[i1] = kha_audio2_Audio1.soundChannels[i1];
	}
	var _g3 = 0;
	while(_g3 < 16) {
		var i2 = _g3++;
		kha_audio2_Audio1.internalStreamChannels[i2] = kha_audio2_Audio1.streamChannels[i2];
	}
	var _g4 = 0;
	var _g11 = kha_audio2_Audio1.internalSoundChannels;
	while(_g4 < _g11.length) {
		var channel = _g11[_g4];
		++_g4;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g31 = 0;
		var _g21 = samples;
		while(_g31 < _g21) {
			var i3 = _g31++;
			var _g41 = i3;
			var _g5 = kha_audio2_Audio1.sampleCache2;
			var val = kha_audio2_Audio1.sampleCache1[i3] * channel.get_volume();
			_g5[_g41] = _g5[_g41] + val;
		}
	}
	var _g6 = 0;
	var _g12 = kha_audio2_Audio1.internalStreamChannels;
	while(_g6 < _g12.length) {
		var channel1 = _g12[_g6];
		++_g6;
		if(channel1 == null || channel1.get_finished()) {
			continue;
		}
		channel1.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g32 = 0;
		var _g22 = samples;
		while(_g32 < _g22) {
			var i4 = _g32++;
			var _g42 = i4;
			var _g51 = kha_audio2_Audio1.sampleCache2;
			var val1 = kha_audio2_Audio1.sampleCache1[i4] * channel1.get_volume();
			_g51[_g42] = _g51[_g42] + val1;
		}
	}
	var _g13 = 0;
	var _g7 = samples;
	while(_g13 < _g7) {
		var i5 = _g13++;
		var a = kha_audio2_Audio1.sampleCache2[i5];
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data[buffer.writeLocation] = a1 > -1.0 ? a1 : -1.0;
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			channel = new kha_audio2_AudioChannel(loop);
			channel.data = sound.uncompressedData;
			kha_audio2_Audio1.soundChannels[i] = channel;
			break;
		}
	}
	return channel;
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished() || kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = null;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
			kha_audio2_Audio1.streamChannels[i] = channel;
			break;
		}
	}
	return channel;
};
var kha_audio2_AudioChannel = $hxClasses["kha.audio2.AudioChannel"] = function(looping) {
	this.paused = false;
	this.looping = looping;
	this.myVolume = 1;
	this.myPosition = 0;
};
kha_audio2_AudioChannel.__name__ = true;
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.prototype = {
	nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				samples[i] = 0;
			}
			return;
		}
		var w_ptr = 0;
		var chk_ptr = 0;
		while(w_ptr < length) {
			var addressable_data = this.data.length - this.myPosition;
			var next_chunk = addressable_data < length - w_ptr ? addressable_data : length - w_ptr;
			while(chk_ptr < next_chunk) {
				samples[w_ptr] = this.data[this.myPosition];
				++this.myPosition;
				++chk_ptr;
				++w_ptr;
			}
			if(!this.looping) {
				break;
			} else {
				chk_ptr = 0;
				if(this.myPosition >= this.data.length) {
					this.myPosition = 0;
				}
			}
		}
		while(w_ptr < length) {
			samples[w_ptr] = 0;
			++w_ptr;
		}
	}
	,play: function() {
		this.paused = false;
		if(this.get_finished()) {
			this.myPosition = 0;
			kha_audio2_Audio1._playAgain(this);
		}
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = this.data.length;
	}
	,get_length: function() {
		return this.data.length / 44100 / 2;
	}
	,get_position: function() {
		return this.myPosition / 44100 / 2;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.myPosition >= this.data.length;
	}
	,__class__: kha_audio2_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Buffer = $hxClasses["kha.audio2.Buffer"] = function(size,channels,samplesPerSecond) {
	this.size = size;
	var this1 = new Array(size);
	this.data = this1;
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
kha_audio2_Buffer.__name__ = true;
kha_audio2_Buffer.prototype = {
	__class__: kha_audio2_Buffer
};
var kha_audio2_StreamChannel = $hxClasses["kha.audio2.StreamChannel"] = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
kha_audio2_StreamChannel.__name__ = true;
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				samples[i] = 0;
			}
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g11 = count;
			var _g2 = length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				samples[i1] = 0;
			}
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_ogg_tools_Crc32 = $hxClasses["kha.audio2.ogg.tools.Crc32"] = function() { };
kha_audio2_ogg_tools_Crc32.__name__ = true;
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	kha_audio2_ogg_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		var _g1 = 0;
		while(_g1 < 8) {
			var j = _g1++;
			s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		}
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,$byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[$byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = $hxClasses["kha.audio2.ogg.tools.MathTools"] = function() { };
kha_audio2_ogg_tools_MathTools.__name__ = true;
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = $hxClasses["kha.audio2.ogg.tools.Mdct"] = function() { };
kha_audio2_ogg_tools_Mdct.__name__ = true;
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var this1 = new Array(n2);
	var buf2 = this1;
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	var eStopOffset = n2;
	while(eOffset != eStopOffset) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var u = buffer;
	var v = buf2;
	var aaOffset1 = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset1 >= 0) {
		var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
		var v40_20 = v[eOffset0] - v[eOffset1];
		u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
		u[dOffset0] = v[eOffset0] + v[eOffset1];
		u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
		u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
		v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
		v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
		u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
		u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
		u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
		u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
		aaOffset1 -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var i_off = n2 - 1 - n4 * 0;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + -1] - u[eeOffset2 + -1];
		var _g = eeOffset0;
		var _g1 = u;
		_g1[_g] = _g1[_g] + u[eeOffset2];
		var _g2 = eeOffset0 + -1;
		var _g11 = u;
		_g11[_g2] = _g11[_g2] + u[eeOffset2 + -1];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + -2] - u[eeOffset2 + -2];
		k01_21 = u[eeOffset0 + -3] - u[eeOffset2 + -3];
		var _g3 = eeOffset0 + -2;
		var _g12 = u;
		_g12[_g3] = _g12[_g3] + u[eeOffset2 + -2];
		var _g4 = eeOffset0 + -3;
		var _g13 = u;
		_g13[_g4] = _g13[_g4] + u[eeOffset2 + -3];
		u[eeOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + -4] - u[eeOffset2 + -4];
		k01_21 = u[eeOffset0 + -5] - u[eeOffset2 + -5];
		var _g5 = eeOffset0 + -4;
		var _g14 = u;
		_g14[_g5] = _g14[_g5] + u[eeOffset2 + -4];
		var _g6 = eeOffset0 + -5;
		var _g15 = u;
		_g15[_g6] = _g15[_g6] + u[eeOffset2 + -5];
		u[eeOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + -6] - u[eeOffset2 + -6];
		k01_21 = u[eeOffset0 + -7] - u[eeOffset2 + -7];
		var _g7 = eeOffset0 + -6;
		var _g16 = u;
		_g16[_g7] = _g16[_g7] + u[eeOffset2 + -6];
		var _g8 = eeOffset0 + -7;
		var _g17 = u;
		_g17[_g8] = _g17[_g8] + u[eeOffset2 + -7];
		u[eeOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var i_off1 = n2 - 1 - n4;
	var eeOffset01 = i_off1;
	var eeOffset21 = i_off1 + -(n >> 3);
	var aOffset1 = 0;
	var i1 = (n >> 4 >> 2) + 1;
	while(--i1 > 0) {
		var k00_201 = u[eeOffset01] - u[eeOffset21];
		var k01_211 = u[eeOffset01 + -1] - u[eeOffset21 + -1];
		var _g9 = eeOffset01;
		var _g18 = u;
		_g18[_g9] = _g18[_g9] + u[eeOffset21];
		var _g10 = eeOffset01 + -1;
		var _g19 = u;
		_g19[_g10] = _g19[_g10] + u[eeOffset21 + -1];
		u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -1] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + -2] - u[eeOffset21 + -2];
		k01_211 = u[eeOffset01 + -3] - u[eeOffset21 + -3];
		var _g20 = eeOffset01 + -2;
		var _g110 = u;
		_g110[_g20] = _g110[_g20] + u[eeOffset21 + -2];
		var _g21 = eeOffset01 + -3;
		var _g111 = u;
		_g111[_g21] = _g111[_g21] + u[eeOffset21 + -3];
		u[eeOffset21 + -2] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -3] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + -4] - u[eeOffset21 + -4];
		k01_211 = u[eeOffset01 + -5] - u[eeOffset21 + -5];
		var _g22 = eeOffset01 + -4;
		var _g112 = u;
		_g112[_g22] = _g112[_g22] + u[eeOffset21 + -4];
		var _g23 = eeOffset01 + -5;
		var _g113 = u;
		_g113[_g23] = _g113[_g23] + u[eeOffset21 + -5];
		u[eeOffset21 + -4] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -5] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + -6] - u[eeOffset21 + -6];
		k01_211 = u[eeOffset01 + -7] - u[eeOffset21 + -7];
		var _g24 = eeOffset01 + -6;
		var _g114 = u;
		_g114[_g24] = _g114[_g24] + u[eeOffset21 + -6];
		var _g25 = eeOffset01 + -7;
		var _g115 = u;
		_g115[_g25] = _g115[_g25] + u[eeOffset21 + -7];
		u[eeOffset21 + -6] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -7] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		eeOffset01 -= 8;
		eeOffset21 -= 8;
	}
	var d0 = n2 - 1 - n8 * 0;
	var aOffset2 = 0;
	var eOffset01 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i2 = (n >> 5 >> 2) + 1;
	while(--i2 > 0) {
		var k00_202 = u[eOffset01] - u[eOffset2];
		var k01_212 = u[eOffset01 + -1] - u[eOffset2 + -1];
		var _g26 = eOffset01;
		var _g116 = u;
		_g116[_g26] = _g116[_g26] + u[eOffset2];
		var _g27 = eOffset01 + -1;
		var _g117 = u;
		_g117[_g27] = _g117[_g27] + u[eOffset2 + -1];
		u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -1] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + -2] - u[eOffset2 + -2];
		k01_212 = u[eOffset01 + -3] - u[eOffset2 + -3];
		var _g28 = eOffset01 + -2;
		var _g118 = u;
		_g118[_g28] = _g118[_g28] + u[eOffset2 + -2];
		var _g29 = eOffset01 + -3;
		var _g119 = u;
		_g119[_g29] = _g119[_g29] + u[eOffset2 + -3];
		u[eOffset2 + -2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -3] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + -4] - u[eOffset2 + -4];
		k01_212 = u[eOffset01 + -5] - u[eOffset2 + -5];
		var _g30 = eOffset01 + -4;
		var _g120 = u;
		_g120[_g30] = _g120[_g30] + u[eOffset2 + -4];
		var _g31 = eOffset01 + -5;
		var _g121 = u;
		_g121[_g31] = _g121[_g31] + u[eOffset2 + -5];
		u[eOffset2 + -4] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -5] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + -6] - u[eOffset2 + -6];
		k01_212 = u[eOffset01 + -7] - u[eOffset2 + -7];
		var _g32 = eOffset01 + -6;
		var _g122 = u;
		_g122[_g32] = _g122[_g32] + u[eOffset2 + -6];
		var _g33 = eOffset01 + -7;
		var _g123 = u;
		_g123[_g33] = _g123[_g33] + u[eOffset2 + -7];
		u[eOffset2 + -6] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -7] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		eOffset01 -= 8;
		eOffset2 -= 8;
		aOffset2 += 16;
	}
	var d01 = n2 - 1 - n8;
	var aOffset3 = 0;
	var eOffset02 = d01;
	var eOffset21 = d01 + -(n >> 4);
	var i3 = (n >> 5 >> 2) + 1;
	while(--i3 > 0) {
		var k00_203 = u[eOffset02] - u[eOffset21];
		var k01_213 = u[eOffset02 + -1] - u[eOffset21 + -1];
		var _g34 = eOffset02;
		var _g124 = u;
		_g124[_g34] = _g124[_g34] + u[eOffset21];
		var _g35 = eOffset02 + -1;
		var _g125 = u;
		_g125[_g35] = _g125[_g35] + u[eOffset21 + -1];
		u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -1] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + -2] - u[eOffset21 + -2];
		k01_213 = u[eOffset02 + -3] - u[eOffset21 + -3];
		var _g36 = eOffset02 + -2;
		var _g126 = u;
		_g126[_g36] = _g126[_g36] + u[eOffset21 + -2];
		var _g37 = eOffset02 + -3;
		var _g127 = u;
		_g127[_g37] = _g127[_g37] + u[eOffset21 + -3];
		u[eOffset21 + -2] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -3] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + -4] - u[eOffset21 + -4];
		k01_213 = u[eOffset02 + -5] - u[eOffset21 + -5];
		var _g38 = eOffset02 + -4;
		var _g128 = u;
		_g128[_g38] = _g128[_g38] + u[eOffset21 + -4];
		var _g39 = eOffset02 + -5;
		var _g129 = u;
		_g129[_g39] = _g129[_g39] + u[eOffset21 + -5];
		u[eOffset21 + -4] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -5] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + -6] - u[eOffset21 + -6];
		k01_213 = u[eOffset02 + -7] - u[eOffset21 + -7];
		var _g40 = eOffset02 + -6;
		var _g130 = u;
		_g130[_g40] = _g130[_g40] + u[eOffset21 + -6];
		var _g41 = eOffset02 + -7;
		var _g131 = u;
		_g131[_g41] = _g131[_g41] + u[eOffset21 + -7];
		u[eOffset21 + -6] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -7] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		eOffset02 -= 8;
		eOffset21 -= 8;
		aOffset3 += 16;
	}
	var d02 = n2 - 1 - n8 * 2;
	var aOffset4 = 0;
	var eOffset03 = d02;
	var eOffset22 = d02 + -(n >> 4);
	var i4 = (n >> 5 >> 2) + 1;
	while(--i4 > 0) {
		var k00_204 = u[eOffset03] - u[eOffset22];
		var k01_214 = u[eOffset03 + -1] - u[eOffset22 + -1];
		var _g42 = eOffset03;
		var _g132 = u;
		_g132[_g42] = _g132[_g42] + u[eOffset22];
		var _g43 = eOffset03 + -1;
		var _g133 = u;
		_g133[_g43] = _g133[_g43] + u[eOffset22 + -1];
		u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -1] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + -2] - u[eOffset22 + -2];
		k01_214 = u[eOffset03 + -3] - u[eOffset22 + -3];
		var _g44 = eOffset03 + -2;
		var _g134 = u;
		_g134[_g44] = _g134[_g44] + u[eOffset22 + -2];
		var _g45 = eOffset03 + -3;
		var _g135 = u;
		_g135[_g45] = _g135[_g45] + u[eOffset22 + -3];
		u[eOffset22 + -2] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -3] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + -4] - u[eOffset22 + -4];
		k01_214 = u[eOffset03 + -5] - u[eOffset22 + -5];
		var _g46 = eOffset03 + -4;
		var _g136 = u;
		_g136[_g46] = _g136[_g46] + u[eOffset22 + -4];
		var _g47 = eOffset03 + -5;
		var _g137 = u;
		_g137[_g47] = _g137[_g47] + u[eOffset22 + -5];
		u[eOffset22 + -4] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -5] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + -6] - u[eOffset22 + -6];
		k01_214 = u[eOffset03 + -7] - u[eOffset22 + -7];
		var _g48 = eOffset03 + -6;
		var _g138 = u;
		_g138[_g48] = _g138[_g48] + u[eOffset22 + -6];
		var _g49 = eOffset03 + -7;
		var _g139 = u;
		_g139[_g49] = _g139[_g49] + u[eOffset22 + -7];
		u[eOffset22 + -6] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -7] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		eOffset03 -= 8;
		eOffset22 -= 8;
		aOffset4 += 16;
	}
	var d03 = n2 - 1 - n8 * 3;
	var aOffset5 = 0;
	var eOffset04 = d03;
	var eOffset23 = d03 + -(n >> 4);
	var i5 = (n >> 5 >> 2) + 1;
	while(--i5 > 0) {
		var k00_205 = u[eOffset04] - u[eOffset23];
		var k01_215 = u[eOffset04 + -1] - u[eOffset23 + -1];
		var _g50 = eOffset04;
		var _g140 = u;
		_g140[_g50] = _g140[_g50] + u[eOffset23];
		var _g51 = eOffset04 + -1;
		var _g141 = u;
		_g141[_g51] = _g141[_g51] + u[eOffset23 + -1];
		u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -1] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + -2] - u[eOffset23 + -2];
		k01_215 = u[eOffset04 + -3] - u[eOffset23 + -3];
		var _g52 = eOffset04 + -2;
		var _g142 = u;
		_g142[_g52] = _g142[_g52] + u[eOffset23 + -2];
		var _g53 = eOffset04 + -3;
		var _g143 = u;
		_g143[_g53] = _g143[_g53] + u[eOffset23 + -3];
		u[eOffset23 + -2] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -3] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + -4] - u[eOffset23 + -4];
		k01_215 = u[eOffset04 + -5] - u[eOffset23 + -5];
		var _g54 = eOffset04 + -4;
		var _g144 = u;
		_g144[_g54] = _g144[_g54] + u[eOffset23 + -4];
		var _g55 = eOffset04 + -5;
		var _g145 = u;
		_g145[_g55] = _g145[_g55] + u[eOffset23 + -5];
		u[eOffset23 + -4] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -5] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + -6] - u[eOffset23 + -6];
		k01_215 = u[eOffset04 + -7] - u[eOffset23 + -7];
		var _g56 = eOffset04 + -6;
		var _g146 = u;
		_g146[_g56] = _g146[_g56] + u[eOffset23 + -6];
		var _g57 = eOffset04 + -7;
		var _g147 = u;
		_g147[_g57] = _g147[_g57] + u[eOffset23 + -7];
		u[eOffset23 + -6] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -7] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		eOffset04 -= 8;
		eOffset23 -= 8;
		aOffset5 += 16;
	}
	var _g148 = 2;
	var _g58 = ld - 3 >> 1;
	while(_g148 < _g58) {
		var l = _g148++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g310 = 0;
		var _g210 = lim;
		while(_g310 < _g210) {
			var i6 = _g310++;
			var d04 = n2 - 1 - k0 * i6;
			var k1 = 1 << l + 3;
			var aOffset6 = 0;
			var eOffset05 = d04;
			var eOffset24 = d04 + -k0_2;
			var i7 = (n >> l + 4 >> 2) + 1;
			while(--i7 > 0) {
				var k00_206 = u[eOffset05] - u[eOffset24];
				var k01_216 = u[eOffset05 + -1] - u[eOffset24 + -1];
				var _g59 = eOffset05;
				var _g149 = u;
				_g149[_g59] = _g149[_g59] + u[eOffset24];
				var _g60 = eOffset05 + -1;
				var _g150 = u;
				_g150[_g60] = _g150[_g60] + u[eOffset24 + -1];
				u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -1] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + -2] - u[eOffset24 + -2];
				k01_216 = u[eOffset05 + -3] - u[eOffset24 + -3];
				var _g61 = eOffset05 + -2;
				var _g151 = u;
				_g151[_g61] = _g151[_g61] + u[eOffset24 + -2];
				var _g62 = eOffset05 + -3;
				var _g152 = u;
				_g152[_g62] = _g152[_g62] + u[eOffset24 + -3];
				u[eOffset24 + -2] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -3] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + -4] - u[eOffset24 + -4];
				k01_216 = u[eOffset05 + -5] - u[eOffset24 + -5];
				var _g63 = eOffset05 + -4;
				var _g153 = u;
				_g153[_g63] = _g153[_g63] + u[eOffset24 + -4];
				var _g64 = eOffset05 + -5;
				var _g154 = u;
				_g154[_g64] = _g154[_g64] + u[eOffset24 + -5];
				u[eOffset24 + -4] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -5] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + -6] - u[eOffset24 + -6];
				k01_216 = u[eOffset05 + -7] - u[eOffset24 + -7];
				var _g65 = eOffset05 + -6;
				var _g155 = u;
				_g155[_g65] = _g155[_g65] + u[eOffset24 + -6];
				var _g66 = eOffset05 + -7;
				var _g156 = u;
				_g156[_g66] = _g156[_g66] + u[eOffset24 + -7];
				u[eOffset24 + -6] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -7] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				eOffset05 -= 8;
				eOffset24 -= 8;
				aOffset6 += k1;
			}
		}
	}
	var _g157 = ld - 3 >> 1;
	var _g67 = ld - 6;
	while(_g157 < _g67) {
		var l1 = _g157++;
		var k01 = n >> l1 + 2;
		var k11 = 1 << l1 + 3;
		var k0_21 = k01 >> 1;
		var rlim = n >> l1 + 6;
		var lim1 = 1 << l1 + 1;
		var aOffset7 = 0;
		var i_off2 = n2 - 1;
		var r = rlim + 1;
		while(--r > 0) {
			var A0 = a[aOffset7];
			var A1 = a[aOffset7 + 1];
			var A2 = a[aOffset7 + k11];
			var A3 = a[aOffset7 + k11 + 1];
			var A4 = a[aOffset7 + k11 * 2];
			var A5 = a[aOffset7 + k11 * 2 + 1];
			var A6 = a[aOffset7 + k11 * 3];
			var A7 = a[aOffset7 + k11 * 3 + 1];
			var eeOffset02 = i_off2;
			var eeOffset22 = i_off2 + -k0_21;
			var i8 = lim1 + 1;
			while(--i8 > 0) {
				var k00 = u[eeOffset02] - u[eeOffset22];
				var k111 = u[eeOffset02 + -1] - u[eeOffset22 + -1];
				u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
				u[eeOffset02 + -1] = u[eeOffset02 + -1] + u[eeOffset22 + -1];
				u[eeOffset22] = k00 * A0 - k111 * A1;
				u[eeOffset22 + -1] = k111 * A0 + k00 * A1;
				k00 = u[eeOffset02 + -2] - u[eeOffset22 + -2];
				k111 = u[eeOffset02 + -3] - u[eeOffset22 + -3];
				u[eeOffset02 + -2] = u[eeOffset02 + -2] + u[eeOffset22 + -2];
				u[eeOffset02 + -3] = u[eeOffset02 + -3] + u[eeOffset22 + -3];
				u[eeOffset22 + -2] = k00 * A2 - k111 * A3;
				u[eeOffset22 + -3] = k111 * A2 + k00 * A3;
				k00 = u[eeOffset02 + -4] - u[eeOffset22 + -4];
				k111 = u[eeOffset02 + -5] - u[eeOffset22 + -5];
				u[eeOffset02 + -4] = u[eeOffset02 + -4] + u[eeOffset22 + -4];
				u[eeOffset02 + -5] = u[eeOffset02 + -5] + u[eeOffset22 + -5];
				u[eeOffset22 + -4] = k00 * A4 - k111 * A5;
				u[eeOffset22 + -5] = k111 * A4 + k00 * A5;
				k00 = u[eeOffset02 + -6] - u[eeOffset22 + -6];
				k111 = u[eeOffset02 + -7] - u[eeOffset22 + -7];
				u[eeOffset02 + -6] = u[eeOffset02 + -6] + u[eeOffset22 + -6];
				u[eeOffset02 + -7] = u[eeOffset02 + -7] + u[eeOffset22 + -7];
				u[eeOffset22 + -6] = k00 * A6 - k111 * A7;
				u[eeOffset22 + -7] = k111 * A6 + k00 * A7;
				eeOffset02 -= k01;
				eeOffset22 -= k01;
			}
			aOffset7 += k11 * 4;
			i_off2 -= 8;
		}
	}
	var i_off3 = n2 - 1;
	var A21 = a[n >> 3];
	var zOffset = i_off3;
	var baseOffset = i_off3 - 16 * (n >> 5);
	while(zOffset > baseOffset) {
		var t0 = u[zOffset];
		var t1 = u[zOffset + -8];
		u[zOffset + -8] = t0 - t1;
		u[zOffset] = t0 + t1;
		t0 = u[zOffset + -1];
		t1 = u[zOffset + -9];
		u[zOffset + -9] = t0 - t1;
		u[zOffset + -1] = t0 + t1;
		t0 = u[zOffset + -2];
		t1 = u[zOffset + -10];
		var k001 = t0 - t1;
		u[zOffset + -2] = t0 + t1;
		t0 = u[zOffset + -3];
		t1 = u[zOffset + -11];
		var k112 = t0 - t1;
		u[zOffset + -3] = t0 + t1;
		u[zOffset + -10] = (k001 + k112) * A21;
		u[zOffset + -11] = (k112 - k001) * A21;
		t0 = u[zOffset + -4];
		t1 = u[zOffset + -12];
		k001 = t1 - t0;
		u[zOffset + -4] = t0 + t1;
		t0 = u[zOffset + -5];
		t1 = u[zOffset + -13];
		k112 = t0 - t1;
		u[zOffset + -5] = t0 + t1;
		u[zOffset + -12] = k112;
		u[zOffset + -13] = k001;
		t0 = u[zOffset + -6];
		t1 = u[zOffset + -14];
		k001 = t1 - t0;
		u[zOffset + -6] = t0 + t1;
		t0 = u[zOffset + -7];
		t1 = u[zOffset + -15];
		k112 = t0 - t1;
		u[zOffset + -7] = t0 + t1;
		u[zOffset + -14] = (k001 + k112) * A21;
		u[zOffset + -15] = (k001 - k112) * A21;
		var t01 = u[zOffset];
		var t11 = u[zOffset + -4];
		var k002 = t01 - t11;
		var y0 = t01 + t11;
		t01 = u[zOffset + -2];
		t11 = u[zOffset + -6];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		u[zOffset] = y0 + y2;
		u[zOffset + -2] = y0 - y2;
		var k33 = u[zOffset + -3] - u[zOffset + -7];
		u[zOffset + -4] = k002 + k33;
		u[zOffset + -6] = k002 - k33;
		t01 = u[zOffset + -1];
		t11 = u[zOffset + -5];
		var k113 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = u[zOffset + -3] + u[zOffset + -7];
		u[zOffset + -1] = y1 + y3;
		u[zOffset + -3] = y1 - y3;
		u[zOffset + -5] = k113 - k22;
		u[zOffset + -7] = k113 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = u[zOffset1];
		var t12 = u[zOffset1 + -4];
		var k003 = t02 - t12;
		var y01 = t02 + t12;
		t02 = u[zOffset1 + -2];
		t12 = u[zOffset1 + -6];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		u[zOffset1] = y01 + y21;
		u[zOffset1 + -2] = y01 - y21;
		var k331 = u[zOffset1 + -3] - u[zOffset1 + -7];
		u[zOffset1 + -4] = k003 + k331;
		u[zOffset1 + -6] = k003 - k331;
		t02 = u[zOffset1 + -1];
		t12 = u[zOffset1 + -5];
		var k114 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = u[zOffset1 + -3] + u[zOffset1 + -7];
		u[zOffset1 + -1] = y11 + y31;
		u[zOffset1 + -3] = y11 - y31;
		u[zOffset1 + -5] = k114 - k221;
		u[zOffset1 + -7] = k114 + k221;
		zOffset -= 16;
	}
	var brOffset = 0;
	var dOffset01 = n4 - 4;
	var dOffset11 = n2 - 4;
	while(dOffset01 >= 0) {
		var k4 = bitReverse[brOffset];
		v[dOffset11 + 3] = u[k4];
		v[dOffset11 + 2] = u[k4 + 1];
		v[dOffset01 + 3] = u[k4 + 2];
		v[dOffset01 + 2] = u[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		v[dOffset11 + 1] = u[k4];
		v[dOffset11] = u[k4 + 1];
		v[dOffset01 + 1] = u[k4 + 2];
		v[dOffset01] = u[k4 + 3];
		dOffset01 -= 4;
		dOffset11 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset2 = 0;
	var eOffset3 = n2 - 4;
	while(dOffset2 < eOffset3) {
		var a02 = v[dOffset2] - v[eOffset3 + 2];
		var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = v[dOffset2] + v[eOffset3 + 2];
		var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
		v[dOffset2] = b2 + b0;
		v[dOffset2 + 1] = b3 + b1;
		v[eOffset3 + 2] = b2 - b0;
		v[eOffset3 + 3] = b1 - b3;
		a02 = v[dOffset2 + 2] - v[eOffset3];
		a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = v[dOffset2 + 2] + v[eOffset3];
		b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
		v[dOffset2 + 2] = b2 + b0;
		v[dOffset2 + 3] = b3 + b1;
		v[eOffset3] = b2 - b0;
		v[eOffset3 + 1] = b1 - b3;
		cOffset += 4;
		dOffset2 += 4;
		eOffset3 -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset4 = n2 - 8;
	var dOffset02 = 0;
	var dOffset12 = n2 - 4;
	var dOffset21 = n2;
	var dOffset3 = n - 4;
	while(eOffset4 >= 0) {
		var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
		buffer[dOffset02] = p3;
		buffer[dOffset12 + 3] = -p3;
		buffer[dOffset21] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
		buffer[dOffset02 + 1] = p1;
		buffer[dOffset12 + 2] = -p1;
		buffer[dOffset21 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
		buffer[dOffset02 + 2] = p3;
		buffer[dOffset12 + 1] = -p3;
		buffer[dOffset21 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
		p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
		buffer[dOffset02 + 3] = p1;
		buffer[dOffset12] = -p1;
		buffer[dOffset21 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset4 -= 8;
		dOffset02 += 4;
		dOffset21 += 4;
		dOffset12 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + -1] - e[eeOffset2 + -1];
		var _g = eeOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eeOffset2];
		var _g2 = eeOffset0 + -1;
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eeOffset2 + -1];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + -2] - e[eeOffset2 + -2];
		k01_21 = e[eeOffset0 + -3] - e[eeOffset2 + -3];
		var _g3 = eeOffset0 + -2;
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eeOffset2 + -2];
		var _g4 = eeOffset0 + -3;
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eeOffset2 + -3];
		e[eeOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + -4] - e[eeOffset2 + -4];
		k01_21 = e[eeOffset0 + -5] - e[eeOffset2 + -5];
		var _g5 = eeOffset0 + -4;
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eeOffset2 + -4];
		var _g6 = eeOffset0 + -5;
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eeOffset2 + -5];
		e[eeOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + -6] - e[eeOffset2 + -6];
		k01_21 = e[eeOffset0 + -7] - e[eeOffset2 + -7];
		var _g7 = eeOffset0 + -6;
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eeOffset2 + -6];
		var _g8 = eeOffset0 + -7;
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eeOffset2 + -7];
		e[eeOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + -1] - e[eOffset2 + -1];
		var _g = eOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eOffset2];
		var _g2 = eOffset0 + -1;
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eOffset2 + -1];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + -2] - e[eOffset2 + -2];
		k01_21 = e[eOffset0 + -3] - e[eOffset2 + -3];
		var _g3 = eOffset0 + -2;
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eOffset2 + -2];
		var _g4 = eOffset0 + -3;
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eOffset2 + -3];
		e[eOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + -4] - e[eOffset2 + -4];
		k01_21 = e[eOffset0 + -5] - e[eOffset2 + -5];
		var _g5 = eOffset0 + -4;
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eOffset2 + -4];
		var _g6 = eOffset0 + -5;
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eOffset2 + -5];
		e[eOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + -6] - e[eOffset2 + -6];
		k01_21 = e[eOffset0 + -7] - e[eOffset2 + -7];
		var _g7 = eOffset0 + -6;
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eOffset2 + -6];
		var _g8 = eOffset0 + -7;
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eOffset2 + -7];
		e[eOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + -1] - e[eeOffset2 + -1];
		e[eeOffset0] = e[eeOffset0] + e[eeOffset2];
		e[eeOffset0 + -1] = e[eeOffset0 + -1] + e[eeOffset2 + -1];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + -1] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + -2] - e[eeOffset2 + -2];
		k11 = e[eeOffset0 + -3] - e[eeOffset2 + -3];
		e[eeOffset0 + -2] = e[eeOffset0 + -2] + e[eeOffset2 + -2];
		e[eeOffset0 + -3] = e[eeOffset0 + -3] + e[eeOffset2 + -3];
		e[eeOffset2 + -2] = k00 * A2 - k11 * A3;
		e[eeOffset2 + -3] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + -4] - e[eeOffset2 + -4];
		k11 = e[eeOffset0 + -5] - e[eeOffset2 + -5];
		e[eeOffset0 + -4] = e[eeOffset0 + -4] + e[eeOffset2 + -4];
		e[eeOffset0 + -5] = e[eeOffset0 + -5] + e[eeOffset2 + -5];
		e[eeOffset2 + -4] = k00 * A4 - k11 * A5;
		e[eeOffset2 + -5] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + -6] - e[eeOffset2 + -6];
		k11 = e[eeOffset0 + -7] - e[eeOffset2 + -7];
		e[eeOffset0 + -6] = e[eeOffset0 + -6] + e[eeOffset2 + -6];
		e[eeOffset0 + -7] = e[eeOffset0 + -7] + e[eeOffset2 + -7];
		e[eeOffset2 + -6] = k00 * A6 - k11 * A7;
		e[eeOffset2 + -7] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + -4];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + -2];
	t1 = e[zOffset + -6];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + -2] = y0 - y2;
	var k33 = e[zOffset + -3] - e[zOffset + -7];
	e[zOffset + -4] = k00 + k33;
	e[zOffset + -6] = k00 - k33;
	t0 = e[zOffset + -1];
	t1 = e[zOffset + -5];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + -3] + e[zOffset + -7];
	e[zOffset + -1] = y1 + y3;
	e[zOffset + -3] = y1 - y3;
	e[zOffset + -5] = k11 - k22;
	e[zOffset + -7] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + -8];
		e[zOffset + -8] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + -1];
		t1 = e[zOffset + -9];
		e[zOffset + -9] = t0 - t1;
		e[zOffset + -1] = t0 + t1;
		t0 = e[zOffset + -2];
		t1 = e[zOffset + -10];
		var k00 = t0 - t1;
		e[zOffset + -2] = t0 + t1;
		t0 = e[zOffset + -3];
		t1 = e[zOffset + -11];
		var k11 = t0 - t1;
		e[zOffset + -3] = t0 + t1;
		e[zOffset + -10] = (k00 + k11) * A2;
		e[zOffset + -11] = (k11 - k00) * A2;
		t0 = e[zOffset + -4];
		t1 = e[zOffset + -12];
		k00 = t1 - t0;
		e[zOffset + -4] = t0 + t1;
		t0 = e[zOffset + -5];
		t1 = e[zOffset + -13];
		k11 = t0 - t1;
		e[zOffset + -5] = t0 + t1;
		e[zOffset + -12] = k11;
		e[zOffset + -13] = k00;
		t0 = e[zOffset + -6];
		t1 = e[zOffset + -14];
		k00 = t1 - t0;
		e[zOffset + -6] = t0 + t1;
		t0 = e[zOffset + -7];
		t1 = e[zOffset + -15];
		k11 = t0 - t1;
		e[zOffset + -7] = t0 + t1;
		e[zOffset + -14] = (k00 + k11) * A2;
		e[zOffset + -15] = (k00 - k11) * A2;
		var t01 = e[zOffset];
		var t11 = e[zOffset + -4];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = e[zOffset + -2];
		t11 = e[zOffset + -6];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		e[zOffset] = y0 + y2;
		e[zOffset + -2] = y0 - y2;
		var k33 = e[zOffset + -3] - e[zOffset + -7];
		e[zOffset + -4] = k001 + k33;
		e[zOffset + -6] = k001 - k33;
		t01 = e[zOffset + -1];
		t11 = e[zOffset + -5];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = e[zOffset + -3] + e[zOffset + -7];
		e[zOffset + -1] = y1 + y3;
		e[zOffset + -3] = y1 - y3;
		e[zOffset + -5] = k111 - k22;
		e[zOffset + -7] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = e[zOffset1];
		var t12 = e[zOffset1 + -4];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = e[zOffset1 + -2];
		t12 = e[zOffset1 + -6];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		e[zOffset1] = y01 + y21;
		e[zOffset1 + -2] = y01 - y21;
		var k331 = e[zOffset1 + -3] - e[zOffset1 + -7];
		e[zOffset1 + -4] = k002 + k331;
		e[zOffset1 + -6] = k002 - k331;
		t02 = e[zOffset1 + -1];
		t12 = e[zOffset1 + -5];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = e[zOffset1 + -3] + e[zOffset1 + -7];
		e[zOffset1 + -1] = y11 + y31;
		e[zOffset1 + -3] = y11 - y31;
		e[zOffset1 + -5] = k112 - k221;
		e[zOffset1 + -7] = k112 + k221;
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = $hxClasses["kha.audio2.ogg.vorbis.Reader"] = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
kha_audio2_ogg_vorbis_Reader.__name__ = true;
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var a1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(a2) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(a1,a2);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var a1 = input;
	decoder.setupSampleNumber(function(a2) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(a1,a2);
	},bytes.length);
	var header = decoder.header;
	var count = 0;
	var bufferSize = 4096;
	var length = bufferSize * header.channel;
	var this1 = new Array(length);
	var buffer = this1;
	while(true) {
		var n = decoder.read(buffer,bufferSize,header.channel,header.sampleRate,useFloat);
		var _g1 = 0;
		var _g = n * header.channel;
		while(_g1 < _g) {
			var i = _g1++;
			output.writeFloat(buffer[i]);
		}
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		var samples = this.decoder.totalSample;
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		var samples = this.get_currentSample();
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,set_currentMillisecond: function(value) {
		var _g = value / 1000;
		var _g1 = this.get_header().sampleRate;
		this.set_currentSample(Math.floor(_$UInt_UInt_$Impl_$.toFloat(_g1) * _g));
		return this.get_currentMillisecond();
	}
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Type.createEmptyInstance(kha_audio2_ogg_vorbis_Reader);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		var _g = millseconds / 1000;
		var _g1 = this.get_header().sampleRate;
		return Math.floor(_$UInt_UInt_$Impl_$.toFloat(_g1) * _g);
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
	,__properties__: {set_currentMillisecond:"set_currentMillisecond",get_currentMillisecond:"get_currentMillisecond",set_currentSample:"set_currentSample",get_currentSample:"get_currentSample",get_totalMillisecond:"get_totalMillisecond",get_totalSample:"get_totalSample",get_header:"get_header"}
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = $hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = true;
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g1 = 0;
		var _g = segmentCount;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i1 = segmentCount - 1;
			while(i1 >= 0) {
				if(this.segments[i1] < 255) {
					break;
				}
				if(i1 >= 0) {
					this.endSegWithKnownLoc = i1;
					this.knownLocForPacket = loc0;
				}
				--i1;
			}
		}
		if(this.firstDecode) {
			var i2 = 0;
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g11 = 0;
			var _g2 = segmentCount;
			while(_g11 < _g2) {
				var i3 = _g11++;
				len += this.segments[i3];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Type.createEmptyInstance(kha_audio2_ogg_vorbis_VorbisDecodeState);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,kha_audio2_ogg_vorbis_data_ReaderError) ) {
					this.lastSeg = true;
					this.error = e;
					return 0;
				} else throw(e);
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		if(this.bytesInSeg != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "VorbisDecodeState.hx", lineNumber : 184, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
					eof = true;
					x = 0;
				} else throw(e);
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			return this.input.readByte();
		}
	}
	,readPacket: function() {
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.inputPosition += 1;
			this.input.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = new haxe_io_Bytes(new ArrayBuffer(6));
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var x;
			if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
				x = -1;
			} else {
				this.bytesInSeg--;
				this.inputPosition += 1;
				x = this.input.readByte();
			}
			this.validBits = 0;
			header.b[i] = x & 255;
		}
		if(header.toString() != "vorbis") {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "VorbisDecodeState.hx", lineNumber : 300, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "VorbisDecodeState.hx", lineNumber : 307, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "VorbisDecodeState.hx", lineNumber : 310, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		var tmp;
		var tmp1;
		var tmp2;
		this.inputPosition += 1;
		if(this.input.readByte() == 79) {
			this.inputPosition += 1;
			tmp2 = this.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			this.inputPosition += 1;
			tmp1 = this.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			this.inputPosition += 1;
			tmp = this.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 323, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.inputPosition += len;
		var this1 = new Array(len);
		var vec = this1;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		var val;
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = this.decodeScalarRaw(c);
		}
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g[1]) {
		case 0:
			var l = _g[3];
			var e = _g[2];
			end = e;
			last = l;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 518, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
			break;
		}
		var lastPageLoc = this.inputPosition;
		try {
			while(!last) {
				seekFunc(this.inputPosition = end);
				var _g1 = this.findPage(seekFunc,inputLength);
				switch(_g1[1]) {
				case 0:
					var l1 = _g1[3];
					var e1 = _g1[2];
					end = e1;
					last = l1;
					break;
				case 1:
					throw "__break__";
					break;
				}
				previousSafe = lastPageLoc + 1;
				lastPageLoc = this.inputPosition;
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g11 = 0;
		var _g2 = 6;
		while(_g11 < _g2) {
			var i = _g11++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 552, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					var _g = 4;
					while(_g < 27) {
						var i = _g++;
						this.inputPosition += 1;
						header[i] = this.input.readByte();
					}
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					var _g1 = 22;
					while(_g1 < 26) {
						var i1 = _g1++;
						header[i1] = 0;
					}
					var crc = 0;
					var _g2 = 0;
					while(_g2 < 27) {
						var i2 = _g2++;
						crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[i2] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g11 = 0;
						var _g3 = header[26];
						while(_g11 < _g3) {
							var i3 = _g11++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g12 = 0;
						var _g4 = len;
						while(_g12 < _g4) {
							var i4 = _g12++;
							this.inputPosition += 1;
							var $byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[$byte ^ crc >>> 24];
						}
					} catch( e ) {
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else throw(e);
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,haxe_io_Eof) ) {
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else throw(e1);
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this2 = new Array(27);
		var vec = this2;
		var _g1 = 0;
		var _g = 27;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		if(!(pageHeader[0] == 79 && pageHeader[1] == 103 && pageHeader[2] == 103 && pageHeader[3] == 83)) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "VorbisDecodeState.hx", lineNumber : 660, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "analyzePage"}));
		}
		var n = pageHeader[26];
		this.inputPosition += n;
		var this3 = new Array(n);
		var vec1 = this3;
		var _g11 = 0;
		var _g2 = n;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec1[i1] = this.input.readByte();
		}
		var lacing = vec1;
		var len = 0;
		var _g12 = 0;
		var _g3 = pageHeader[26];
		while(_g12 < _g3) {
			var i2 = _g12++;
			len += lacing[i2];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g13 = 0;
		var _g4 = pageHeader[26];
		while(_g13 < _g4) {
			var i3 = _g13++;
			if(packetStart) {
				if(lacing[i3] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0;
				n1 &= (1 << b) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = lacing[i3] - 1;
				this.inputPosition += len1;
				var this4 = new Array(len1);
				var vec2 = this4;
				var _g14 = 0;
				var _g5 = len1;
				while(_g14 < _g5) {
					var i4 = _g14++;
					vec2[i4] = this.input.readByte();
				}
			} else {
				var len2 = lacing[i3];
				this.inputPosition += len2;
				var this5 = new Array(len2);
				var vec3 = this5;
				var _g15 = 0;
				var _g6 = len2;
				while(_g15 < _g6) {
					var i5 = _g15++;
					vec3[i5] = this.input.readByte();
				}
			}
			packetStart = lacing[i3] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i6 = numPacket - 2;
		while(i6 >= 1) {
			--i6;
			if(packetType[i6]) {
				if(packetType[i6 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i6;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		if(!(c.sortedCodewords != null || c.codewords != null)) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "VorbisDecodeState.hx", lineNumber : 787, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"}));
		}
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		if(!(!c.sparse)) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "VorbisDecodeState.hx", lineNumber : 829, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"}));
		}
		var _g1 = 0;
		var _g = c.entries;
		while(_g1 < _g) {
			var i = _g1++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 846, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxClasses["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : true, __constructs__ : ["Found","NotFound"] };
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found = function(end,last) { var $x = ["Found",0,end,last]; $x.__enum__ = kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult; $x.toString = $estr; return $x; };
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound = ["NotFound",1];
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound.toString = $estr;
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound.__enum__ = kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult;
var kha_audio2_ogg_vorbis_VorbisDecoder = $hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var length = header.channel;
	var this1 = new Array(length);
	this.channelBuffers = this1;
	var length1 = header.channel;
	var this2 = new Array(length1);
	this.previousWindow = this2;
	var length2 = header.channel;
	var this3 = new Array(length2);
	this.finalY = this3;
	var _g1 = 0;
	var _g = header.channel;
	while(_g1 < _g) {
		var i = _g1++;
		var this4 = this.channelBuffers;
		var len = header.blocksize1;
		var this5 = new Array(len);
		var vec = this5;
		this4[i] = vec;
		var this6 = this.previousWindow;
		var len1 = header.blocksize1 / 2 | 0;
		var this7 = new Array(len1);
		var vec1 = this7;
		this6[i] = vec1;
		this.finalY[i] = [];
	}
	var this8 = new Array(2);
	this.a = this8;
	var this9 = new Array(2);
	this.b = this9;
	var this10 = new Array(2);
	this.c = this10;
	var this11 = new Array(2);
	this.window = this11;
	var this12 = new Array(2);
	this.bitReverseData = this12;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = true;
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var header = kha_audio2_ogg_vorbis_data_Header.read(decodeState);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(b) | 0) != 0) {
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b1 = this.header.sampleRate;
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(b1) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g1 = this.channelBufferStart;
			var _g = this.channelBufferStart + k;
			while(_g1 < _g) {
				var j = _g1++;
				var _g3 = 0;
				var _g2 = sampleRepeat;
				while(_g3 < _g2) {
					var sr = _g3++;
					var _g5 = 0;
					var _g4 = this.header.channel;
					while(_g5 < _g4) {
						var i = _g5++;
						var _g7 = 0;
						var _g6 = channelRepeat;
						while(_g7 < _g6) {
							var cr = _g7++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g11 = n;
		var _g8 = len;
		while(_g11 < _g8) {
			var j1 = _g11++;
			var _g31 = 0;
			var _g21 = sampleRepeat;
			while(_g31 < _g21) {
				var sr1 = _g31++;
				var _g51 = 0;
				var _g41 = this.header.channel;
				while(_g51 < _g41) {
					var i1 = _g51++;
					var _g71 = 0;
					var _g61 = channelRepeat;
					while(_g71 < _g61) {
						var cr1 = _g71++;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					if(attempts >= 8) {
						probe = probe2;
					} else if(_$UInt_UInt_$Impl_$.gt(probe2,probe)) {
						probe = probe + (probe2 - probe >>> 1);
					} else {
						probe = probe2 + (probe - probe2 >>> 1);
					}
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g[1]) {
				case 0:
					break;
				case 1:
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
					break;
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Type.createEmptyInstance(kha_audio2_ogg_vorbis_VorbisDecoder);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		var length = this.header.channel;
		var this1 = new Array(length);
		decoder.channelBuffers = this1;
		var length1 = this.header.channel;
		var this2 = new Array(length1);
		decoder.previousWindow = this2;
		var length2 = this.header.channel;
		var this3 = new Array(length2);
		decoder.finalY = this3;
		var _g1 = 0;
		var _g = this.header.channel;
		while(_g1 < _g) {
			var i = _g1++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g1 = 0;
			var _g = this.header.channel;
			while(_g1 < _g) {
				var i = _g1++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g3 = 0;
				var _g2 = n;
				while(_g3 < _g2) {
					var j = _g3++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g11 = 0;
		var _g4 = this.header.channel;
		while(_g11 < _g4) {
			var i1 = _g11++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g31 = 0;
			var _g21 = len - right;
			while(_g31 < _g21) {
				var j1 = _g31++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "VorbisDecoder.hx", lineNumber : 466, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "getWindow"}));
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this3 = this.b;
		var this4 = new Array(n2);
		this3[bs] = this4;
		var this5 = this.c;
		var this6 = new Array(n4);
		this5[bs] = this6;
		var this7 = this.window;
		var this8 = new Array(n2);
		this7[bs] = this8;
		var this9 = this.bitReverseData;
		var this10 = new Array(n8);
		this9[bs] = this10;
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + -1] - u[eeOffset2 + -1];
			var _g = eeOffset0;
			var _g1 = u;
			_g1[_g] = _g1[_g] + u[eeOffset2];
			var _g2 = eeOffset0 + -1;
			var _g11 = u;
			_g11[_g2] = _g11[_g2] + u[eeOffset2 + -1];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -2] - u[eeOffset2 + -2];
			k01_21 = u[eeOffset0 + -3] - u[eeOffset2 + -3];
			var _g3 = eeOffset0 + -2;
			var _g12 = u;
			_g12[_g3] = _g12[_g3] + u[eeOffset2 + -2];
			var _g4 = eeOffset0 + -3;
			var _g13 = u;
			_g13[_g4] = _g13[_g4] + u[eeOffset2 + -3];
			u[eeOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -4] - u[eeOffset2 + -4];
			k01_21 = u[eeOffset0 + -5] - u[eeOffset2 + -5];
			var _g5 = eeOffset0 + -4;
			var _g14 = u;
			_g14[_g5] = _g14[_g5] + u[eeOffset2 + -4];
			var _g6 = eeOffset0 + -5;
			var _g15 = u;
			_g15[_g6] = _g15[_g6] + u[eeOffset2 + -5];
			u[eeOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -6] - u[eeOffset2 + -6];
			k01_21 = u[eeOffset0 + -7] - u[eeOffset2 + -7];
			var _g7 = eeOffset0 + -6;
			var _g16 = u;
			_g16[_g7] = _g16[_g7] + u[eeOffset2 + -6];
			var _g8 = eeOffset0 + -7;
			var _g17 = u;
			_g17[_g8] = _g17[_g8] + u[eeOffset2 + -7];
			u[eeOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = u[eeOffset01] - u[eeOffset21];
			var k01_211 = u[eeOffset01 + -1] - u[eeOffset21 + -1];
			var _g9 = eeOffset01;
			var _g18 = u;
			_g18[_g9] = _g18[_g9] + u[eeOffset21];
			var _g10 = eeOffset01 + -1;
			var _g19 = u;
			_g19[_g10] = _g19[_g10] + u[eeOffset21 + -1];
			u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -1] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -2] - u[eeOffset21 + -2];
			k01_211 = u[eeOffset01 + -3] - u[eeOffset21 + -3];
			var _g20 = eeOffset01 + -2;
			var _g110 = u;
			_g110[_g20] = _g110[_g20] + u[eeOffset21 + -2];
			var _g21 = eeOffset01 + -3;
			var _g111 = u;
			_g111[_g21] = _g111[_g21] + u[eeOffset21 + -3];
			u[eeOffset21 + -2] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -3] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -4] - u[eeOffset21 + -4];
			k01_211 = u[eeOffset01 + -5] - u[eeOffset21 + -5];
			var _g22 = eeOffset01 + -4;
			var _g112 = u;
			_g112[_g22] = _g112[_g22] + u[eeOffset21 + -4];
			var _g23 = eeOffset01 + -5;
			var _g113 = u;
			_g113[_g23] = _g113[_g23] + u[eeOffset21 + -5];
			u[eeOffset21 + -4] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -5] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -6] - u[eeOffset21 + -6];
			k01_211 = u[eeOffset01 + -7] - u[eeOffset21 + -7];
			var _g24 = eeOffset01 + -6;
			var _g114 = u;
			_g114[_g24] = _g114[_g24] + u[eeOffset21 + -6];
			var _g25 = eeOffset01 + -7;
			var _g115 = u;
			_g115[_g25] = _g115[_g25] + u[eeOffset21 + -7];
			u[eeOffset21 + -6] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -7] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = u[eOffset01] - u[eOffset2];
			var k01_212 = u[eOffset01 + -1] - u[eOffset2 + -1];
			var _g26 = eOffset01;
			var _g116 = u;
			_g116[_g26] = _g116[_g26] + u[eOffset2];
			var _g27 = eOffset01 + -1;
			var _g117 = u;
			_g117[_g27] = _g117[_g27] + u[eOffset2 + -1];
			u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -1] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -2] - u[eOffset2 + -2];
			k01_212 = u[eOffset01 + -3] - u[eOffset2 + -3];
			var _g28 = eOffset01 + -2;
			var _g118 = u;
			_g118[_g28] = _g118[_g28] + u[eOffset2 + -2];
			var _g29 = eOffset01 + -3;
			var _g119 = u;
			_g119[_g29] = _g119[_g29] + u[eOffset2 + -3];
			u[eOffset2 + -2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -3] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -4] - u[eOffset2 + -4];
			k01_212 = u[eOffset01 + -5] - u[eOffset2 + -5];
			var _g30 = eOffset01 + -4;
			var _g120 = u;
			_g120[_g30] = _g120[_g30] + u[eOffset2 + -4];
			var _g31 = eOffset01 + -5;
			var _g121 = u;
			_g121[_g31] = _g121[_g31] + u[eOffset2 + -5];
			u[eOffset2 + -4] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -5] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -6] - u[eOffset2 + -6];
			k01_212 = u[eOffset01 + -7] - u[eOffset2 + -7];
			var _g32 = eOffset01 + -6;
			var _g122 = u;
			_g122[_g32] = _g122[_g32] + u[eOffset2 + -6];
			var _g33 = eOffset01 + -7;
			var _g123 = u;
			_g123[_g33] = _g123[_g33] + u[eOffset2 + -7];
			u[eOffset2 + -6] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -7] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = u[eOffset02] - u[eOffset21];
			var k01_213 = u[eOffset02 + -1] - u[eOffset21 + -1];
			var _g34 = eOffset02;
			var _g124 = u;
			_g124[_g34] = _g124[_g34] + u[eOffset21];
			var _g35 = eOffset02 + -1;
			var _g125 = u;
			_g125[_g35] = _g125[_g35] + u[eOffset21 + -1];
			u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -1] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -2] - u[eOffset21 + -2];
			k01_213 = u[eOffset02 + -3] - u[eOffset21 + -3];
			var _g36 = eOffset02 + -2;
			var _g126 = u;
			_g126[_g36] = _g126[_g36] + u[eOffset21 + -2];
			var _g37 = eOffset02 + -3;
			var _g127 = u;
			_g127[_g37] = _g127[_g37] + u[eOffset21 + -3];
			u[eOffset21 + -2] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -3] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -4] - u[eOffset21 + -4];
			k01_213 = u[eOffset02 + -5] - u[eOffset21 + -5];
			var _g38 = eOffset02 + -4;
			var _g128 = u;
			_g128[_g38] = _g128[_g38] + u[eOffset21 + -4];
			var _g39 = eOffset02 + -5;
			var _g129 = u;
			_g129[_g39] = _g129[_g39] + u[eOffset21 + -5];
			u[eOffset21 + -4] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -5] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -6] - u[eOffset21 + -6];
			k01_213 = u[eOffset02 + -7] - u[eOffset21 + -7];
			var _g40 = eOffset02 + -6;
			var _g130 = u;
			_g130[_g40] = _g130[_g40] + u[eOffset21 + -6];
			var _g41 = eOffset02 + -7;
			var _g131 = u;
			_g131[_g41] = _g131[_g41] + u[eOffset21 + -7];
			u[eOffset21 + -6] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -7] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = u[eOffset03] - u[eOffset22];
			var k01_214 = u[eOffset03 + -1] - u[eOffset22 + -1];
			var _g42 = eOffset03;
			var _g132 = u;
			_g132[_g42] = _g132[_g42] + u[eOffset22];
			var _g43 = eOffset03 + -1;
			var _g133 = u;
			_g133[_g43] = _g133[_g43] + u[eOffset22 + -1];
			u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -1] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -2] - u[eOffset22 + -2];
			k01_214 = u[eOffset03 + -3] - u[eOffset22 + -3];
			var _g44 = eOffset03 + -2;
			var _g134 = u;
			_g134[_g44] = _g134[_g44] + u[eOffset22 + -2];
			var _g45 = eOffset03 + -3;
			var _g135 = u;
			_g135[_g45] = _g135[_g45] + u[eOffset22 + -3];
			u[eOffset22 + -2] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -3] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -4] - u[eOffset22 + -4];
			k01_214 = u[eOffset03 + -5] - u[eOffset22 + -5];
			var _g46 = eOffset03 + -4;
			var _g136 = u;
			_g136[_g46] = _g136[_g46] + u[eOffset22 + -4];
			var _g47 = eOffset03 + -5;
			var _g137 = u;
			_g137[_g47] = _g137[_g47] + u[eOffset22 + -5];
			u[eOffset22 + -4] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -5] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -6] - u[eOffset22 + -6];
			k01_214 = u[eOffset03 + -7] - u[eOffset22 + -7];
			var _g48 = eOffset03 + -6;
			var _g138 = u;
			_g138[_g48] = _g138[_g48] + u[eOffset22 + -6];
			var _g49 = eOffset03 + -7;
			var _g139 = u;
			_g139[_g49] = _g139[_g49] + u[eOffset22 + -7];
			u[eOffset22 + -6] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -7] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = u[eOffset04] - u[eOffset23];
			var k01_215 = u[eOffset04 + -1] - u[eOffset23 + -1];
			var _g50 = eOffset04;
			var _g140 = u;
			_g140[_g50] = _g140[_g50] + u[eOffset23];
			var _g51 = eOffset04 + -1;
			var _g141 = u;
			_g141[_g51] = _g141[_g51] + u[eOffset23 + -1];
			u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -1] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -2] - u[eOffset23 + -2];
			k01_215 = u[eOffset04 + -3] - u[eOffset23 + -3];
			var _g52 = eOffset04 + -2;
			var _g142 = u;
			_g142[_g52] = _g142[_g52] + u[eOffset23 + -2];
			var _g53 = eOffset04 + -3;
			var _g143 = u;
			_g143[_g53] = _g143[_g53] + u[eOffset23 + -3];
			u[eOffset23 + -2] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -3] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -4] - u[eOffset23 + -4];
			k01_215 = u[eOffset04 + -5] - u[eOffset23 + -5];
			var _g54 = eOffset04 + -4;
			var _g144 = u;
			_g144[_g54] = _g144[_g54] + u[eOffset23 + -4];
			var _g55 = eOffset04 + -5;
			var _g145 = u;
			_g145[_g55] = _g145[_g55] + u[eOffset23 + -5];
			u[eOffset23 + -4] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -5] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -6] - u[eOffset23 + -6];
			k01_215 = u[eOffset04 + -7] - u[eOffset23 + -7];
			var _g56 = eOffset04 + -6;
			var _g146 = u;
			_g146[_g56] = _g146[_g56] + u[eOffset23 + -6];
			var _g57 = eOffset04 + -7;
			var _g147 = u;
			_g147[_g57] = _g147[_g57] + u[eOffset23 + -7];
			u[eOffset23 + -6] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -7] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g148 = 2;
		var _g58 = ld - 3 >> 1;
		while(_g148 < _g58) {
			var l = _g148++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g310 = 0;
			var _g210 = lim;
			while(_g310 < _g210) {
				var i6 = _g310++;
				var d04 = n2 - 1 - k0 * i6;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i7 = (n >> l + 4 >> 2) + 1;
				while(--i7 > 0) {
					var k00_206 = u[eOffset05] - u[eOffset24];
					var k01_216 = u[eOffset05 + -1] - u[eOffset24 + -1];
					var _g59 = eOffset05;
					var _g149 = u;
					_g149[_g59] = _g149[_g59] + u[eOffset24];
					var _g60 = eOffset05 + -1;
					var _g150 = u;
					_g150[_g60] = _g150[_g60] + u[eOffset24 + -1];
					u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -1] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -2] - u[eOffset24 + -2];
					k01_216 = u[eOffset05 + -3] - u[eOffset24 + -3];
					var _g61 = eOffset05 + -2;
					var _g151 = u;
					_g151[_g61] = _g151[_g61] + u[eOffset24 + -2];
					var _g62 = eOffset05 + -3;
					var _g152 = u;
					_g152[_g62] = _g152[_g62] + u[eOffset24 + -3];
					u[eOffset24 + -2] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -3] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -4] - u[eOffset24 + -4];
					k01_216 = u[eOffset05 + -5] - u[eOffset24 + -5];
					var _g63 = eOffset05 + -4;
					var _g153 = u;
					_g153[_g63] = _g153[_g63] + u[eOffset24 + -4];
					var _g64 = eOffset05 + -5;
					var _g154 = u;
					_g154[_g64] = _g154[_g64] + u[eOffset24 + -5];
					u[eOffset24 + -4] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -5] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -6] - u[eOffset24 + -6];
					k01_216 = u[eOffset05 + -7] - u[eOffset24 + -7];
					var _g65 = eOffset05 + -6;
					var _g155 = u;
					_g155[_g65] = _g155[_g65] + u[eOffset24 + -6];
					var _g66 = eOffset05 + -7;
					var _g156 = u;
					_g156[_g66] = _g156[_g66] + u[eOffset24 + -7];
					u[eOffset24 + -6] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -7] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g157 = ld - 3 >> 1;
		var _g67 = ld - 6;
		while(_g157 < _g67) {
			var l1 = _g157++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var rlim = n >> l1 + 6;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i8 = lim1 + 1;
				while(--i8 > 0) {
					var k00 = u[eeOffset02] - u[eeOffset22];
					var k111 = u[eeOffset02 + -1] - u[eeOffset22 + -1];
					u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
					u[eeOffset02 + -1] = u[eeOffset02 + -1] + u[eeOffset22 + -1];
					u[eeOffset22] = k00 * A0 - k111 * A1;
					u[eeOffset22 + -1] = k111 * A0 + k00 * A1;
					k00 = u[eeOffset02 + -2] - u[eeOffset22 + -2];
					k111 = u[eeOffset02 + -3] - u[eeOffset22 + -3];
					u[eeOffset02 + -2] = u[eeOffset02 + -2] + u[eeOffset22 + -2];
					u[eeOffset02 + -3] = u[eeOffset02 + -3] + u[eeOffset22 + -3];
					u[eeOffset22 + -2] = k00 * A2 - k111 * A3;
					u[eeOffset22 + -3] = k111 * A2 + k00 * A3;
					k00 = u[eeOffset02 + -4] - u[eeOffset22 + -4];
					k111 = u[eeOffset02 + -5] - u[eeOffset22 + -5];
					u[eeOffset02 + -4] = u[eeOffset02 + -4] + u[eeOffset22 + -4];
					u[eeOffset02 + -5] = u[eeOffset02 + -5] + u[eeOffset22 + -5];
					u[eeOffset22 + -4] = k00 * A4 - k111 * A5;
					u[eeOffset22 + -5] = k111 * A4 + k00 * A5;
					k00 = u[eeOffset02 + -6] - u[eeOffset22 + -6];
					k111 = u[eeOffset02 + -7] - u[eeOffset22 + -7];
					u[eeOffset02 + -6] = u[eeOffset02 + -6] + u[eeOffset22 + -6];
					u[eeOffset02 + -7] = u[eeOffset02 + -7] + u[eeOffset22 + -7];
					u[eeOffset22 + -6] = k00 * A6 - k111 * A7;
					u[eeOffset22 + -7] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + -8];
			u[zOffset + -8] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + -1];
			t1 = u[zOffset + -9];
			u[zOffset + -9] = t0 - t1;
			u[zOffset + -1] = t0 + t1;
			t0 = u[zOffset + -2];
			t1 = u[zOffset + -10];
			var k001 = t0 - t1;
			u[zOffset + -2] = t0 + t1;
			t0 = u[zOffset + -3];
			t1 = u[zOffset + -11];
			var k112 = t0 - t1;
			u[zOffset + -3] = t0 + t1;
			u[zOffset + -10] = (k001 + k112) * A21;
			u[zOffset + -11] = (k112 - k001) * A21;
			t0 = u[zOffset + -4];
			t1 = u[zOffset + -12];
			k001 = t1 - t0;
			u[zOffset + -4] = t0 + t1;
			t0 = u[zOffset + -5];
			t1 = u[zOffset + -13];
			k112 = t0 - t1;
			u[zOffset + -5] = t0 + t1;
			u[zOffset + -12] = k112;
			u[zOffset + -13] = k001;
			t0 = u[zOffset + -6];
			t1 = u[zOffset + -14];
			k001 = t1 - t0;
			u[zOffset + -6] = t0 + t1;
			t0 = u[zOffset + -7];
			t1 = u[zOffset + -15];
			k112 = t0 - t1;
			u[zOffset + -7] = t0 + t1;
			u[zOffset + -14] = (k001 + k112) * A21;
			u[zOffset + -15] = (k001 - k112) * A21;
			var t01 = u[zOffset];
			var t11 = u[zOffset + -4];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + -2];
			t11 = u[zOffset + -6];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + -2] = y0 - y2;
			var k33 = u[zOffset + -3] - u[zOffset + -7];
			u[zOffset + -4] = k002 + k33;
			u[zOffset + -6] = k002 - k33;
			t01 = u[zOffset + -1];
			t11 = u[zOffset + -5];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + -3] + u[zOffset + -7];
			u[zOffset + -1] = y1 + y3;
			u[zOffset + -3] = y1 - y3;
			u[zOffset + -5] = k113 - k22;
			u[zOffset + -7] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + -4];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + -2];
			t12 = u[zOffset1 + -6];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + -2] = y01 - y21;
			var k331 = u[zOffset1 + -3] - u[zOffset1 + -7];
			u[zOffset1 + -4] = k003 + k331;
			u[zOffset1 + -6] = k003 - k331;
			t02 = u[zOffset1 + -1];
			t12 = u[zOffset1 + -5];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + -3] + u[zOffset1 + -7];
			u[zOffset1 + -1] = y11 + y31;
			u[zOffset1 + -3] = y11 - y31;
			u[zOffset1 + -5] = k114 - k221;
			u[zOffset1 + -7] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset11 + 3] = u[k4];
			v[dOffset11 + 2] = u[k4 + 1];
			v[dOffset01 + 3] = u[k4 + 2];
			v[dOffset01 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset11 + 1] = u[k4];
			v[dOffset11] = u[k4 + 1];
			v[dOffset01 + 1] = u[k4 + 2];
			v[dOffset01] = u[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = v[dOffset2] - v[eOffset3 + 2];
			var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset2] + v[eOffset3 + 2];
			var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
			v[dOffset2] = b2 + b0;
			v[dOffset2 + 1] = b3 + b1;
			v[eOffset3 + 2] = b2 - b0;
			v[eOffset3 + 3] = b1 - b3;
			a02 = v[dOffset2 + 2] - v[eOffset3];
			a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset2 + 2] + v[eOffset3];
			b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
			v[dOffset2 + 2] = b2 + b0;
			v[dOffset2 + 3] = b3 + b1;
			v[eOffset3] = b2 - b0;
			v[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			var _this = this.decodeState;
			var tmp;
			if(_this.validBits < 0) {
				tmp = 0;
			} else if(_this.validBits < 1) {
				if(_this.validBits == 0) {
					_this.acc = 0;
				}
				while(true) {
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						_this.validBits = -1;
						break;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
						_this.validBits += 8;
					}
					if(!(_this.validBits < 1)) {
						break;
					}
				}
				if(_this.validBits < 0) {
					tmp = 0;
				} else {
					var z = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z;
				}
			} else {
				var z1 = _this.acc & 1;
				_this.acc = _this.acc >>> 1;
				_this.validBits -= 1;
				tmp = z1;
			}
			if(tmp != 0) {
				while(true) {
					var _this1 = this.decodeState;
					var x;
					if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
						x = -1;
					} else {
						_this1.bytesInSeg--;
						_this1.inputPosition += 1;
						x = _this1.input.readByte();
					}
					_this1.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var _this2 = this.decodeState;
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
		var i;
		if(_this2.validBits < 0) {
			i = 0;
		} else if(_this2.validBits < n1) {
			if(n1 > 24) {
				i = _this2.readBits(24) + (_this2.readBits(n1 - 24) << 24);
			} else {
				if(_this2.validBits == 0) {
					_this2.acc = 0;
				}
				while(true) {
					if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
						_this2.validBits = -1;
						break;
					} else {
						_this2.bytesInSeg--;
						_this2.inputPosition += 1;
						_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
						_this2.validBits += 8;
					}
					if(!(_this2.validBits < n1)) {
						break;
					}
				}
				if(_this2.validBits < 0) {
					i = 0;
				} else {
					var z2 = _this2.acc & (1 << n1) - 1;
					_this2.acc = _this2.acc >>> n1;
					_this2.validBits -= n1;
					i = z2;
				}
			}
		} else {
			var z3 = _this2.acc & (1 << n1) - 1;
			_this2.acc = _this2.acc >>> n1;
			_this2.validBits -= n1;
			i = z3;
		}
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n2;
		var prev;
		var next;
		if(m.blockflag) {
			n2 = this.header.blocksize1;
			var _this3 = this.decodeState;
			if(_this3.validBits < 0) {
				prev = 0;
			} else if(_this3.validBits < 1) {
				if(_this3.validBits == 0) {
					_this3.acc = 0;
				}
				while(true) {
					if(_this3.bytesInSeg == 0 && (_this3.lastSeg || _this3.next() == 0)) {
						_this3.validBits = -1;
						break;
					} else {
						_this3.bytesInSeg--;
						_this3.inputPosition += 1;
						_this3.acc = _this3.acc + (_this3.input.readByte() << _this3.validBits);
						_this3.validBits += 8;
					}
					if(!(_this3.validBits < 1)) {
						break;
					}
				}
				if(_this3.validBits < 0) {
					prev = 0;
				} else {
					var z4 = _this3.acc & 1;
					_this3.acc = _this3.acc >>> 1;
					_this3.validBits -= 1;
					prev = z4;
				}
			} else {
				var z5 = _this3.acc & 1;
				_this3.acc = _this3.acc >>> 1;
				_this3.validBits -= 1;
				prev = z5;
			}
			var _this4 = this.decodeState;
			if(_this4.validBits < 0) {
				next = 0;
			} else if(_this4.validBits < 1) {
				if(_this4.validBits == 0) {
					_this4.acc = 0;
				}
				while(true) {
					if(_this4.bytesInSeg == 0 && (_this4.lastSeg || _this4.next() == 0)) {
						_this4.validBits = -1;
						break;
					} else {
						_this4.bytesInSeg--;
						_this4.inputPosition += 1;
						_this4.acc = _this4.acc + (_this4.input.readByte() << _this4.validBits);
						_this4.validBits += 8;
					}
					if(!(_this4.validBits < 1)) {
						break;
					}
				}
				if(_this4.validBits < 0) {
					next = 0;
				} else {
					var z6 = _this4.acc & 1;
					_this4.acc = _this4.acc >>> 1;
					_this4.validBits -= 1;
					next = z6;
				}
			} else {
				var z7 = _this4.acc & 1;
				_this4.acc = _this4.acc >>> 1;
				_this4.validBits -= 1;
				next = z7;
			}
		} else {
			next = 0;
			prev = next;
			n2 = this.header.blocksize0;
		}
		var windowCenter = n2 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n2 - this.header.blocksize0 >> 2, end : n2 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n2 * 3 - this.header.blocksize0 >> 2, end : n2 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n2}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this2 = new Array(256);
		var reallyZeroChannel = this2;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g1 = 0;
		var _g = this.header.channel;
		while(_g1 < _g) {
			var i = _g1++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				var _this = this.decodeState;
				var tmp;
				if(_this.validBits < 0) {
					tmp = 0;
				} else if(_this.validBits < 1) {
					if(_this.validBits == 0) {
						_this.acc = 0;
					}
					while(true) {
						if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
							_this.validBits = -1;
							break;
						} else {
							_this.bytesInSeg--;
							_this.inputPosition += 1;
							_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
							_this.validBits += 8;
						}
						if(!(_this.validBits < 1)) {
							break;
						}
					}
					if(_this.validBits < 0) {
						tmp = 0;
					} else {
						var z = _this.acc & 1;
						_this.acc = _this.acc >>> 1;
						_this.validBits -= 1;
						tmp = z;
					}
				} else {
					var z1 = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z1;
				}
				if(tmp != 0) {
					var fy = [];
					var this3 = new Array(256);
					var step2Flag = this3;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var _this1 = this.decodeState;
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n1 = (range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1;
					var tmp1;
					if(_this1.validBits < 0) {
						tmp1 = 0;
					} else if(_this1.validBits < n1) {
						if(n1 > 24) {
							tmp1 = _this1.readBits(24) + (_this1.readBits(n1 - 24) << 24);
						} else {
							if(_this1.validBits == 0) {
								_this1.acc = 0;
							}
							while(true) {
								if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
									_this1.validBits = -1;
									break;
								} else {
									_this1.bytesInSeg--;
									_this1.inputPosition += 1;
									_this1.acc = _this1.acc + (_this1.input.readByte() << _this1.validBits);
									_this1.validBits += 8;
								}
								if(!(_this1.validBits < n1)) {
									break;
								}
							}
							if(_this1.validBits < 0) {
								tmp1 = 0;
							} else {
								var z2 = _this1.acc & (1 << n1) - 1;
								_this1.acc = _this1.acc >>> n1;
								_this1.validBits -= n1;
								tmp1 = z2;
							}
						}
					} else {
						var z3 = _this1.acc & (1 << n1) - 1;
						_this1.acc = _this1.acc >>> n1;
						_this1.validBits -= n1;
						tmp1 = z3;
					}
					fy[0] = tmp1;
					var _this2 = this.decodeState;
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n3 = (range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1;
					var tmp2;
					if(_this2.validBits < 0) {
						tmp2 = 0;
					} else if(_this2.validBits < n3) {
						if(n3 > 24) {
							tmp2 = _this2.readBits(24) + (_this2.readBits(n3 - 24) << 24);
						} else {
							if(_this2.validBits == 0) {
								_this2.acc = 0;
							}
							while(true) {
								if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
									_this2.validBits = -1;
									break;
								} else {
									_this2.bytesInSeg--;
									_this2.inputPosition += 1;
									_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
									_this2.validBits += 8;
								}
								if(!(_this2.validBits < n3)) {
									break;
								}
							}
							if(_this2.validBits < 0) {
								tmp2 = 0;
							} else {
								var z4 = _this2.acc & (1 << n3) - 1;
								_this2.acc = _this2.acc >>> n3;
								_this2.validBits -= n3;
								tmp2 = z4;
							}
						}
					} else {
						var z5 = _this2.acc & (1 << n3) - 1;
						_this2.acc = _this2.acc >>> n3;
						_this2.validBits -= n3;
						tmp2 = z5;
					}
					fy[1] = tmp2;
					var _g3 = 0;
					var _g2 = g.partitions;
					while(_g3 < _g2) {
						var j = _g3++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this3 = this.decodeState;
							if(_this3.validBits < 10) {
								_this3.prepHuffman();
							}
							var i1 = c.fastHuffman[_this3.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this3.acc = _this3.acc >>> l;
								_this3.validBits -= l;
								if(_this3.validBits < 0) {
									_this3.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this3.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g5 = 0;
						var _g4 = cdim;
						while(_g5 < _g4) {
							var k = _g5++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp3 = offset++;
							var tmp4;
							if(book >= 0) {
								var _this4 = this.decodeState;
								var c1 = codebooks[book];
								if(_this4.validBits < 10) {
									_this4.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this4.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this4.acc = _this4.acc >>> l1;
									_this4.validBits -= l1;
									if(_this4.validBits < 0) {
										_this4.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this4.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp4 = val1;
							} else {
								tmp4 = 0;
							}
							fy[tmp3] = tmp4;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g31 = 2;
					var _g21 = g.values;
					while(_g31 < _g21) {
						var j1 = _g31++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g32 = 0;
					var _g22 = g.values;
					while(_g32 < _g22) {
						var j2 = _g32++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g11 = 0;
		var _g6 = this.header.channel;
		while(_g11 < _g6) {
			var i3 = _g11++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g12 = 0;
		var _g7 = map.couplingSteps;
		while(_g12 < _g7) {
			var i4 = _g12++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				zeroChannel[map.chan[i4].magnitude] = zeroChannel[map.chan[i4].angle] = false;
			}
		}
		var _g13 = 0;
		var _g8 = map.submaps;
		while(_g13 < _g8) {
			var i5 = _g13++;
			var length = this.header.channel;
			var this4 = new Array(length);
			var residueBuffers = this4;
			var this5 = new Array(256);
			var doNotDecode = this5;
			var ch = 0;
			var _g33 = 0;
			var _g23 = this.header.channel;
			while(_g33 < _g23) {
				var j3 = _g33++;
				if(map.chan[j3].mux == i5) {
					if(zeroChannel[j3]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j3];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i5];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g14 = 0;
			var _g9 = n21;
			while(_g14 < _g9) {
				var j4 = _g14++;
				var a2;
				var m2;
				if(m1[j4] > 0) {
					if(a[j4] > 0) {
						m2 = m1[j4];
						a2 = m1[j4] - a[j4];
					} else {
						a2 = m1[j4];
						m2 = m1[j4] + a[j4];
					}
				} else if(a[j4] > 0) {
					m2 = m1[j4];
					a2 = m1[j4] + a[j4];
				} else {
					a2 = m1[j4];
					m2 = m1[j4] - a[j4];
				}
				m1[j4] = m2;
				a[j4] = a2;
			}
		}
		var _g15 = 0;
		var _g10 = this.header.channel;
		while(_g15 < _g10) {
			var i7 = _g15++;
			if(reallyZeroChannel[i7]) {
				var _g34 = 0;
				var _g24 = n21;
				while(_g34 < _g24) {
					var j5 = _g34++;
					this.channelBuffers[i7][j5] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g16 = 0;
		var _g17 = this.header.channel;
		while(_g16 < _g17) {
			var i8 = _g16++;
			this.inverseMdct(this.channelBuffers[i8],n,m.blockflag);
		}
		var _this5 = this.decodeState;
		while(_this5.bytesInSeg != 0 || !_this5.lastSeg && _this5.next() != 0) {
			_this5.bytesInSeg--;
			_this5.inputPosition += 1;
			_this5.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = $hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = function() { };
kha_audio2_ogg_vorbis_VorbisTools.__name__ = true;
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
	if(!b) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",p));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = _$UInt_UInt_$Impl_$.toFloat(x & 2097151);
	var sign = x & -2147483648;
	var exp = (x & 2145386496) >>> 21;
	var res = sign != 0 ? -mantissa : mantissa;
	return res * Math.pow(2,exp - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	if(!(Math.pow(r + 1,dim) > entries)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "VorbisTools.hx", lineNumber : 155, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"}));
	}
	if((Math.pow(r,dim) | 0) > entries) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "VorbisTools.hx", lineNumber : 156, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"}));
	}
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,window) {
	var n2 = n >> 1;
	var _g1 = 0;
	var _g = n2;
	while(_g1 < _g) {
		var i = _g1++;
		window[i] = Math.sin(1.57079632679489656 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g1 = 0;
	var _g = n8;
	while(_g1 < _g) {
		var i = _g1++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g1 = 0;
	var _g = n4;
	while(_g1 < _g) {
		var k = _g1++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g11 = 0;
	var _g2 = n8;
	while(_g11 < _g2) {
		var k1 = _g11++;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this2 = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable;
			var this3 = new Array(64);
			this2[i] = this3;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		if(dy < 0) {
			sy = base - 1;
		} else {
			sy = base + 1;
		}
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	var _g2 = x;
	var _g11 = output;
	_g11[_g2] = _g11[_g2] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g12 = x + 1;
	var _g3 = x1;
	while(_g12 < _g3) {
		var i1 = _g12++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		var _g21 = i1;
		var _g31 = output;
		_g31[_g21] = _g31[_g21] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var adx = x1 - x0;
	var err = Math.abs(dy) * (x - x0);
	var off = err / adx | 0;
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	var this1 = new Array(len);
	var vec = this1;
	return vec;
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var length = source.length;
	var this1 = new Array(length);
	var dest = this1;
	var _g1 = 0;
	var _g = source.length;
	while(_g1 < _g) {
		var i = _g1++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = $hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = function() {
};
kha_audio2_ogg_vorbis_data_Codebook.__name__ = true;
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	var tmp;
	var tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp2 = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp2 = z1;
	}
	if(tmp2 == 66) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z3;
		}
		tmp1 = tmp3 != 67;
	} else {
		tmp1 = true;
	}
	if(!tmp1) {
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z4 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp4 = z4;
			}
		} else {
			var z5 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z5;
		}
		tmp = tmp4 != 86;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x;
	if(decodeState.validBits < 0) {
		x = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x = z7;
	}
	var tmp5;
	if(decodeState.validBits < 0) {
		tmp5 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else {
			var z8 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z8;
		}
	} else {
		var z9 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp5 = z9;
	}
	c.dimensions = (tmp5 << 8) + x;
	var x1;
	if(decodeState.validBits < 0) {
		x1 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x1 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x1 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x1 = z11;
	}
	var y;
	if(decodeState.validBits < 0) {
		y = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			y = 0;
		} else {
			var z12 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			y = z12;
		}
	} else {
		var z13 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		y = z13;
	}
	var tmp6;
	if(decodeState.validBits < 0) {
		tmp6 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else {
			var z14 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp6 = z14;
		}
	} else {
		var z15 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp6 = z15;
	}
	c.entries = (tmp6 << 16) + (y << 8) + x1;
	var ordered;
	if(decodeState.validBits < 0) {
		ordered = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			ordered = 0;
		} else {
			var z16 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			ordered = z16;
		}
	} else {
		var z17 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		ordered = z17;
	}
	var tmp7;
	if(ordered != 0) {
		tmp7 = false;
	} else {
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z18 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp8 = z18;
			}
		} else {
			var z19 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp8 = z19;
		}
		tmp7 = tmp8 != 0;
	}
	c.sparse = tmp7;
	var length = c.entries;
	var this1 = new Array(length);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength;
		if(decodeState.validBits < 0) {
			currentLength = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				currentLength = 0;
			} else {
				var z20 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				currentLength = z20;
			}
		} else {
			var z21 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			currentLength = z21;
		}
		var currentLength1 = currentLength + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0;
			var n1;
			if(decodeState.validBits < 0) {
				n1 = 0;
			} else if(decodeState.validBits < n) {
				if(n > 24) {
					n1 = decodeState.readBits(24) + (decodeState.readBits(n - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						n1 = 0;
					} else {
						var z22 = decodeState.acc & (1 << n) - 1;
						decodeState.acc = decodeState.acc >>> n;
						decodeState.validBits -= n;
						n1 = z22;
					}
				}
			} else {
				var z23 = decodeState.acc & (1 << n) - 1;
				decodeState.acc = decodeState.acc >>> n;
				decodeState.validBits -= n;
				n1 = z23;
			}
			if(currentEntry + n1 > c.entries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g1 = 0;
			var _g = n1;
			while(_g1 < _g) {
				var i = _g1++;
				lengths[currentEntry + i] = currentLength1;
			}
			currentEntry += n1;
			++currentLength1;
		}
	} else {
		var _g11 = 0;
		var _g2 = c.entries;
		while(_g11 < _g2) {
			var j = _g11++;
			var present;
			if(c.sparse) {
				if(decodeState.validBits < 0) {
					present = 0;
				} else if(decodeState.validBits < 1) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						present = 0;
					} else {
						var z24 = decodeState.acc & 1;
						decodeState.acc = decodeState.acc >>> 1;
						decodeState.validBits -= 1;
						present = z24;
					}
				} else {
					var z25 = decodeState.acc & 1;
					decodeState.acc = decodeState.acc >>> 1;
					decodeState.validBits -= 1;
					present = z25;
				}
			} else {
				present = 1;
			}
			if(present != 0) {
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 5) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 5)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z26 = decodeState.acc & 31;
						decodeState.acc = decodeState.acc >>> 5;
						decodeState.validBits -= 5;
						val = z26;
					}
				} else {
					var z27 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					val = z27;
				}
				lengths[j] = val + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp9;
	if(c.sparse) {
		tmp9 = total;
	} else {
		var sortedCount = 0;
		var _g12 = 0;
		var _g3 = c.entries;
		while(_g12 < _g3) {
			var j1 = _g12++;
			var l = lengths[j1];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp9 = sortedCount;
	}
	c.sortedEntries = tmp9;
	var values = null;
	if(!c.sparse) {
		var length1 = c.entries;
		var this2 = new Array(length1);
		c.codewords = this2;
	} else {
		if(c.sortedEntries != 0) {
			var length2 = c.sortedEntries;
			var this3 = new Array(length2);
			c.codewordLengths = this3;
			var length3 = c.entries;
			var this4 = new Array(length3);
			c.codewords = this4;
			var length4 = c.entries;
			var this5 = new Array(length4);
			values = this5;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var length5 = c.sortedEntries;
		var this6 = new Array(length5);
		c.sortedValues = this6;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	var tmp10;
	if(decodeState.validBits < 0) {
		tmp10 = 0;
	} else if(decodeState.validBits < 4) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 4)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp10 = 0;
		} else {
			var z28 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp10 = z28;
		}
	} else {
		var z29 = decodeState.acc & 15;
		decodeState.acc = decodeState.acc >>> 4;
		decodeState.validBits -= 4;
		tmp10 = z29;
	}
	c.lookupType = tmp10;
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2;
		if(decodeState.validBits < 0) {
			x2 = 0;
		} else if(decodeState.validBits < 32) {
			x2 = decodeState.readBits(24) + (decodeState.readBits(8) << 24);
		} else {
			var z30 = decodeState.acc & -1;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x2 = z30;
		}
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		var sign = x2 & -2147483648;
		var exp = (x2 & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x3;
		if(decodeState.validBits < 0) {
			x3 = 0;
		} else if(decodeState.validBits < 32) {
			x3 = decodeState.readBits(24) + (decodeState.readBits(8) << 24);
		} else {
			var z31 = decodeState.acc & -1;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x3 = z31;
		}
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x3 & 2097151);
		var sign1 = x3 & -2147483648;
		var exp1 = (x3 & 2145386496) >>> 21;
		var res1 = sign1 != 0 ? -mantissa1 : mantissa1;
		c.deltaValue = res1 * Math.pow(2,exp1 - 788);
		var tmp11;
		if(decodeState.validBits < 0) {
			tmp11 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp11 = 0;
			} else {
				var z32 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp11 = z32;
			}
		} else {
			var z33 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp11 = z33;
		}
		c.valueBits = tmp11 + 1;
		var tmp12;
		if(decodeState.validBits < 0) {
			tmp12 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp12 = 0;
			} else {
				var z34 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp12 = z34;
			}
		} else {
			var z35 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp12 = z35;
		}
		c.sequenceP = tmp12 != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var length6 = c.lookupValues;
		var this7 = new Array(length6);
		var mults = this7;
		var _g13 = 0;
		var _g4 = c.lookupValues;
		while(_g13 < _g4) {
			var j2 = _g13++;
			var n2 = c.valueBits;
			var q;
			if(decodeState.validBits < 0) {
				q = 0;
			} else if(decodeState.validBits < n2) {
				if(n2 > 24) {
					q = decodeState.readBits(24) + (decodeState.readBits(n2 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n2)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						q = 0;
					} else {
						var z36 = decodeState.acc & (1 << n2) - 1;
						decodeState.acc = decodeState.acc >>> n2;
						decodeState.validBits -= n2;
						q = z36;
					}
				}
			} else {
				var z37 = decodeState.acc & (1 << n2) - 1;
				decodeState.acc = decodeState.acc >>> n2;
				decodeState.validBits -= n2;
				q = z37;
			}
			if(q == -1) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j2] = q;
		}
		var length7 = c.lookupValues;
		var this8 = new Array(length7);
		c.multiplicands = this8;
		var _g14 = 0;
		var _g5 = c.lookupValues;
		while(_g14 < _g5) {
			var j3 = _g14++;
			c.multiplicands[j3] = mults[j3] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g15 = 1;
			var _g6 = c.lookupValues;
			while(_g15 < _g6) {
				var j4 = _g15++;
				c.multiplicands[j4] = c.multiplicands[j4 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			if(len == 255) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
			}
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		var _g = 0;
		while(_g < 32) {
			var x = _g++;
			available[x] = 0;
		}
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			if(this.sortedEntries != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "Codebook.hx", lineNumber : 228, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"}));
			}
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count1 = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count1] = huffCode;
				this.codewordLengths[count1] = len[i];
				values[count1] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					if(available[y] != 0) {
						throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "Codebook.hx", lineNumber : 272, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"}));
					}
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g1 = 0;
			var _g = this.entries;
			while(_g1 < _g) {
				var i = _g1++;
				var len = lengths[i];
				var tmp;
				if(this.sparse) {
					if(len == 255) {
						throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
					}
					tmp = true;
				} else if(len == 255) {
					tmp = false;
				} else if(len > 10) {
					tmp = true;
				} else {
					tmp = false;
				}
				if(tmp) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
			if(k != this.sortedEntries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "Codebook.hx", lineNumber : 296, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeSortedHuffman"}));
			}
		} else {
			var _g11 = 0;
			var _g2 = this.sortedEntries;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var len1 = this.sparse ? this.sortedEntries : this.entries;
		var _g12 = 0;
		var _g3 = len1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			var tmp1;
			if(this.sparse) {
				if(huffLen == 255) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
				}
				tmp1 = true;
			} else if(huffLen == 255) {
				tmp1 = false;
			} else if(huffLen > 10) {
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g1 = 0;
		var _g = 1024;
		while(_g1 < _g) {
			var i = _g1++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.codewordLengths[i1] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i1];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i1];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i1;
					z += 1 << this.codewordLengths[i1];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i1 = _g1++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1;
				var _g3 = output;
				_g3[_g2] = _g3[_g2] + val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g11 = 0;
			var _g4 = len;
			while(_g11 < _g4) {
				var i2 = _g11++;
				var val2 = multiplicands[z + i2] + last1;
				var _g21 = offset + i2;
				var _g31 = output;
				_g31[_g21] = _g31[_g21] + val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var last2 = 0.0;
			var _g12 = 0;
			var _g5 = len;
			while(_g12 < _g5) {
				var i3 = _g12++;
				var _g22 = offset + i3;
				var _g32 = output;
				_g32[_g22] = _g32[_g22] + (multiplicands[z + i3] + last2);
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i1 = _g1++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1 * step;
				var _g3 = output;
				_g3[_g2] = _g3[_g2] + val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g11 = 0;
		var _g4 = len;
		while(_g11 < _g4) {
			var i2 = _g11++;
			var val2 = multiplicands[z + i2] + last;
			var _g21 = offset + i2 * step;
			var _g31 = output;
			_g31[_g21] = _g31[_g21] + val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		return val;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g1 = 0;
					var _g = effective;
					while(_g1 < _g) {
						var i1 = _g1++;
						var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						var _g2 = pInter;
						var _g3 = residueBuffers[cInter];
						_g3[_g2] = _g3[_g2] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g11 = 0;
					var _g4 = effective;
					while(_g11 < _g4) {
						var i2 = _g11++;
						var off1 = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						var _g21 = pInter;
						var _g31 = residueBuffers[cInter];
						_g31[_g21] = _g31[_g21] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g12 = 0;
					var _g5 = effective;
					while(_g12 < _g5) {
						var i3 = _g12++;
						var val3 = multiplicands[z + i3] + last;
						var _g22 = pInter;
						var _g32 = residueBuffers[cInter];
						_g32[_g22] = _g32[_g22] + val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g13 = 0;
					var _g6 = effective;
					while(_g13 < _g6) {
						var i4 = _g13++;
						var val4 = multiplicands[z + i4] + last;
						var _g23 = pInter;
						var _g33 = residueBuffers[cInter];
						_g33[_g23] = _g33[_g23] + val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g1 = 0;
			var _g = step;
			while(_g1 < _g) {
				var k = _g1++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = $hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = function() {
	this.data = new haxe_ds_StringMap();
};
kha_audio2_ogg_vorbis_data_Comment.__name__ = true;
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).push(value);
		} else {
			var v = [value];
			var _this2 = this.data;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,v);
			} else {
				_this2.h[key] = v;
			}
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])[0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
	,__properties__: {get_artists:"get_artists",get_isrc:"get_isrc",get_contact:"get_contact",get_location:"get_location",get_date:"get_date",get_genre:"get_genre",get_description:"get_description",get_artist:"get_artist",get_license:"get_license",get_copyright:"get_copyright",get_performer:"get_performer",get_tracknumber:"get_tracknumber",get_organization:"get_organization",get_album:"get_album",get_version:"get_version",get_loopLength:"get_loopLength",get_loopStart:"get_loopStart",get_title:"get_title"}
};
var kha_audio2_ogg_vorbis_data_Floor = $hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = function() {
};
kha_audio2_ogg_vorbis_data_Floor.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	floor.type = tmp;
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp1 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp1 = z3;
		}
		g.order = tmp1;
		var tmp2;
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp2 = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp2 = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z5;
		}
		g.rate = tmp2;
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z6 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp3 = z6;
			}
		} else {
			var z7 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp3 = z7;
		}
		g.barkMapSize = tmp3;
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 6) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 6)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z8 = decodeState.acc & 63;
				decodeState.acc = decodeState.acc >>> 6;
				decodeState.validBits -= 6;
				tmp4 = z8;
			}
		} else {
			var z9 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			tmp4 = z9;
		}
		g.amplitudeBits = tmp4;
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z10 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp5 = z10;
			}
		} else {
			var z11 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z11;
		}
		g.amplitudeOffset = tmp5;
		var tmp6;
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp6 = 0;
			} else {
				var z12 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp6 = z12;
			}
		} else {
			var z13 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp6 = z13;
		}
		g.numberOfBooks = tmp6 + 1;
		var _g1 = 0;
		var _g = g.numberOfBooks;
		while(_g1 < _g) {
			var j = _g1++;
			var this1 = g.bookList;
			var val;
			if(decodeState.validBits < 0) {
				val = 0;
			} else if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val = 0;
				} else {
					var z14 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z14;
				}
			} else {
				var z15 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z15;
			}
			this1[j] = val;
		}
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		var tmp7;
		if(decodeState.validBits < 0) {
			tmp7 = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else {
				var z16 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				tmp7 = z16;
			}
		} else {
			var z17 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			tmp7 = z17;
		}
		g1.partitions = tmp7;
		var length = g1.partitions;
		var this2 = new Array(length);
		g1.partitionClassList = this2;
		var _g11 = 0;
		var _g2 = g1.partitions;
		while(_g11 < _g2) {
			var j1 = _g11++;
			var this3 = g1.partitionClassList;
			var val1;
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val1 = 0;
				} else {
					var z18 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					val1 = z18;
				}
			} else {
				var z19 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				val1 = z19;
			}
			this3[j1] = val1;
			if(g1.partitionClassList[j1] > maxClass) {
				maxClass = g1.partitionClassList[j1];
			}
		}
		var this4 = new Array(maxClass + 1);
		g1.classDimensions = this4;
		var this5 = new Array(maxClass + 1);
		g1.classMasterbooks = this5;
		var this6 = new Array(maxClass + 1);
		g1.classSubclasses = this6;
		var this7 = new Array(maxClass + 1);
		g1.subclassBooks = this7;
		var _g12 = 0;
		var _g3 = maxClass + 1;
		while(_g12 < _g3) {
			var j2 = _g12++;
			var this8 = g1.classDimensions;
			var val2;
			if(decodeState.validBits < 0) {
				val2 = 0;
			} else if(decodeState.validBits < 3) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 3)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val2 = 0;
				} else {
					var z20 = decodeState.acc & 7;
					decodeState.acc = decodeState.acc >>> 3;
					decodeState.validBits -= 3;
					val2 = z20;
				}
			} else {
				var z21 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				val2 = z21;
			}
			this8[j2] = val2 + 1;
			var this9 = g1.classSubclasses;
			var val3;
			if(decodeState.validBits < 0) {
				val3 = 0;
			} else if(decodeState.validBits < 2) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 2)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val3 = 0;
				} else {
					var z22 = decodeState.acc & 3;
					decodeState.acc = decodeState.acc >>> 2;
					decodeState.validBits -= 2;
					val3 = z22;
				}
			} else {
				var z23 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				val3 = z23;
			}
			this9[j2] = val3;
			if(g1.classSubclasses[j2] != 0) {
				var this10 = g1.classMasterbooks;
				var val4;
				if(decodeState.validBits < 0) {
					val4 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val4 = 0;
					} else {
						var z24 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val4 = z24;
					}
				} else {
					var z25 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val4 = z25;
				}
				this10[j2] = val4;
				if(g1.classMasterbooks[j2] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j2];
			var this11 = g1.subclassBooks;
			var this12 = new Array(kl);
			this11[j2] = this12;
			var _g31 = 0;
			var _g21 = kl;
			while(_g31 < _g21) {
				var k = _g31++;
				var this13 = g1.subclassBooks[j2];
				var val5;
				if(decodeState.validBits < 0) {
					val5 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val5 = 0;
					} else {
						var z26 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val5 = z26;
					}
				} else {
					var z27 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val5 = z27;
				}
				this13[k] = val5 - 1;
				if(g1.subclassBooks[j2][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 2) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 2)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z28 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				tmp8 = z28;
			}
		} else {
			var z29 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp8 = z29;
		}
		g1.floor1Multiplier = tmp8 + 1;
		var tmp9;
		if(decodeState.validBits < 0) {
			tmp9 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp9 = 0;
			} else {
				var z30 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp9 = z30;
			}
		} else {
			var z31 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp9 = z31;
		}
		g1.rangebits = tmp9;
		var this14 = new Array(250);
		g1.xlist = this14;
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g13 = 0;
		var _g4 = g1.partitions;
		while(_g13 < _g4) {
			var j3 = _g13++;
			var c = g1.partitionClassList[j3];
			var _g32 = 0;
			var _g22 = g1.classDimensions[c];
			while(_g32 < _g22) {
				var k1 = _g32++;
				var this15 = g1.xlist;
				var index = g1.values;
				var n = g1.rangebits;
				var val6;
				if(decodeState.validBits < 0) {
					val6 = 0;
				} else if(decodeState.validBits < n) {
					if(n > 24) {
						val6 = decodeState.readBits(24) + (decodeState.readBits(n - 24) << 24);
					} else {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < n)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							val6 = 0;
						} else {
							var z32 = decodeState.acc & (1 << n) - 1;
							decodeState.acc = decodeState.acc >>> n;
							decodeState.validBits -= n;
							val6 = z32;
						}
					}
				} else {
					var z33 = decodeState.acc & (1 << n) - 1;
					decodeState.acc = decodeState.acc >>> n;
					decodeState.validBits -= n;
					val6 = z33;
				}
				this15[index] = val6;
				g1.values++;
			}
		}
		var _g14 = 0;
		var _g5 = g1.values;
		while(_g14 < _g5) {
			var j4 = _g14++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j4].x = g1.xlist[j4];
			p[j4].y = j4;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		var length1 = g1.values;
		var this16 = new Array(length1);
		g1.sortedOrder = this16;
		var _g15 = 0;
		var _g6 = g1.values;
		while(_g15 < _g6) {
			var j5 = _g15++;
			g1.sortedOrder[j5] = p[j5].y;
		}
		var length2 = g1.values;
		var this17 = new Array(length2);
		g1.neighbors = this17;
		var _g16 = 2;
		var _g7 = g1.values;
		while(_g16 < _g7) {
			var j6 = _g16++;
			var ne_low;
			var ne_high;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g17 = 0;
			var _g8 = j6;
			while(_g17 < _g8) {
				var i = _g17++;
				if(x[i] > low && x[i] < x[j6]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j6]) {
					phigh = i;
					high = x[i];
				}
			}
			ne_low = plow;
			ne_high = phigh;
			var this18 = g1.neighbors;
			var length3 = g1.values;
			var this19 = new Array(length3);
			this18[j6] = this19;
			g1.neighbors[j6][0] = ne_low;
			g1.neighbors[j6][1] = ne_high;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = $hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = function() {
};
kha_audio2_ogg_vorbis_data_Floor0.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = $hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = function() {
};
kha_audio2_ogg_vorbis_data_Floor1.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = $hxClasses["kha.audio2.ogg.vorbis.data.Header"] = function() {
};
kha_audio2_ogg_vorbis_data_Header.__name__ = true;
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var x;
		if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
			x = -1;
		} else {
			decodeState.bytesInSeg--;
			decodeState.inputPosition += 1;
			x = decodeState.input.readByte();
		}
		decodeState.validBits = 0;
		header.b[i] = x & 255;
	}
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "VorbisDecodeState.hx", lineNumber : 300, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x1 = decodeState.input.readByte();
	var log0 = x1 & 15;
	var log1 = x1 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x2 = decodeState.input.readByte();
	if((x2 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header1.vendor = packetInput.readString(vendorLength);
	header1.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g1 = 0;
	var _g2 = commentCount;
	while(_g1 < _g2) {
		var i1 = _g1++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x3 = packetInput.readByte();
	if((x3 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x4 != 5) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var _g3 = 0;
	while(_g3 < 6) {
		var i2 = _g3++;
		var x5;
		if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
			x5 = -1;
		} else {
			decodeState.bytesInSeg--;
			decodeState.inputPosition += 1;
			x5 = decodeState.input.readByte();
		}
		decodeState.validBits = 0;
		header2.b[i2] = x5 & 255;
	}
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "VorbisDecodeState.hx", lineNumber : 300, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount;
	if(decodeState.validBits < 0) {
		codebookCount = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			codebookCount = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			codebookCount = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		codebookCount = z1;
	}
	var codebookCount1 = codebookCount + 1;
	var this1 = new Array(codebookCount1);
	header1.codebooks = this1;
	var _g11 = 0;
	var _g4 = codebookCount1;
	while(_g11 < _g4) {
		var i3 = _g11++;
		header1.codebooks[i3] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	}
	var x6;
	if(decodeState.validBits < 0) {
		x6 = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x6 = 0;
		} else {
			var z2 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			x6 = z2;
		}
	} else {
		var z3 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		x6 = z3;
	}
	x2 = x6 + 1;
	var _g12 = 0;
	var _g5 = x2;
	while(_g12 < _g5) {
		var i4 = _g12++;
		var tmp;
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z5;
		}
		if(tmp != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount;
	if(decodeState.validBits < 0) {
		floorCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			floorCount = 0;
		} else {
			var z6 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			floorCount = z6;
		}
	} else {
		var z7 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		floorCount = z7;
	}
	var floorCount1 = floorCount + 1;
	var this2 = new Array(floorCount1);
	header1.floorConfig = this2;
	var _g13 = 0;
	var _g6 = floorCount1;
	while(_g13 < _g6) {
		var i5 = _g13++;
		header1.floorConfig[i5] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header1.codebooks);
	}
	var residueCount;
	if(decodeState.validBits < 0) {
		residueCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			residueCount = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			residueCount = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		residueCount = z9;
	}
	var residueCount1 = residueCount + 1;
	var this3 = new Array(residueCount1);
	header1.residueConfig = this3;
	var _g14 = 0;
	var _g7 = residueCount1;
	while(_g14 < _g7) {
		var i6 = _g14++;
		header1.residueConfig[i6] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header1.codebooks);
	}
	var mappingCount;
	if(decodeState.validBits < 0) {
		mappingCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingCount = 0;
		} else {
			var z10 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			mappingCount = z10;
		}
	} else {
		var z11 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		mappingCount = z11;
	}
	var mappingCount1 = mappingCount + 1;
	var this4 = new Array(mappingCount1);
	header1.mapping = this4;
	var _g15 = 0;
	var _g8 = mappingCount1;
	while(_g15 < _g8) {
		var i7 = _g15++;
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[i7] = map;
		var _g31 = 0;
		var _g21 = map.submaps;
		while(_g31 < _g21) {
			var j = _g31++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount;
	if(decodeState.validBits < 0) {
		modeCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			modeCount = 0;
		} else {
			var z12 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			modeCount = z12;
		}
	} else {
		var z13 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		modeCount = z13;
	}
	var modeCount1 = modeCount + 1;
	var this5 = new Array(modeCount1);
	header1.modes = this5;
	var _g16 = 0;
	var _g9 = modeCount1;
	while(_g16 < _g9) {
		var i8 = _g16++;
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header1.modes[i8] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = $hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = function() {
};
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = true;
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = $hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = function() {
};
kha_audio2_ogg_vorbis_data_Mapping.__name__ = true;
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType;
	if(decodeState.validBits < 0) {
		mappingType = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingType = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			mappingType = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		mappingType = z1;
	}
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g1 = 0;
	var _g = channels;
	while(_g1 < _g) {
		var j = _g1++;
		m.chan[j] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	}
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z2 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z2;
		}
	} else {
		var z3 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z3;
	}
	if(tmp != 0) {
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z4 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp1 = z4;
			}
		} else {
			var z5 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp1 = z5;
		}
		m.submaps = tmp1 + 1;
	} else {
		m.submaps = 1;
	}
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z6 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp2 = z6;
		}
	} else {
		var z7 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp2 = z7;
	}
	if(tmp2 != 0) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z8 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z8;
			}
		} else {
			var z9 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z9;
		}
		m.couplingSteps = tmp3 + 1;
		var _g11 = 0;
		var _g2 = m.couplingSteps;
		while(_g11 < _g2) {
			var k = _g11++;
			var tmp4 = m.chan[k];
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
			var tmp5;
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else if(decodeState.validBits < n1) {
				if(n1 > 24) {
					tmp5 = decodeState.readBits(24) + (decodeState.readBits(n1 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp5 = 0;
					} else {
						var z10 = decodeState.acc & (1 << n1) - 1;
						decodeState.acc = decodeState.acc >>> n1;
						decodeState.validBits -= n1;
						tmp5 = z10;
					}
				}
			} else {
				var z11 = decodeState.acc & (1 << n1) - 1;
				decodeState.acc = decodeState.acc >>> n1;
				decodeState.validBits -= n1;
				tmp5 = z11;
			}
			tmp4.magnitude = tmp5;
			var tmp6 = m.chan[k];
			var n2 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n3 = n2 < 16384 ? n2 < 16 ? log2_41[n2] : n2 < 512 ? 5 + log2_41[n2 >> 5] : 10 + log2_41[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_41[n2 >> 15] : 20 + log2_41[n2 >> 20] : n2 < 536870912 ? 25 + log2_41[n2 >> 25] : n2 < -2147483648 ? 30 + log2_41[n2 >> 30] : 0;
			var tmp7;
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else if(decodeState.validBits < n3) {
				if(n3 > 24) {
					tmp7 = decodeState.readBits(24) + (decodeState.readBits(n3 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n3)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp7 = 0;
					} else {
						var z12 = decodeState.acc & (1 << n3) - 1;
						decodeState.acc = decodeState.acc >>> n3;
						decodeState.validBits -= n3;
						tmp7 = z12;
					}
				}
			} else {
				var z13 = decodeState.acc & (1 << n3) - 1;
				decodeState.acc = decodeState.acc >>> n3;
				decodeState.validBits -= n3;
				tmp7 = z13;
			}
			tmp6.angle = tmp7;
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	var tmp8;
	if(decodeState.validBits < 0) {
		tmp8 = 0;
	} else if(decodeState.validBits < 2) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 2)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else {
			var z14 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp8 = z14;
		}
	} else {
		var z15 = decodeState.acc & 3;
		decodeState.acc = decodeState.acc >>> 2;
		decodeState.validBits -= 2;
		tmp8 = z15;
	}
	if(tmp8 != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g12 = 0;
		var _g3 = channels;
		while(_g12 < _g3) {
			var j1 = _g12++;
			var tmp9 = m.chan[j1];
			var tmp10;
			if(decodeState.validBits < 0) {
				tmp10 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					tmp10 = 0;
				} else {
					var z16 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					tmp10 = z16;
				}
			} else {
				var z17 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp10 = z17;
			}
			tmp9.mux = tmp10;
			if(m.chan[j1].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g13 = 0;
		var _g4 = channels;
		while(_g13 < _g4) {
			var j2 = _g13++;
			m.chan[j2].mux = 0;
		}
	}
	var length = m.submaps;
	var this2 = new Array(length);
	m.submapFloor = this2;
	var length1 = m.submaps;
	var this3 = new Array(length1);
	m.submapResidue = this3;
	var _g14 = 0;
	var _g5 = m.submaps;
	while(_g14 < _g5) {
		var j3 = _g14++;
		if(decodeState.validBits >= 0) {
			if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits >= 0) {
					var z18 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
				}
			} else {
				var z19 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
			}
		}
		var this4 = m.submapFloor;
		var val;
		if(decodeState.validBits < 0) {
			val = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val = 0;
			} else {
				var z20 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z20;
			}
		} else {
			var z21 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val = z21;
		}
		this4[j3] = val;
		var this5 = m.submapResidue;
		var val1;
		if(decodeState.validBits < 0) {
			val1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else {
				var z22 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val1 = z22;
			}
		} else {
			var z23 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val1 = z23;
		}
		this5[j3] = val1;
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor1 = floors[this.submapFloor[s]];
		if(floor1.type == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor1.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g1 = 1;
			var _g = g.values;
			while(_g1 < _g) {
				var q = _g1++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g11 = lx;
				var _g2 = n2;
				while(_g11 < _g2) {
					var j1 = _g11++;
					var _g21 = j1;
					var _g3 = target;
					_g3[_g21] = _g3[_g21] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = $hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = function() {
};
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = true;
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = $hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = function() {
};
kha_audio2_ogg_vorbis_data_Mode.__name__ = true;
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z1;
	}
	m.blockflag = tmp != 0;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp1 = z3;
	}
	m.windowtype = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp2 = z5;
	}
	m.transformtype = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp3 = z7;
	}
	m.mapping = tmp3;
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = $hxClasses["kha.audio2.ogg.vorbis.data.Page"] = function() {
};
kha_audio2_ogg_vorbis_data_Page.__name__ = true;
kha_audio2_ogg_vorbis_data_Page.prototype = {
	clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 323, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = $hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = function() { };
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = true;
var kha_audio2_ogg_vorbis_data_ProbedPage = $hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = function() {
};
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = true;
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = $hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = true;
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxClasses["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : true, __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"] };
kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA = ["NEED_MORE_DATA",0];
kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING = ["INVALID_API_MIXING",1];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM = ["OUTOFMEM",2];
kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED = ["FEATURE_NOT_SUPPORTED",3];
kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS = ["TOO_MANY_CHANNELS",4];
kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE = ["FILE_OPEN_FAILURE",5];
kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH = ["SEEK_WITHOUT_LENGTH",6];
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF = ["UNEXPECTED_EOF",7];
kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID = ["SEEK_INVALID",8];
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP = ["INVALID_SETUP",9];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM = ["INVALID_STREAM",10];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN = ["MISSING_CAPTURE_PATTERN",11];
kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION = ["INVALID_STREAM_STRUCTURE_VERSION",12];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID = ["CONTINUED_PACKET_FLAG_INVALID",13];
kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER = ["INCORRECT_STREAM_SERIAL_NUMBER",14];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE = ["INVALID_FIRST_PAGE",15];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE = ["BAD_PACKET_TYPE",16];
kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE = ["CANT_FIND_LAST_PAGE",17];
kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED = ["SEEK_FAILED",18];
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER = ["OTHER",19];
kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
var kha_audio2_ogg_vorbis_data_Residue = $hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = function() {
};
kha_audio2_ogg_vorbis_data_Residue.__name__ = true;
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	r.type = tmp;
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp1 = z3;
	}
	r.begin = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp2 = z5;
	}
	r.end = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp3 = z7;
	}
	r.partSize = tmp3 + 1;
	var classifications;
	if(decodeState.validBits < 0) {
		classifications = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			classifications = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			classifications = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		classifications = z9;
	}
	var classifications1 = r.classifications = classifications + 1;
	var tmp4;
	if(decodeState.validBits < 0) {
		tmp4 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp4 = z11;
	}
	r.classbook = tmp4;
	var _g1 = 0;
	var _g = r.classifications;
	while(_g1 < _g) {
		var j = _g1++;
		var highBits = 0;
		var lowBits;
		if(decodeState.validBits < 0) {
			lowBits = 0;
		} else if(decodeState.validBits < 3) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 3)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				lowBits = 0;
			} else {
				var z12 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				lowBits = z12;
			}
		} else {
			var z13 = decodeState.acc & 7;
			decodeState.acc = decodeState.acc >>> 3;
			decodeState.validBits -= 3;
			lowBits = z13;
		}
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z14 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp5 = z14;
			}
		} else {
			var z15 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp5 = z15;
		}
		if(tmp5 != 0) {
			if(decodeState.validBits < 0) {
				highBits = 0;
			} else if(decodeState.validBits < 5) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 5)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					highBits = 0;
				} else {
					var z16 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					highBits = z16;
				}
			} else {
				var z17 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				highBits = z17;
			}
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var length = r.classifications;
	var this2 = new Array(length);
	r.residueBooks = this2;
	var _g11 = 0;
	var _g2 = r.classifications;
	while(_g11 < _g2) {
		var j1 = _g11++;
		var this3 = r.residueBooks;
		var this4 = new Array(8);
		this3[j1] = this4;
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				var this5 = r.residueBooks[j1];
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z18 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val = z18;
					}
				} else {
					var z19 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z19;
				}
				this5[k] = val;
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this6 = new Array(el);
	r.classdata = this6;
	var _g12 = 0;
	var _g3 = el;
	while(_g12 < _g3) {
		var j2 = _g12++;
		var temp = j2;
		var k1 = classwords;
		var this7 = r.classdata;
		var this8 = new Array(classwords);
		var cd = this7[j2] = this8;
		while(--k1 >= 0) {
			cd[k1] = temp % classifications1;
			temp = temp / classifications1 | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(nRead) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var length = header.channel * partRead + 1;
		var this1 = new Array(length);
		var classifications = this1;
		var _g1 = 0;
		var _g = ch;
		while(_g1 < _g) {
			var i = _g1++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g3 = 0;
				var _g2 = buffer.length;
				while(_g3 < _g2) {
					var j = _g3++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g11 = 0;
			var _g4 = ch;
			while(_g11 < _g4) {
				var j1 = _g11++;
				if(!doNotDecode[j1]) {
					break;
				} else if(j1 == ch - 1) {
					return;
				}
			}
			var _g5 = 0;
			while(_g5 < 8) {
				var pass = _g5++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i2 = classwords;
							while(--i2 >= 0) {
								classifications[i2 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g21 = 0;
						var _g12 = classwords;
						while(_g21 < _g12) {
							var i3 = _g21++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i4 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i4 >= 0) {
								var l1 = c2.codewordLengths[i4];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i4;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i5 = classwords;
							while(--i5 >= 0) {
								classifications[i5 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g22 = 0;
						var _g13 = classwords;
						while(_g22 < _g13) {
							var i6 = _g22++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c3.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i7 >= 0) {
								var l2 = c3.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i7;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val2 = c3.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i8 = classwords;
							while(--i8 >= 0) {
								classifications[i8 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g23 = 0;
						var _g14 = classwords;
						while(_g23 < _g14) {
							var i9 = _g23++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g6 = 0;
		while(_g6 < 8) {
			var pass1 = _g6++;
			var pcount1 = 0;
			var classSet1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g24 = 0;
					var _g15 = ch;
					while(_g24 < _g15) {
						var j2 = _g24++;
						if(!doNotDecode[j2]) {
							var c4 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i10 = c4.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i10 >= 0) {
								var l3 = c4.codewordLengths[i10];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i10;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c4);
							}
							if(c4.sparse) {
								val3 = c4.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							var i11 = classwords;
							while(--i11 >= 0) {
								classifications[j2 * partRead + i11 + pcount1] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g25 = 0;
				var _g16 = classwords;
				while(_g25 < _g16) {
					var i12 = _g25++;
					if(pcount1 >= partRead) {
						break;
					}
					var _g41 = 0;
					var _g31 = ch;
					while(_g41 < _g31) {
						var j3 = _g41++;
						if(!doNotDecode[j3]) {
							var c5 = classifications[j3 * partRead + pcount1];
							var b3 = this.residueBooks[c5][pass1];
							if(b3 >= 0) {
								var target = residueBuffers[j3];
								var offset = this.begin + pcount1 * partSize;
								var n1 = partSize;
								var book3 = codebooks[b3];
								if(!book3.residueDecode(decodeState,target,offset,n1,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = $hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = function() { };
kha_audio2_ogg_vorbis_data_Setting.__name__ = true;
var kha_graphics1_Graphics = $hxClasses["kha.graphics1.Graphics"] = function() { };
kha_graphics1_Graphics.__name__ = true;
kha_graphics1_Graphics.prototype = {
	__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = $hxClasses["kha.graphics2.Graphics"] = function() {
	this.transformations = [];
	this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
	this.opacities = [];
	this.opacities.push(1);
	this.myFontSize = 12;
	this.pipe = null;
};
kha_graphics2_Graphics.__name__ = true;
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return kha_graphics2_ImageScaleQuality.Low;
	}
	,set_imageScaleQuality: function(value) {
		return kha_graphics2_ImageScaleQuality.High;
	}
	,get_mipmapScaleQuality: function() {
		return kha_graphics2_ImageScaleQuality.Low;
	}
	,set_mipmapScaleQuality: function(value) {
		return kha_graphics2_ImageScaleQuality.High;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_fontGlyphs: function() {
		return kha_graphics2_Graphics._glyphs;
	}
	,set_fontGlyphs: function(value) {
		return kha_graphics2_Graphics._glyphs = value;
	}
	,pushTransformation: function(transformation) {
		var trans = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
		trans._00 = transformation._00;
		trans._10 = transformation._10;
		trans._20 = transformation._20;
		trans._01 = transformation._01;
		trans._11 = transformation._11;
		trans._21 = transformation._21;
		trans._02 = transformation._02;
		trans._12 = transformation._12;
		trans._22 = transformation._22;
		this.setTransformation(trans);
		this.transformations.push(trans);
	}
	,popTransformation: function() {
		var ret = this.transformations.pop();
		this.setTransformation(this.transformations[this.transformations.length - 1]);
		return ret;
	}
	,get_transformation: function() {
		return this.transformations[this.transformations.length - 1];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformations.length - 1];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,translation: function(tx,ty) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00 = 1;
		_this__10 = 0;
		_this__20 = tx;
		_this__01 = 0;
		_this__11 = 1;
		_this__21 = ty;
		_this__02 = 0;
		_this__12 = 0;
		_this__22 = 1;
		var m = this.transformations[this.transformations.length - 1];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00 = 1;
		_this__10 = 0;
		_this__20 = tx;
		_this__01 = 0;
		_this__11 = 1;
		_this__21 = ty;
		_this__02 = 0;
		_this__12 = 0;
		_this__22 = 1;
		var m = this.transformations[this.transformations.length - 1];
		var transformation = new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformations.length - 1];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
	}
	,pushTranslation: function(tx,ty) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00 = 1;
		_this__10 = 0;
		_this__20 = tx;
		_this__01 = 0;
		_this__11 = 1;
		_this__21 = ty;
		_this__02 = 0;
		_this__12 = 0;
		_this__22 = 1;
		var m = this.transformations[this.transformations.length - 1];
		this.pushTransformation(new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22));
	}
	,rotation: function(angle,centerx,centery) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00;
		var _this__221;
		var _this__211;
		var _this__201;
		var _this__121;
		var _this__111;
		var _this__101;
		var _this__021;
		var _this__011;
		var _this__001;
		var _this__222;
		var _this__212;
		var _this__202;
		var _this__122;
		var _this__112;
		var _this__102;
		var _this__022;
		var _this__012;
		var _this__002 = 1;
		_this__102 = 0;
		_this__202 = centerx;
		_this__012 = 0;
		_this__112 = 1;
		_this__212 = centery;
		_this__022 = 0;
		_this__122 = 0;
		_this__222 = 1;
		var m__22;
		var m__21;
		var m__20;
		var m__12;
		var m__11;
		var m__10;
		var m__02;
		var m__01;
		var m__00 = Math.cos(angle);
		m__10 = -Math.sin(angle);
		m__20 = 0;
		m__01 = Math.sin(angle);
		m__11 = Math.cos(angle);
		m__21 = 0;
		m__02 = 0;
		m__12 = 0;
		m__22 = 1;
		_this__001 = _this__002 * m__00 + _this__102 * m__01 + _this__202 * m__02;
		_this__101 = _this__002 * m__10 + _this__102 * m__11 + _this__202 * m__12;
		_this__201 = _this__002 * m__20 + _this__102 * m__21 + _this__202 * m__22;
		_this__011 = _this__012 * m__00 + _this__112 * m__01 + _this__212 * m__02;
		_this__111 = _this__012 * m__10 + _this__112 * m__11 + _this__212 * m__12;
		_this__211 = _this__012 * m__20 + _this__112 * m__21 + _this__212 * m__22;
		_this__021 = _this__022 * m__00 + _this__122 * m__01 + _this__222 * m__02;
		_this__121 = _this__022 * m__10 + _this__122 * m__11 + _this__222 * m__12;
		_this__221 = _this__022 * m__20 + _this__122 * m__21 + _this__222 * m__22;
		var m__221;
		var m__211;
		var m__201;
		var m__121;
		var m__111;
		var m__101;
		var m__021;
		var m__011;
		var m__001 = 1;
		m__101 = 0;
		m__201 = -centerx;
		m__011 = 0;
		m__111 = 1;
		m__211 = -centery;
		m__021 = 0;
		m__121 = 0;
		m__221 = 1;
		_this__00 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		_this__10 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		_this__20 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		_this__01 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		_this__11 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		_this__21 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		_this__02 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		_this__12 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		_this__22 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformations.length - 1];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,rotate: function(angle,centerx,centery) {
		var temp__22;
		var temp__21;
		var temp__20;
		var temp__12;
		var temp__11;
		var temp__10;
		var temp__02;
		var temp__01;
		var temp__00;
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00;
		var _this__221;
		var _this__211;
		var _this__201;
		var _this__121;
		var _this__111;
		var _this__101;
		var _this__021;
		var _this__011;
		var _this__001;
		var _this__222;
		var _this__212;
		var _this__202;
		var _this__122;
		var _this__112;
		var _this__102;
		var _this__022;
		var _this__012;
		var _this__002 = 1;
		_this__102 = 0;
		_this__202 = centerx;
		_this__012 = 0;
		_this__112 = 1;
		_this__212 = centery;
		_this__022 = 0;
		_this__122 = 0;
		_this__222 = 1;
		var m__22;
		var m__21;
		var m__20;
		var m__12;
		var m__11;
		var m__10;
		var m__02;
		var m__01;
		var m__00 = Math.cos(angle);
		m__10 = -Math.sin(angle);
		m__20 = 0;
		m__01 = Math.sin(angle);
		m__11 = Math.cos(angle);
		m__21 = 0;
		m__02 = 0;
		m__12 = 0;
		m__22 = 1;
		_this__001 = _this__002 * m__00 + _this__102 * m__01 + _this__202 * m__02;
		_this__101 = _this__002 * m__10 + _this__102 * m__11 + _this__202 * m__12;
		_this__201 = _this__002 * m__20 + _this__102 * m__21 + _this__202 * m__22;
		_this__011 = _this__012 * m__00 + _this__112 * m__01 + _this__212 * m__02;
		_this__111 = _this__012 * m__10 + _this__112 * m__11 + _this__212 * m__12;
		_this__211 = _this__012 * m__20 + _this__112 * m__21 + _this__212 * m__22;
		_this__021 = _this__022 * m__00 + _this__122 * m__01 + _this__222 * m__02;
		_this__121 = _this__022 * m__10 + _this__122 * m__11 + _this__222 * m__12;
		_this__221 = _this__022 * m__20 + _this__122 * m__21 + _this__222 * m__22;
		var m__221;
		var m__211;
		var m__201;
		var m__121;
		var m__111;
		var m__101;
		var m__021;
		var m__011;
		var m__001 = 1;
		m__101 = 0;
		m__201 = -centerx;
		m__011 = 0;
		m__111 = 1;
		m__211 = -centery;
		m__021 = 0;
		m__121 = 0;
		m__221 = 1;
		_this__00 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		_this__10 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		_this__20 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		_this__01 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		_this__11 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		_this__21 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		_this__02 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		_this__12 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		_this__22 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformations.length - 1];
		temp__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		temp__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		temp__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		temp__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		temp__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		temp__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		temp__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		temp__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		temp__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformations[this.transformations.length - 1]._00 = temp__00;
		this.transformations[this.transformations.length - 1]._01 = temp__01;
		this.transformations[this.transformations.length - 1]._02 = temp__02;
		this.transformations[this.transformations.length - 1]._10 = temp__10;
		this.transformations[this.transformations.length - 1]._11 = temp__11;
		this.transformations[this.transformations.length - 1]._12 = temp__12;
		this.transformations[this.transformations.length - 1]._20 = temp__20;
		this.transformations[this.transformations.length - 1]._21 = temp__21;
		this.transformations[this.transformations.length - 1]._22 = temp__22;
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00;
		var _this__221;
		var _this__211;
		var _this__201;
		var _this__121;
		var _this__111;
		var _this__101;
		var _this__021;
		var _this__011;
		var _this__001;
		var _this__222;
		var _this__212;
		var _this__202;
		var _this__122;
		var _this__112;
		var _this__102;
		var _this__022;
		var _this__012;
		var _this__002 = 1;
		_this__102 = 0;
		_this__202 = centerx;
		_this__012 = 0;
		_this__112 = 1;
		_this__212 = centery;
		_this__022 = 0;
		_this__122 = 0;
		_this__222 = 1;
		var m__22;
		var m__21;
		var m__20;
		var m__12;
		var m__11;
		var m__10;
		var m__02;
		var m__01;
		var m__00 = Math.cos(angle);
		m__10 = -Math.sin(angle);
		m__20 = 0;
		m__01 = Math.sin(angle);
		m__11 = Math.cos(angle);
		m__21 = 0;
		m__02 = 0;
		m__12 = 0;
		m__22 = 1;
		_this__001 = _this__002 * m__00 + _this__102 * m__01 + _this__202 * m__02;
		_this__101 = _this__002 * m__10 + _this__102 * m__11 + _this__202 * m__12;
		_this__201 = _this__002 * m__20 + _this__102 * m__21 + _this__202 * m__22;
		_this__011 = _this__012 * m__00 + _this__112 * m__01 + _this__212 * m__02;
		_this__111 = _this__012 * m__10 + _this__112 * m__11 + _this__212 * m__12;
		_this__211 = _this__012 * m__20 + _this__112 * m__21 + _this__212 * m__22;
		_this__021 = _this__022 * m__00 + _this__122 * m__01 + _this__222 * m__02;
		_this__121 = _this__022 * m__10 + _this__122 * m__11 + _this__222 * m__12;
		_this__221 = _this__022 * m__20 + _this__122 * m__21 + _this__222 * m__22;
		var m__221;
		var m__211;
		var m__201;
		var m__121;
		var m__111;
		var m__101;
		var m__021;
		var m__011;
		var m__001 = 1;
		m__101 = 0;
		m__201 = -centerx;
		m__011 = 0;
		m__111 = 1;
		m__211 = -centery;
		m__021 = 0;
		m__121 = 0;
		m__221 = 1;
		_this__00 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		_this__10 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		_this__20 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		_this__01 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		_this__11 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		_this__21 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		_this__02 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		_this__12 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		_this__22 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformations.length - 1];
		this.pushTransformation(new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22));
	}
	,pushOpacity: function(opacity) {
		this.setOpacity(opacity);
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		var ret = this.opacities.pop();
		this.setOpacity(this.get_opacity());
		return ret;
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_transformation:"set_transformation",get_transformation:"get_transformation",set_fontGlyphs:"set_fontGlyphs",get_fontGlyphs:"get_fontGlyphs",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_mipmapScaleQuality:"set_mipmapScaleQuality",get_mipmapScaleQuality:"get_mipmapScaleQuality",set_imageScaleQuality:"set_imageScaleQuality",get_imageScaleQuality:"get_imageScaleQuality"}
};
var kha_graphics2_Graphics1 = $hxClasses["kha.graphics2.Graphics1"] = function(canvas) {
	this.canvas = canvas;
};
kha_graphics2_Graphics1.__name__ = true;
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	begin: function() {
		if(this.texture == null) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),kha_graphics4_TextureFormat.RGBA32,kha_graphics4_Usage.ReadableUsage);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin();
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_realWidth() * 4 + x * 4,color);
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_ImageScaleQuality = $hxClasses["kha.graphics2.ImageScaleQuality"] = { __ename__ : true, __constructs__ : ["Low","High"] };
kha_graphics2_ImageScaleQuality.Low = ["Low",0];
kha_graphics2_ImageScaleQuality.Low.toString = $estr;
kha_graphics2_ImageScaleQuality.Low.__enum__ = kha_graphics2_ImageScaleQuality;
kha_graphics2_ImageScaleQuality.High = ["High",1];
kha_graphics2_ImageScaleQuality.High.toString = $estr;
kha_graphics2_ImageScaleQuality.High.__enum__ = kha_graphics2_ImageScaleQuality;
var kha_graphics2_truetype_VectorOfIntPointer = $hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = function() {
};
kha_graphics2_truetype_VectorOfIntPointer.__name__ = true;
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = $hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = function() {
};
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = $hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = function() {
};
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = $hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = function() {
};
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = $hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = function() {
};
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$bakedchar = $hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = function() {
};
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = true;
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = $hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = function() { };
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = true;
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = $hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = function() { };
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = true;
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = $hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = function() { };
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = true;
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = $hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = function() { };
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = true;
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = $hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = function() {
};
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = true;
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = $hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = function() {
};
kha_graphics2_truetype_Stbtt_$vertex.__name__ = true;
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = $hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = function() {
};
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = $hxClasses["kha.graphics2.truetype.Stbtt__edge"] = function() {
};
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = $hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = function() {
};
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = $hxClasses["kha.graphics2.truetype.Stbtt__point"] = function() {
};
kha_graphics2_truetype_Stbtt_$_$point.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_StbTruetype = $hxClasses["kha.graphics2.truetype.StbTruetype"] = function() { };
kha_graphics2_truetype_StbTruetype.__name__ = true;
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw new js__$Boot_HaxeError("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	return ch2 | ch1 << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	var c0 = HxOverrides.cca(str,0);
	var c1 = HxOverrides.cca(str,1);
	var c2 = HxOverrides.cca(str,2);
	var c3 = HxOverrides.cca(str,3);
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	var c0 = HxOverrides.cca("1",0);
	if(font.readU8(0) == c0 && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c01 = HxOverrides.cca("typ1",0);
	var c1 = HxOverrides.cca("typ1",1);
	var c2 = HxOverrides.cca("typ1",2);
	var c3 = HxOverrides.cca("typ1",3);
	if(font.readU8(0) == c01 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	var c02 = HxOverrides.cca("OTTO",0);
	var c11 = HxOverrides.cca("OTTO",1);
	var c21 = HxOverrides.cca("OTTO",2);
	var c31 = HxOverrides.cca("OTTO",3);
	if(font.readU8(0) == c02 && font.readU8(1) == c11 && font.readU8(2) == c21 && font.readU8(3) == c31) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var num_tables = ch2 | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g1 = 0;
	var _g = num_tables;
	while(_g1 < _g) {
		var i = _g1++;
		var loc = tabledir + 16 * i;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos1 = loc + 8;
			var ch11 = data.readU8(pos1);
			var ch21 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var ch4 = data.readU8(pos1 + 3);
			return ch4 | ch3 << 8 | ch21 << 16 | ch11 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var ch1 = font_collection.readU8(4);
		var ch2 = font_collection.readU8(5);
		var ch3 = font_collection.readU8(6);
		var ch4 = font_collection.readU8(7);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var ch11 = font_collection.readU8(4);
			var ch21 = font_collection.readU8(5);
			var ch31 = font_collection.readU8(6);
			var ch41 = font_collection.readU8(7);
			tmp = (ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var ch12 = font_collection.readU8(8);
			var ch22 = font_collection.readU8(9);
			var ch32 = font_collection.readU8(10);
			var ch42 = font_collection.readU8(11);
			var n = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
			if(index >= n) {
				return -1;
			}
			var pos = 12 + index * 4;
			var ch13 = font_collection.readU8(pos);
			var ch23 = font_collection.readU8(pos + 1);
			var ch33 = font_collection.readU8(pos + 2);
			var ch43 = font_collection.readU8(pos + 3);
			return ch43 | ch33 << 8 | ch23 << 16 | ch13 << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	var cmap;
	var t;
	var numTables;
	info.data = data;
	info.fontstart = fontstart;
	cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	if(cmap == 0 || info.loca == 0 || info.head == 0 || info.glyf == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		info.numGlyphs = ch2 | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos1 = cmap + 2;
	var ch11 = data.readU8(pos1);
	var ch21 = data.readU8(pos1 + 1);
	numTables = ch21 | ch11 << 8;
	info.index_map = 0;
	var _g1 = 0;
	var _g = numTables;
	while(_g1 < _g) {
		var i = _g1++;
		var encoding_record = cmap + 4 + 8 * i;
		var ch12 = data.readU8(encoding_record);
		var ch22 = data.readU8(encoding_record + 1);
		var _g2 = ch22 | ch12 << 8;
		switch(_g2) {
		case 0:
			var pos2 = encoding_record + 4;
			var ch13 = data.readU8(pos2);
			var ch23 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			var ch4 = data.readU8(pos2 + 3);
			info.index_map = cmap + (ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24);
			break;
		case 3:
			var pos3 = encoding_record + 2;
			var ch14 = data.readU8(pos3);
			var ch24 = data.readU8(pos3 + 1);
			var _g21 = ch24 | ch14 << 8;
			switch(_g21) {
			case 1:case 10:
				var pos4 = encoding_record + 4;
				var ch15 = data.readU8(pos4);
				var ch25 = data.readU8(pos4 + 1);
				var ch31 = data.readU8(pos4 + 2);
				var ch41 = data.readU8(pos4 + 3);
				info.index_map = cmap + (ch41 | ch31 << 8 | ch25 << 16 | ch15 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos5 = info.head + 50;
	var ch16 = data.readU8(pos5);
	var ch26 = data.readU8(pos5 + 1);
	info.indexToLocFormat = ch26 | ch16 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var ch1 = data.readU8(index_map);
	var ch2 = data.readU8(index_map + 1);
	var format = ch2 | ch1 << 8;
	if(format == 0) {
		var pos = index_map + 2;
		var ch11 = data.readU8(pos);
		var ch21 = data.readU8(pos + 1);
		var bytes = ch21 | ch11 << 8;
		if(unicode_codepoint < bytes - 6) {
			return data.readU8(index_map + 6 + unicode_codepoint);
		}
		return 0;
	} else if(format == 6) {
		var pos1 = index_map + 6;
		var ch12 = data.readU8(pos1);
		var ch22 = data.readU8(pos1 + 1);
		var first = ch22 | ch12 << 8;
		var pos2 = index_map + 8;
		var ch13 = data.readU8(pos2);
		var ch23 = data.readU8(pos2 + 1);
		var count = ch23 | ch13 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos3 = index_map + 10 + (unicode_codepoint - first) * 2;
			var ch14 = data.readU8(pos3);
			var ch24 = data.readU8(pos3 + 1);
			return ch24 | ch14 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw new js__$Boot_HaxeError("Error");
	} else if(format == 4) {
		var pos4 = index_map + 6;
		var ch15 = data.readU8(pos4);
		var ch25 = data.readU8(pos4 + 1);
		var segcount = (ch25 | ch15 << 8) >> 1;
		var pos5 = index_map + 8;
		var ch16 = data.readU8(pos5);
		var ch26 = data.readU8(pos5 + 1);
		var searchRange = (ch26 | ch16 << 8) >> 1;
		var pos6 = index_map + 10;
		var ch17 = data.readU8(pos6);
		var ch27 = data.readU8(pos6 + 1);
		var entrySelector = ch27 | ch17 << 8;
		var pos7 = index_map + 12;
		var ch18 = data.readU8(pos7);
		var ch28 = data.readU8(pos7 + 1);
		var rangeShift = (ch28 | ch18 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos8 = search + rangeShift * 2;
		var ch19 = data.readU8(pos8);
		var ch29 = data.readU8(pos8 + 1);
		if(unicode_codepoint >= (ch29 | ch19 << 8)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			var end;
			searchRange >>= 1;
			var pos9 = search + searchRange * 2;
			var ch110 = data.readU8(pos9);
			var ch210 = data.readU8(pos9 + 1);
			end = ch210 | ch110 << 8;
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var offset;
		var start;
		var item = search - endCount >> 1;
		var pos10 = endCount + 2 * item;
		var ch111 = data.readU8(pos10);
		var ch211 = data.readU8(pos10 + 1);
		if(unicode_codepoint > (ch211 | ch111 << 8)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var pos11 = index_map + 14 + segcount * 2 + 2 + 2 * item;
		var ch112 = data.readU8(pos11);
		var ch212 = data.readU8(pos11 + 1);
		start = ch212 | ch112 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos12 = index_map + 14 + segcount * 6 + 2 + 2 * item;
		var ch113 = data.readU8(pos12);
		var ch213 = data.readU8(pos12 + 1);
		offset = ch213 | ch113 << 8;
		if(offset == 0) {
			var pos13 = index_map + 14 + segcount * 4 + 2 + 2 * item;
			var ch114 = data.readU8(pos13);
			var ch214 = data.readU8(pos13 + 1);
			var n = ch214 | ch114 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n);
		}
		var pos14 = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		var ch115 = data.readU8(pos14);
		var ch215 = data.readU8(pos14 + 1);
		return ch215 | ch115 << 8;
	} else if(format == 12 || format == 13) {
		var pos15 = index_map + 12;
		var ch116 = data.readU8(pos15);
		var ch216 = data.readU8(pos15 + 1);
		var ch3 = data.readU8(pos15 + 2);
		var ch4 = data.readU8(pos15 + 3);
		var ngroups = ch4 | ch3 << 8 | ch216 << 16 | ch116 << 24;
		var low;
		var high;
		low = 0;
		high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos16 = index_map + 16 + mid * 12;
			var ch117 = data.readU8(pos16);
			var ch217 = data.readU8(pos16 + 1);
			var ch31 = data.readU8(pos16 + 2);
			var ch41 = data.readU8(pos16 + 3);
			var start_char = ch41 | ch31 << 8 | ch217 << 16 | ch117 << 24;
			var pos17 = index_map + 16 + mid * 12 + 4;
			var ch118 = data.readU8(pos17);
			var ch218 = data.readU8(pos17 + 1);
			var ch32 = data.readU8(pos17 + 2);
			var ch42 = data.readU8(pos17 + 3);
			var end_char = ch42 | ch32 << 8 | ch218 << 16 | ch118 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos18 = index_map + 16 + mid * 12 + 8;
				var ch119 = data.readU8(pos18);
				var ch219 = data.readU8(pos18 + 1);
				var ch33 = data.readU8(pos18 + 2);
				var ch43 = data.readU8(pos18 + 3);
				var start_glyph = ch43 | ch33 << 8 | ch219 << 16 | ch119 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw new js__$Boot_HaxeError("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g1 = info1 + (ch2 | ch1 << 8) * 2;
		var info2 = info.glyf;
		var p1 = info.data;
		var pos1 = info.loca + glyph_index * 2 + 2;
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		g2 = info2 + (ch21 | ch11 << 8) * 2;
	} else {
		var info3 = info.glyf;
		var p2 = info.data;
		var pos2 = info.loca + glyph_index * 4;
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var ch3 = p2.readU8(pos2 + 2);
		var ch4 = p2.readU8(pos2 + 3);
		g1 = info3 + (ch4 | ch3 << 8 | ch22 << 16 | ch12 << 24);
		var info4 = info.glyf;
		var p3 = info.data;
		var pos3 = info.loca + glyph_index * 4 + 4;
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var ch31 = p3.readU8(pos3 + 2);
		var ch41 = p3.readU8(pos3 + 3);
		g2 = info4 + (ch41 | ch31 << 8 | ch23 << 16 | ch13 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return false;
	}
	var p = info.data;
	var pos = g + 2;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = g + 4;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = g + 6;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = g + 8;
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	var numberOfContours;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var p = info.data;
	var ch1 = p.readU8(g);
	var ch2 = p.readU8(g + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		numberOfContours = n - 65536;
	} else {
		numberOfContours = n;
	}
	return numberOfContours == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	var numberOfContours;
	var endPtsOfContours;
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var ch1 = data.readU8(g);
	var ch2 = data.readU8(g + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		numberOfContours = n - 65536;
	} else {
		numberOfContours = n;
	}
	if(numberOfContours > 0) {
		var flags = 0;
		var flagcount;
		var ins;
		var j = 0;
		var m;
		var n1;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var x;
		var y;
		var cx;
		var cy;
		var sx;
		var sy;
		var scx;
		var scy;
		var points;
		var pointsIndex = 0;
		endPtsOfContours = data.sub(g + 10,data.get_length() - (g + 10));
		var pos = g + 10 + numberOfContours * 2;
		var ch11 = data.readU8(pos);
		var ch21 = data.readU8(pos + 1);
		ins = ch21 | ch11 << 8;
		points = data.sub(g + 10 + numberOfContours * 2 + 2 + ins,data.get_length() - (g + 10 + numberOfContours * 2 + 2 + ins));
		var pos1 = numberOfContours * 2 - 2;
		var ch12 = endPtsOfContours.readU8(pos1);
		var ch22 = endPtsOfContours.readU8(pos1 + 1);
		n1 = 1 + (ch22 | ch12 << 8);
		m = n1 + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g1 = 0;
			var _g = vertices.length;
			while(_g1 < _g) {
				var i = _g1++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		flagcount = 0;
		off = m - n1;
		var _g11 = 0;
		var _g2 = n1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(flagcount == 0) {
				flags = points.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = points.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i1].type = flags;
		}
		x = 0;
		var _g12 = 0;
		var _g3 = n1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			flags = vertices[off + i2].type;
			if((flags & 2) != 0) {
				var dx = points.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch13 = points.readU8(pointsIndex);
				var ch23 = points.readU8(pointsIndex + 1);
				var n2 = ch23 | ch13 << 8;
				if((n2 & 32768) != 0) {
					value = n2 - 65536;
				} else {
					value = n2;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i2].x = x;
		}
		y = 0;
		var _g13 = 0;
		var _g4 = n1;
		while(_g13 < _g4) {
			var i3 = _g13++;
			flags = vertices[off + i3].type;
			if((flags & 4) != 0) {
				var dy = points.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var ch14 = points.readU8(pointsIndex);
				var ch24 = points.readU8(pointsIndex + 1);
				var n3 = ch24 | ch14 << 8;
				if((n3 & 32768) != 0) {
					value1 = n3 - 65536;
				} else {
					value1 = n3;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i3].y = y;
		}
		num_vertices = 0;
		scy = 0;
		scx = scy;
		cy = scx;
		cx = cy;
		sy = cx;
		sx = sy;
		var i4 = 0;
		while(i4 < n1) {
			flags = vertices[off + i4].type;
			x = vertices[off + i4].x;
			y = vertices[off + i4].y;
			if(next_move == i4) {
				if(i4 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i4 + 1].type & 1) == 0) {
						sx = x + vertices[off + i4 + 1].x >> 1;
						sy = y + vertices[off + i4 + 1].y >> 1;
					} else {
						sx = vertices[off + i4 + 1].x;
						sy = vertices[off + i4 + 1].y;
						++i4;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos2 = j * 2;
				var ch15 = endPtsOfContours.readU8(pos2);
				var ch25 = endPtsOfContours.readU8(pos2 + 1);
				next_move = 1 + (ch25 | ch15 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i4;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours == -1) {
		var more = 1;
		var comp = data.sub(g + 10,data.get_length() - (g + 10));
		var compIndex = 0;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var flags1;
			var gidx;
			var comp_num_verts = 0;
			var i5;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var m1;
			var n4;
			var ch16 = comp.readU8(compIndex);
			var ch26 = comp.readU8(compIndex + 1);
			var n5 = ch26 | ch16 << 8;
			if((n5 & 32768) != 0) {
				flags1 = n5 - 65536;
			} else {
				flags1 = n5;
			}
			compIndex += 2;
			var ch17 = comp.readU8(compIndex);
			var ch27 = comp.readU8(compIndex + 1);
			var n6 = ch27 | ch17 << 8;
			if((n6 & 32768) != 0) {
				gidx = n6 - 65536;
			} else {
				gidx = n6;
			}
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					var ch18 = comp.readU8(compIndex);
					var ch28 = comp.readU8(compIndex + 1);
					var n7 = ch28 | ch18 << 8;
					if((n7 & 32768) != 0) {
						mtx4 = n7 - 65536;
					} else {
						mtx4 = n7;
					}
					compIndex += 2;
					var ch19 = comp.readU8(compIndex);
					var ch29 = comp.readU8(compIndex + 1);
					var n8 = ch29 | ch19 << 8;
					if((n8 & 32768) != 0) {
						mtx5 = n8 - 65536;
					} else {
						mtx5 = n8;
					}
					compIndex += 2;
				} else {
					var n9 = comp.readU8(compIndex);
					if(n9 >= 128) {
						mtx4 = n9 - 256;
					} else {
						mtx4 = n9;
					}
					++compIndex;
					var n10 = comp.readU8(compIndex);
					if(n10 >= 128) {
						mtx5 = n10 - 256;
					} else {
						mtx5 = n10;
					}
					++compIndex;
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			if((flags1 & 8) != 0) {
				var ch110 = comp.readU8(compIndex);
				var ch210 = comp.readU8(compIndex + 1);
				var n11 = ch210 | ch110 << 8;
				mtx3 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				var ch111 = comp.readU8(compIndex);
				var ch211 = comp.readU8(compIndex + 1);
				var n12 = ch211 | ch111 << 8;
				mtx0 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var ch112 = comp.readU8(compIndex);
				var ch212 = comp.readU8(compIndex + 1);
				var n13 = ch212 | ch112 << 8;
				mtx3 = ((n13 & 32768) != 0 ? n13 - 65536 : n13) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				var ch113 = comp.readU8(compIndex);
				var ch213 = comp.readU8(compIndex + 1);
				var n14 = ch213 | ch113 << 8;
				mtx0 = ((n14 & 32768) != 0 ? n14 - 65536 : n14) / 16384.0;
				compIndex += 2;
				var ch114 = comp.readU8(compIndex);
				var ch214 = comp.readU8(compIndex + 1);
				var n15 = ch214 | ch114 << 8;
				mtx1 = ((n15 & 32768) != 0 ? n15 - 65536 : n15) / 16384.0;
				compIndex += 2;
				var ch115 = comp.readU8(compIndex);
				var ch215 = comp.readU8(compIndex + 1);
				var n16 = ch215 | ch115 << 8;
				mtx2 = ((n16 & 32768) != 0 ? n16 - 65536 : n16) / 16384.0;
				compIndex += 2;
				var ch116 = comp.readU8(compIndex);
				var ch216 = comp.readU8(compIndex + 1);
				var n17 = ch216 | ch116 << 8;
				mtx3 = ((n17 & 32768) != 0 ? n17 - 65536 : n17) / 16384.0;
				compIndex += 2;
			}
			m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			n4 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			if(comp_verts == null) {
				comp_num_verts = 0;
			} else {
				comp_num_verts = comp_verts.length;
			}
			if(comp_num_verts > 0) {
				var _g14 = 0;
				var _g5 = comp_num_verts;
				while(_g14 < _g5) {
					var i6 = _g14++;
					var v = comp_verts[i6];
					var x1;
					var y1;
					x1 = v.x;
					y1 = v.y;
					v.x = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.y = n4 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
					x1 = v.cx;
					y1 = v.cy;
					v.cx = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.cy = n4 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
				}
				var this2 = new Array(num_vertices + comp_num_verts);
				tmp = this2;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	} else if(numberOfContours < 0) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(num_vertices < vertices.length) {
		var this3 = new Array(num_vertices);
		var tmp1 = this3;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var numOfLongHorMetrics = ch2 | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p1 = info.data;
		var pos1 = info.hmtx + 4 * glyph_index;
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		var n = ch21 | ch11 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p2 = info.data;
		var pos2 = info.hmtx + 4 * glyph_index + 2;
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var n1 = ch22 | ch12 << 8;
		metrics.leftSideBearing = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	} else {
		var p3 = info.data;
		var pos3 = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var n2 = ch23 | ch13 << 8;
		metrics.advanceWidth = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p4 = info.data;
		var pos4 = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		var ch14 = p4.readU8(pos4);
		var ch24 = p4.readU8(pos4 + 1);
		var n3 = ch24 | ch14 << 8;
		metrics.leftSideBearing = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var data = info.data.sub(info.kern,info.data.get_length() - info.kern);
	var needle;
	var straw;
	var l;
	var r;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	var ch1 = data.readU8(2);
	var ch2 = data.readU8(3);
	if((ch2 | ch1 << 8) < 1) {
		return 0;
	}
	var ch11 = data.readU8(8);
	var ch21 = data.readU8(9);
	if((ch21 | ch11 << 8) != 1) {
		return 0;
	}
	l = 0;
	var ch12 = data.readU8(10);
	var ch22 = data.readU8(11);
	r = (ch22 | ch12 << 8) - 1;
	needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		var pos = 18 + m * 6;
		var ch13 = data.readU8(pos);
		var ch23 = data.readU8(pos + 1);
		var ch3 = data.readU8(pos + 2);
		var ch4 = data.readU8(pos + 3);
		straw = ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24;
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			var pos1 = 22 + m * 6;
			var ch14 = data.readU8(pos1);
			var ch24 = data.readU8(pos1 + 1);
			var n = ch24 | ch14 << 8;
			if((n & 32768) != 0) {
				return n - 65536;
			} else {
				return n;
			}
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	metrics.descent = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.hhea + 8;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	metrics.lineGap = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	var p = info.data;
	var pos = info.head + 36;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.head + 38;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.head + 40;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = info.head + 42;
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	var fheight = ((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var p = info.data;
	var pos = info.head + 18;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var unitsPerEm = ch2 | ch1 << 8;
	return pixels / unitsPerEm;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		var _g1 = scanline;
		_g1[_g] = _g1[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g2 = scanlineIndex + x;
		var _g11 = scanline;
		_g11[_g2] = _g11[_g2] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var height;
					var x = x_top | 0;
					height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g = x;
					var _g1 = scanline;
					_g1[_g] = _g1[_g] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g2 = scanline_fillIndex + x;
					var _g11 = scanline_fill;
					_g11[_g2] = _g11[_g2] + e.direction * height;
				} else {
					var x1;
					var x11;
					var x2;
					var y_crossing;
					var step;
					var sign;
					var area;
					if(x_top > x_bottom) {
						var t;
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					x11 = x_top | 0;
					x2 = x_bottom | 0;
					y_crossing = (x11 + 1 - x01) * dy + y_top;
					sign = e.direction;
					area = sign * (y_crossing - sy0);
					var _g3 = x11;
					var _g12 = scanline;
					_g12[_g3] = _g12[_g3] + area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					step = sign * dy;
					var _g13 = x11 + 1;
					var _g4 = x2;
					while(_g13 < _g4) {
						var x3 = _g13++;
						var _g21 = x3;
						var _g31 = scanline;
						_g31[_g21] = _g31[_g21] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g5 = x2;
					var _g14 = scanline;
					_g14[_g5] = _g14[_g5] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g6 = scanline_fillIndex + x2;
					var _g15 = scanline_fill;
					_g15[_g6] = _g15[_g6] + sign * (sy1 - sy0);
				}
			} else {
				var _g16 = 0;
				var _g7 = len;
				while(_g16 < _g7) {
					var x4 = _g16++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1;
					var y2;
					y1 = (x4 - x01) / dx + y_top;
					y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var y;
	var j = 0;
	var i;
	var scanline;
	var scanline2;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var length = result.w * 2 + 1;
		var this1 = new Array(length);
		scanline = this1;
	} else {
		var this2 = new Array(129);
		scanline = this2;
	}
	scanline2 = scanline;
	scanline2Index = result.w;
	y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value;
		var step_parent;
		step_value = active;
		step_parent = null;
		var _g1 = 0;
		var _g = result.w;
		while(_g1 < _g) {
			var i1 = _g1++;
			scanline[i1] = 0;
		}
		var _g11 = 0;
		var _g2 = result.w + 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			scanline2[scanline2Index + i2] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw new js__$Boot_HaxeError("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw new js__$Boot_HaxeError("Error");
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g12 = 0;
		var _g3 = result.w;
		while(_g12 < _g3) {
			var i3 = _g12++;
			var k;
			var m;
			sum += scanline2[scanline2Index + i3];
			k = scanline[i3] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i3,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g1 = 1;
	var _g = n;
	while(_g1 < _g) {
		var i1 = _g1++;
		var t = p[i1];
		var a = t;
		j = i1;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i1 != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c01;
		var c12;
		var c;
		var m;
		var i;
		var j;
		m = n >> 1;
		c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			var z;
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			if(c == c12) {
				z = 0;
			} else {
				z = n - 1;
			}
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		i = 1;
		j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var e;
	var n;
	var i;
	var j;
	var k;
	var m;
	var vsubsample = 1;
	var ptsIndex = 0;
	n = 0;
	var _g1 = 0;
	var _g = windings;
	while(_g1 < _g) {
		var i1 = _g1++;
		n += wcount[i1];
	}
	var this1 = new Array(n + 1);
	e = this1;
	if(e == null) {
		return;
	} else {
		var _g11 = 0;
		var _g2 = e.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			e[i2] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	m = 0;
	var _g12 = 0;
	var _g3 = windings;
	while(_g12 < _g3) {
		var i3 = _g12++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i3];
		j = wcount[i3] - 1;
		var _g31 = 0;
		var _g21 = wcount[i3];
		while(_g31 < _g21) {
			var k1 = _g31++;
			var a = k1;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k1].y) {
				j = k1;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k1].y : p[pIndex + j].y < p[pIndex + k1].y) {
				e[n].invert = true;
				a = j;
				b = k1;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k1;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g1 = 0;
	var _g = num_verts;
	while(_g1 < _g) {
		var i1 = _g1++;
		if(vertices[i1].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var pass1 = _g2++;
		var x = 0;
		var y = 0;
		if(pass1 == 1) {
			var this2 = new Array(num_points);
			points = this2;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g11 = points.length;
				while(_g21 < _g11) {
					var i2 = _g21++;
					points[i2] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		var _g12 = num_verts;
		while(_g22 < _g12) {
			var i3 = _g22++;
			var _g3 = vertices[i3].type;
			switch(_g3) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i3].cx,vertices[i3].cy,vertices[i3].x,vertices[i3].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i3].x;
				y = vertices[i3].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var ix0;
	var iy0;
	var ix1;
	var iy1;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	ix1 = rect.x1;
	iy1 = rect.y1;
	gbm.w = ix1 - ix0;
	gbm.h = iy1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var scale;
	var x;
	var y;
	var bottom_y;
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var _g1 = 0;
	var _g = pw * ph;
	while(_g1 < _g) {
		var i = _g1++;
		pixels.writeU8(i,0);
	}
	y = 1;
	x = y;
	bottom_y = 1;
	scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i1 = 0;
	var _g2 = 0;
	while(_g2 < chars.length) {
		var index = chars[_g2];
		++_g2;
		var advance;
		var lsb;
		var x0;
		var y0;
		var x1;
		var y1;
		var gw;
		var gh;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		advance = metrics.advanceWidth;
		lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		x0 = rect.x0;
		y0 = rect.y0;
		x1 = rect.x1;
		y1 = rect.y1;
		gw = x1 - x0;
		gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i1;
		}
		if(x + gw >= pw) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(y + gh >= ph) {
			throw new js__$Boot_HaxeError("Error");
		}
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,x + y * pw,gw,gh,pw,scale,scale,g);
		chardata[i1].x0 = x;
		chardata[i1].y0 = y;
		chardata[i1].x1 = x + gw;
		chardata[i1].y1 = y + gh;
		chardata[i1].xadvance = scale * advance;
		chardata[i1].xoff = x0;
		chardata[i1].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i1;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_BlendingFactor = $hxClasses["kha.graphics4.BlendingFactor"] = { __ename__ : true, __constructs__ : ["Undefined","BlendOne","BlendZero","SourceAlpha","DestinationAlpha","InverseSourceAlpha","InverseDestinationAlpha","SourceColor","DestinationColor","InverseSourceColor","InverseDestinationColor"] };
kha_graphics4_BlendingFactor.Undefined = ["Undefined",0];
kha_graphics4_BlendingFactor.Undefined.toString = $estr;
kha_graphics4_BlendingFactor.Undefined.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.BlendOne = ["BlendOne",1];
kha_graphics4_BlendingFactor.BlendOne.toString = $estr;
kha_graphics4_BlendingFactor.BlendOne.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.BlendZero = ["BlendZero",2];
kha_graphics4_BlendingFactor.BlendZero.toString = $estr;
kha_graphics4_BlendingFactor.BlendZero.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.SourceAlpha = ["SourceAlpha",3];
kha_graphics4_BlendingFactor.SourceAlpha.toString = $estr;
kha_graphics4_BlendingFactor.SourceAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.DestinationAlpha = ["DestinationAlpha",4];
kha_graphics4_BlendingFactor.DestinationAlpha.toString = $estr;
kha_graphics4_BlendingFactor.DestinationAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseSourceAlpha = ["InverseSourceAlpha",5];
kha_graphics4_BlendingFactor.InverseSourceAlpha.toString = $estr;
kha_graphics4_BlendingFactor.InverseSourceAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseDestinationAlpha = ["InverseDestinationAlpha",6];
kha_graphics4_BlendingFactor.InverseDestinationAlpha.toString = $estr;
kha_graphics4_BlendingFactor.InverseDestinationAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.SourceColor = ["SourceColor",7];
kha_graphics4_BlendingFactor.SourceColor.toString = $estr;
kha_graphics4_BlendingFactor.SourceColor.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.DestinationColor = ["DestinationColor",8];
kha_graphics4_BlendingFactor.DestinationColor.toString = $estr;
kha_graphics4_BlendingFactor.DestinationColor.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseSourceColor = ["InverseSourceColor",9];
kha_graphics4_BlendingFactor.InverseSourceColor.toString = $estr;
kha_graphics4_BlendingFactor.InverseSourceColor.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseDestinationColor = ["InverseDestinationColor",10];
kha_graphics4_BlendingFactor.InverseDestinationColor.toString = $estr;
kha_graphics4_BlendingFactor.InverseDestinationColor.__enum__ = kha_graphics4_BlendingFactor;
var kha_graphics4_BlendingOperation = $hxClasses["kha.graphics4.BlendingOperation"] = { __ename__ : true, __constructs__ : ["Add","Subtract","ReverseSubtract","Min","Max"] };
kha_graphics4_BlendingOperation.Add = ["Add",0];
kha_graphics4_BlendingOperation.Add.toString = $estr;
kha_graphics4_BlendingOperation.Add.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.Subtract = ["Subtract",1];
kha_graphics4_BlendingOperation.Subtract.toString = $estr;
kha_graphics4_BlendingOperation.Subtract.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.ReverseSubtract = ["ReverseSubtract",2];
kha_graphics4_BlendingOperation.ReverseSubtract.toString = $estr;
kha_graphics4_BlendingOperation.ReverseSubtract.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.Min = ["Min",3];
kha_graphics4_BlendingOperation.Min.toString = $estr;
kha_graphics4_BlendingOperation.Min.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.Max = ["Max",4];
kha_graphics4_BlendingOperation.Max.toString = $estr;
kha_graphics4_BlendingOperation.Max.__enum__ = kha_graphics4_BlendingOperation;
var kha_graphics4_CompareMode = $hxClasses["kha.graphics4.CompareMode"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Less","LessEqual","Greater","GreaterEqual"] };
kha_graphics4_CompareMode.Always = ["Always",0];
kha_graphics4_CompareMode.Always.toString = $estr;
kha_graphics4_CompareMode.Always.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Never = ["Never",1];
kha_graphics4_CompareMode.Never.toString = $estr;
kha_graphics4_CompareMode.Never.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Equal = ["Equal",2];
kha_graphics4_CompareMode.Equal.toString = $estr;
kha_graphics4_CompareMode.Equal.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.NotEqual = ["NotEqual",3];
kha_graphics4_CompareMode.NotEqual.toString = $estr;
kha_graphics4_CompareMode.NotEqual.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Less = ["Less",4];
kha_graphics4_CompareMode.Less.toString = $estr;
kha_graphics4_CompareMode.Less.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.LessEqual = ["LessEqual",5];
kha_graphics4_CompareMode.LessEqual.toString = $estr;
kha_graphics4_CompareMode.LessEqual.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Greater = ["Greater",6];
kha_graphics4_CompareMode.Greater.toString = $estr;
kha_graphics4_CompareMode.Greater.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.GreaterEqual = ["GreaterEqual",7];
kha_graphics4_CompareMode.GreaterEqual.toString = $estr;
kha_graphics4_CompareMode.GreaterEqual.__enum__ = kha_graphics4_CompareMode;
var kha_graphics4_ConstantLocation = $hxClasses["kha.graphics4.ConstantLocation"] = function() { };
kha_graphics4_ConstantLocation.__name__ = true;
var kha_graphics4_CubeMap = $hxClasses["kha.graphics4.CubeMap"] = function(texture) {
	this.texture_ = texture;
};
kha_graphics4_CubeMap.__name__ = true;
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.getRenderTargetFormat = function(format) {
	switch(format[1]) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 3:
		return 4;
	case 4:
		return 1;
	default:
		return 0;
	}
};
kha_graphics4_CubeMap.getDepthBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return 24;
	case 2:
		return 24;
	case 3:
		return 24;
	case 4:
		return 32;
	case 5:
		return 16;
	}
};
kha_graphics4_CubeMap.getStencilBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return -1;
	case 2:
		return 8;
	case 3:
		return 8;
	case 4:
		return 8;
	case 5:
		return 0;
	}
};
kha_graphics4_CubeMap.getTextureFormat = function(format) {
	switch(format[1]) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	default:
		return 1;
	}
};
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	var cubeMap = new kha_graphics4_CubeMap(null);
	cubeMap.format = format;
	cubeMap.renderTarget_ = Krom.createRenderTargetCubeMap(size,kha_graphics4_CubeMap.getDepthBufferBits(depthStencil),kha_graphics4_CubeMap.getRenderTargetFormat(format),kha_graphics4_CubeMap.getStencilBufferBits(depthStencil),contextId);
	return cubeMap;
};
kha_graphics4_CubeMap.prototype = {
	unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,get_width: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.width;
		}
	}
	,get_height: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.height;
		}
	}
	,get_g1: function() {
		return null;
	}
	,get_g2: function() {
		return null;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_krom_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_CullMode = $hxClasses["kha.graphics4.CullMode"] = { __ename__ : true, __constructs__ : ["Clockwise","CounterClockwise","None"] };
kha_graphics4_CullMode.Clockwise = ["Clockwise",0];
kha_graphics4_CullMode.Clockwise.toString = $estr;
kha_graphics4_CullMode.Clockwise.__enum__ = kha_graphics4_CullMode;
kha_graphics4_CullMode.CounterClockwise = ["CounterClockwise",1];
kha_graphics4_CullMode.CounterClockwise.toString = $estr;
kha_graphics4_CullMode.CounterClockwise.__enum__ = kha_graphics4_CullMode;
kha_graphics4_CullMode.None = ["None",2];
kha_graphics4_CullMode.None.toString = $estr;
kha_graphics4_CullMode.None.__enum__ = kha_graphics4_CullMode;
var kha_graphics4_FragmentShader = $hxClasses["kha.graphics4.FragmentShader"] = function(sources,names) {
	if(sources != null) {
		this.shader = Krom.createFragmentShader(sources[0].bytes.b.bufferValue,names[0]);
	}
};
kha_graphics4_FragmentShader.__name__ = true;
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader(null,null);
	shader.shader = Krom.createFragmentShaderFromSource(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = $hxClasses["kha.graphics4.GeometryShader"] = function(sources,names) {
	this.shader = Krom.createGeometryShader(sources[0].bytes.b.bufferValue,names[0]);
};
kha_graphics4_GeometryShader.__name__ = true;
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = $hxClasses["kha.graphics4.Graphics"] = function() { };
kha_graphics4_Graphics.__name__ = true;
kha_graphics4_Graphics.prototype = {
	__class__: kha_graphics4_Graphics
};
var kha_graphics4_ImageShaderPainter = $hxClasses["kha.graphics4.ImageShaderPainter"] = function(g4) {
	this.destinationBlend = kha_graphics4_BlendingFactor.Undefined;
	this.sourceBlend = kha_graphics4_BlendingFactor.Undefined;
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.initBuffers();
	this.projectionLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
	this.textureLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getTextureUnit("tex");
};
kha_graphics4_ImageShaderPainter.__name__ = true;
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.shaderPipeline == null) {
		kha_graphics4_ImageShaderPainter.shaderPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		kha_graphics4_ImageShaderPainter.shaderPipeline.compile();
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		if(pipe == null) {
			this.projectionLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
			this.textureLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getTextureUnit("tex");
		} else {
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
			this.textureLocation = pipe.getTextureUnit("tex");
		}
		return this.myPipeline = pipe;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,kha_graphics4_Usage.StaticUsage);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock();
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_ImageShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setTexture(this.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(this.textureLocation,kha_graphics4_TextureAddressing.Clamp,kha_graphics4_TextureAddressing.Clamp,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,this.bilinearMipmaps ? kha_graphics4_MipMapFilter.LinearMipFilter : kha_graphics4_MipMapFilter.NoMipFilter);
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ImageShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.textureLocation,null);
		kha_graphics4_ImageShaderPainter.bufferIndex = 0;
		kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.end();
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var left1 = sx / tex.get_realWidth();
		var top1 = sy / tex.get_realHeight();
		var right1 = (sx + sw) / tex.get_realWidth();
		var bottom1 = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom1;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = opacity;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = $hxClasses["kha.graphics4.ColoredShaderPainter"] = function(g4) {
	this.destinationBlend = kha_graphics4_BlendingFactor.Undefined;
	this.sourceBlend = kha_graphics4_BlendingFactor.Undefined;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.initBuffers();
	this.projectionLocation = kha_graphics4_ColoredShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
};
kha_graphics4_ColoredShaderPainter.__name__ = true;
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.shaderPipeline == null) {
		kha_graphics4_ColoredShaderPainter.shaderPipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		kha_graphics4_ColoredShaderPainter.shaderPipeline.compile();
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		if(pipe == null) {
			this.projectionLocation = kha_graphics4_ColoredShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
		} else {
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
		}
		return this.myPipeline = pipe;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(400,kha_graphics4_ColoredShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(600,kha_graphics4_Usage.StaticUsage);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 100) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(300,kha_graphics4_ColoredShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(300,kha_graphics4_Usage.StaticUsage);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g1 = 0;
			while(_g1 < 100) {
				var i1 = _g1++;
				triIndices[i1 * 3] = i1 * 3;
				triIndices[i1 * 3 + 1] = i1 * 3 + 1;
				triIndices[i1 * 3 + 2] = i1 * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = (color & 255) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = (color & 255) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = (color & 255) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = (color & 255) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = (color & 255) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = (color & 255) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = (color & 255) * 0.00392156862745098;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock();
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_ColoredShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock();
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_ColoredShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 100) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 100) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(false);
		}
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_TextShaderPainter = $hxClasses["kha.graphics4.TextShaderPainter"] = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.destinationBlend = kha_graphics4_BlendingFactor.Undefined;
	this.sourceBlend = kha_graphics4_BlendingFactor.Undefined;
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.initBuffers();
	this.projectionLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
	this.textureLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getTextureUnit("tex");
};
kha_graphics4_TextShaderPainter.__name__ = true;
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.shaderPipeline == null) {
		kha_graphics4_TextShaderPainter.shaderPipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		kha_graphics4_TextShaderPainter.shaderPipeline.compile();
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charcode,fontGlyphs) {
	var _g1 = 0;
	var _g = fontGlyphs.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(fontGlyphs[i] == charcode) {
			return i;
		}
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		if(pipe == null) {
			this.projectionLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
			this.textureLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getTextureUnit("tex");
		} else {
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
			this.textureLocation = pipe.getTextureUnit("tex");
		}
		return this.myPipeline = pipe;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(400,kha_graphics4_TextShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(600,kha_graphics4_Usage.StaticUsage);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 100) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock();
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_TextShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setTexture(this.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.setTextureParameters(this.textureLocation,kha_graphics4_TextureAddressing.Clamp,kha_graphics4_TextureAddressing.Clamp,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,kha_graphics4_MipMapFilter.NoMipFilter);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,startString: function(text) {
		this.text = text;
	}
	,charCodeAt: function(position) {
		return HxOverrides.cca(this.text,position);
	}
	,stringLength: function() {
		return this.text.length;
	}
	,endString: function() {
		this.text = null;
	}
	,drawString: function(text,opacity,color,x,y,transformation,fontGlyphs) {
		var font = this.font._get(this.fontSize,fontGlyphs);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		this.startString(text);
		var _g1 = 0;
		var _g = this.stringLength();
		while(_g1 < _g) {
			var i = _g1++;
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(this.charCodeAt(i),fontGlyphs),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 100) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var p0_y;
				var p0_x;
				var value_y;
				var value_x = q.x0;
				value_y = q.y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				p0_x = x1;
				p0_y = y1;
				var p1_y;
				var p1_x;
				var value_y1;
				var value_x1 = q.x0;
				value_y1 = q.y0;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x2 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y2 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				p1_x = x2;
				p1_y = y2;
				var p2_y;
				var p2_x;
				var value_y2;
				var value_x2 = q.x1;
				value_y2 = q.y0;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x3 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y3 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				p2_x = x3;
				p2_y = y3;
				var p3_y;
				var p3_x;
				var value_y3;
				var value_x3 = q.x1;
				value_y3 = q.y1;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x4 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y4 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				p3_x = x4;
				p3_y = y4;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
		this.endString();
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation,fontGlyphs) {
		var font = this.font._get(this.fontSize,fontGlyphs);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g1 = start;
		var _g = start + length;
		while(_g1 < _g) {
			var i = _g1++;
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(text[i],fontGlyphs),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 100) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var p0_y;
				var p0_x;
				var value_y;
				var value_x = q.x0;
				value_y = q.y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				p0_x = x1;
				p0_y = y1;
				var p1_y;
				var p1_x;
				var value_y1;
				var value_x1 = q.x0;
				value_y1 = q.y0;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x2 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y2 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				p1_x = x2;
				p1_y = y2;
				var p2_y;
				var p2_x;
				var value_y2;
				var value_x2 = q.x1;
				value_y2 = q.y0;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x3 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y3 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				p2_x = x3;
				p2_y = y3;
				var p3_y;
				var p3_x;
				var value_y3;
				var value_x3 = q.x1;
				value_y3 = q.y1;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x4 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y4 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				p3_x = x4;
				p3_y = y4;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_Graphics2 = $hxClasses["kha.graphics4.Graphics2"] = function(canvas) {
	this.myMipmapScaleQuality = kha_graphics2_ImageScaleQuality.High;
	this.myImageScaleQuality = kha_graphics2_ImageScaleQuality.High;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
kha_graphics4_Graphics2.__name__ = true;
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",kha_graphics4_VertexData.Float3);
	structure.add("texPosition",kha_graphics4_VertexData.Float2);
	structure.add("vertexColor",kha_graphics4_VertexData.Float4);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = kha_graphics4_BlendingFactor.BlendOne;
	shaderPipeline.blendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	shaderPipeline.alphaBlendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	shaderPipeline.alphaBlendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",kha_graphics4_VertexData.Float3);
	structure.add("vertexColor",kha_graphics4_VertexData.Float4);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	shaderPipeline.blendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	shaderPipeline.alphaBlendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	shaderPipeline.alphaBlendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",kha_graphics4_VertexData.Float3);
	structure.add("texPosition",kha_graphics4_VertexData.Float2);
	structure.add("vertexColor",kha_graphics4_VertexData.Float4);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	shaderPipeline.blendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	shaderPipeline.alphaBlendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	shaderPipeline.alphaBlendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(js_Boot.__instanceof(this.canvas,kha_Framebuffer)) {
			this.projectionMatrix = kha_math_FastMatrix4.orthogonalProjection(0,width,height,0,0.1,1000);
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(this.g.renderTargetsInvertedY()) {
				this.projectionMatrix = kha_math_FastMatrix4.orthogonalProjection(0,width,0,height,0.1,1000);
			} else {
				this.projectionMatrix = kha_math_FastMatrix4.orthogonalProjection(0,width,height,0,0.1,1000);
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var p1_y;
		var p1_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x;
		value_y = yh;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x1 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y1 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		p1_x = x1;
		p1_y = y1;
		var p2_y;
		var p2_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x;
		value_y1 = y;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x2 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y2 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		p2_x = x2;
		p2_y = y2;
		var p3_y;
		var p3_x;
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = xw;
		value_y2 = y;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x3 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y3 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		p3_x = x3;
		p3_y = y3;
		var p4_y;
		var p4_x;
		var _this4 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = xw;
		value_y3 = yh;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x4 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y4 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		p4_x = x4;
		p4_y = y4;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var p1_y;
		var p1_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = dx;
		value_y = dy + dh;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		p1_x = x;
		p1_y = y;
		var p2_y;
		var p2_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = dx;
		value_y1 = dy;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x1 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y1 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		p2_x = x1;
		p2_y = y1;
		var p3_y;
		var p3_x;
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = dx + dw;
		value_y2 = dy;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x2 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y2 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		p3_x = x2;
		p3_y = y2;
		var p4_y;
		var p4_x;
		var _this4 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = dx + dw;
		value_y3 = dy + dh;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x3 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y3 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		p4_x = x3;
		p4_y = y3;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x - strength / 2;
		value_y = y + strength / 2;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var p1 = new kha_math_FastVector2(x1,y1);
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x - strength / 2;
		value_y1 = y - strength / 2;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x2 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y2 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var p2 = new kha_math_FastVector2(x2,y2);
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = x + width + strength / 2;
		value_y2 = y - strength / 2;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x3 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y3 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var p3 = new kha_math_FastVector2(x3,y3);
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = x + width + strength / 2;
		value_y3 = y + strength / 2;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x4 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y4 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var p4 = new kha_math_FastVector2(x4,y4);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this4 = this.transformations[this.transformations.length - 1];
		var value_y4;
		var value_x4 = x - strength / 2;
		value_y4 = y + height + strength / 2;
		var w4 = _this4._02 * value_x4 + _this4._12 * value_y4 + _this4._22;
		var x5 = (_this4._00 * value_x4 + _this4._10 * value_y4 + _this4._20) / w4;
		var y5 = (_this4._01 * value_x4 + _this4._11 * value_y4 + _this4._21) / w4;
		p1 = new kha_math_FastVector2(x5,y5);
		var _this5 = this.transformations[this.transformations.length - 1];
		var value_y5;
		var value_x5 = x + strength / 2;
		value_y5 = y - strength / 2;
		var w5 = _this5._02 * value_x5 + _this5._12 * value_y5 + _this5._22;
		var x6 = (_this5._00 * value_x5 + _this5._10 * value_y5 + _this5._20) / w5;
		var y6 = (_this5._01 * value_x5 + _this5._11 * value_y5 + _this5._21) / w5;
		p3 = new kha_math_FastVector2(x6,y6);
		var _this6 = this.transformations[this.transformations.length - 1];
		var value_y6;
		var value_x6 = x + strength / 2;
		value_y6 = y + height + strength / 2;
		var w6 = _this6._02 * value_x6 + _this6._12 * value_y6 + _this6._22;
		var x7 = (_this6._00 * value_x6 + _this6._10 * value_y6 + _this6._20) / w6;
		var y7 = (_this6._01 * value_x6 + _this6._11 * value_y6 + _this6._21) / w6;
		p4 = new kha_math_FastVector2(x7,y7);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this7 = this.transformations[this.transformations.length - 1];
		var value_y7;
		var value_x7 = x - strength / 2;
		value_y7 = y + height - strength / 2;
		var w7 = _this7._02 * value_x7 + _this7._12 * value_y7 + _this7._22;
		var x8 = (_this7._00 * value_x7 + _this7._10 * value_y7 + _this7._20) / w7;
		var y8 = (_this7._01 * value_x7 + _this7._11 * value_y7 + _this7._21) / w7;
		p2 = new kha_math_FastVector2(x8,y8);
		var _this8 = this.transformations[this.transformations.length - 1];
		var value_y8;
		var value_x8 = x + width + strength / 2;
		value_y8 = y + height - strength / 2;
		var w8 = _this8._02 * value_x8 + _this8._12 * value_y8 + _this8._22;
		var x9 = (_this8._00 * value_x8 + _this8._10 * value_y8 + _this8._20) / w8;
		var y9 = (_this8._01 * value_x8 + _this8._11 * value_y8 + _this8._21) / w8;
		p3 = new kha_math_FastVector2(x9,y9);
		var _this9 = this.transformations[this.transformations.length - 1];
		var value_y9;
		var value_x9 = x + width + strength / 2;
		value_y9 = y + height + strength / 2;
		var w9 = _this9._02 * value_x9 + _this9._12 * value_y9 + _this9._22;
		var x10 = (_this9._00 * value_x9 + _this9._10 * value_y9 + _this9._20) / w9;
		var y10 = (_this9._01 * value_x9 + _this9._11 * value_y9 + _this9._21) / w9;
		p4 = new kha_math_FastVector2(x10,y10);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this10 = this.transformations[this.transformations.length - 1];
		var value_y10;
		var value_x10 = x + width - strength / 2;
		value_y10 = y + height + strength / 2;
		var w10 = _this10._02 * value_x10 + _this10._12 * value_y10 + _this10._22;
		var x11 = (_this10._00 * value_x10 + _this10._10 * value_y10 + _this10._20) / w10;
		var y11 = (_this10._01 * value_x10 + _this10._11 * value_y10 + _this10._21) / w10;
		p1 = new kha_math_FastVector2(x11,y11);
		var _this11 = this.transformations[this.transformations.length - 1];
		var value_y11;
		var value_x11 = x + width - strength / 2;
		value_y11 = y - strength / 2;
		var w11 = _this11._02 * value_x11 + _this11._12 * value_y11 + _this11._22;
		var x12 = (_this11._00 * value_x11 + _this11._10 * value_y11 + _this11._20) / w11;
		var y12 = (_this11._01 * value_x11 + _this11._11 * value_y11 + _this11._21) / w11;
		p2 = new kha_math_FastVector2(x12,y12);
		var _this12 = this.transformations[this.transformations.length - 1];
		var value_y12;
		var value_x12 = x + width + strength / 2;
		value_y12 = y - strength / 2;
		var w12 = _this12._02 * value_x12 + _this12._12 * value_y12 + _this12._22;
		var x13 = (_this12._00 * value_x12 + _this12._10 * value_y12 + _this12._20) / w12;
		var y13 = (_this12._01 * value_x12 + _this12._11 * value_y12 + _this12._21) / w12;
		p3 = new kha_math_FastVector2(x13,y13);
		var _this13 = this.transformations[this.transformations.length - 1];
		var value_y13;
		var value_x13 = x + width + strength / 2;
		value_y13 = y + height + strength / 2;
		var w13 = _this13._02 * value_x13 + _this13._12 * value_y13 + _this13._22;
		var x14 = (_this13._00 * value_x13 + _this13._10 * value_y13 + _this13._20) / w13;
		var y14 = (_this13._01 * value_x13 + _this13._11 * value_y13 + _this13._21) / w13;
		p4 = new kha_math_FastVector2(x14,y14);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var p1_y;
		var p1_x;
		var _this = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x;
		value_y = y + height;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		p1_x = x1;
		p1_y = y1;
		var p2_y;
		var p2_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x;
		value_y1 = y;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x2 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y2 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		p2_x = x2;
		p2_y = y2;
		var p3_y;
		var p3_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = x + width;
		value_y2 = y;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x3 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y3 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		p3_x = x3;
		p3_y = y3;
		var p4_y;
		var p4_x;
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = x + width;
		value_y3 = y + height;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x4 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y4 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		p4_x = x4;
		p4_y = y4;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformations.length - 1],this.get_fontGlyphs());
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformations.length - 1],this.get_fontGlyphs());
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec;
		if(y2 == y1) {
			vec = new kha_math_FastVector2(0,-1);
		} else {
			vec = new kha_math_FastVector2(1,-(x2 - x1) / (y2 - y1));
		}
		vec.set_length(strength);
		var p1 = new kha_math_FastVector2(x1 + 0.5 * vec.x,y1 + 0.5 * vec.y);
		var p2 = new kha_math_FastVector2(x2 + 0.5 * vec.x,y2 + 0.5 * vec.y);
		var p3 = new kha_math_FastVector2(p1.x - vec.x,p1.y - vec.y);
		var p4 = new kha_math_FastVector2(p2.x - vec.x,p2.y - vec.y);
		var _this = this.transformations[this.transformations.length - 1];
		var w = _this._02 * p1.x + _this._12 * p1.y + _this._22;
		var x = (_this._00 * p1.x + _this._10 * p1.y + _this._20) / w;
		var y = (_this._01 * p1.x + _this._11 * p1.y + _this._21) / w;
		p1 = new kha_math_FastVector2(x,y);
		var _this1 = this.transformations[this.transformations.length - 1];
		var w1 = _this1._02 * p2.x + _this1._12 * p2.y + _this1._22;
		var x3 = (_this1._00 * p2.x + _this1._10 * p2.y + _this1._20) / w1;
		var y3 = (_this1._01 * p2.x + _this1._11 * p2.y + _this1._21) / w1;
		p2 = new kha_math_FastVector2(x3,y3);
		var _this2 = this.transformations[this.transformations.length - 1];
		var w2 = _this2._02 * p3.x + _this2._12 * p3.y + _this2._22;
		var x4 = (_this2._00 * p3.x + _this2._10 * p3.y + _this2._20) / w2;
		var y4 = (_this2._01 * p3.x + _this2._11 * p3.y + _this2._21) / w2;
		p3 = new kha_math_FastVector2(x4,y4);
		var _this3 = this.transformations[this.transformations.length - 1];
		var w3 = _this3._02 * p4.x + _this3._12 * p4.y + _this3._22;
		var x5 = (_this3._00 * p4.x + _this3._10 * p4.y + _this3._20) / w3;
		var y5 = (_this3._01 * p4.x + _this3._11 * p4.y + _this3._21) / w3;
		p4 = new kha_math_FastVector2(x5,y5);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3.x,p3.y,p2.x,p2.y,p4.x,p4.y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var p1_y;
		var p1_x;
		var _this = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x1;
		value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		p1_x = x;
		p1_y = y;
		var p2_y;
		var p2_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x2;
		value_y1 = y2;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x4 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y4 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		p2_x = x4;
		p2_y = y4;
		var p3_y;
		var p3_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = x3;
		value_y2 = y3;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x5 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y5 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		p3_x = x5;
		p3_y = y5;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	}
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		this.imagePainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		this.textPainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		return this.myImageScaleQuality = value;
	}
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == kha_graphics2_ImageScaleQuality.High);
		return this.myMipmapScaleQuality = value;
	}
	,setPipeline: function(pipeline) {
		this.flush();
		this.imagePainter.set_pipeline(pipeline);
		this.coloredPainter.set_pipeline(pipeline);
		this.textPainter.set_pipeline(pipeline);
		if(pipeline != null) {
			this.g.setPipeline(pipeline);
		}
	}
	,scissor: function(x,y,width,height) {
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = $hxClasses["kha.graphics4.IndexBuffer"] = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.indexCount = indexCount;
	var this1 = new Uint32Array(indexCount);
	this._data = this1;
	this.buffer = Krom.createIndexBuffer(indexCount);
};
kha_graphics4_IndexBuffer.__name__ = true;
kha_graphics4_IndexBuffer.prototype = {
	'delete': function() {
		Krom.deleteIndexBuffer(this.buffer);
		this.buffer = null;
	}
	,lock: function(start,count) {
		if(start == null) {
			start = 0;
		}
		if(count == null) {
			count = this.indexCount;
		}
		return this._data.subarray(start,start + count);
	}
	,unlock: function() {
		Krom.setIndices(this.buffer,this._data);
	}
	,set: function() {
		Krom.setIndexBuffer(this.buffer);
	}
	,count: function() {
		return this.indexCount;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_MipMapFilter = $hxClasses["kha.graphics4.MipMapFilter"] = { __ename__ : true, __constructs__ : ["NoMipFilter","PointMipFilter","LinearMipFilter"] };
kha_graphics4_MipMapFilter.NoMipFilter = ["NoMipFilter",0];
kha_graphics4_MipMapFilter.NoMipFilter.toString = $estr;
kha_graphics4_MipMapFilter.NoMipFilter.__enum__ = kha_graphics4_MipMapFilter;
kha_graphics4_MipMapFilter.PointMipFilter = ["PointMipFilter",1];
kha_graphics4_MipMapFilter.PointMipFilter.toString = $estr;
kha_graphics4_MipMapFilter.PointMipFilter.__enum__ = kha_graphics4_MipMapFilter;
kha_graphics4_MipMapFilter.LinearMipFilter = ["LinearMipFilter",2];
kha_graphics4_MipMapFilter.LinearMipFilter.toString = $estr;
kha_graphics4_MipMapFilter.LinearMipFilter.__enum__ = kha_graphics4_MipMapFilter;
var kha_graphics4_PipelineStateBase = $hxClasses["kha.graphics4.PipelineStateBase"] = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = kha_graphics4_CullMode.None;
	this.depthWrite = false;
	this.depthMode = kha_graphics4_CompareMode.Always;
	this.stencilMode = kha_graphics4_CompareMode.Always;
	this.stencilBothPass = kha_graphics4_StencilAction.Keep;
	this.stencilDepthFail = kha_graphics4_StencilAction.Keep;
	this.stencilFail = kha_graphics4_StencilAction.Keep;
	this.stencilReferenceValue = 0;
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = kha_graphics4_BlendingFactor.BlendOne;
	this.blendDestination = kha_graphics4_BlendingFactor.BlendZero;
	this.blendOperation = kha_graphics4_BlendingOperation.Add;
	this.alphaBlendSource = kha_graphics4_BlendingFactor.BlendOne;
	this.alphaBlendDestination = kha_graphics4_BlendingFactor.BlendZero;
	this.alphaBlendOperation = kha_graphics4_BlendingOperation.Add;
	this.colorWriteMaskRed = this.colorWriteMaskBlue = this.colorWriteMaskGreen = this.colorWriteMaskAlpha = true;
	this.conservativeRasterization = false;
};
kha_graphics4_PipelineStateBase.__name__ = true;
kha_graphics4_PipelineStateBase.prototype = {
	set_colorWriteMask: function(value) {
		return this.colorWriteMaskRed = this.colorWriteMaskBlue = this.colorWriteMaskGreen = this.colorWriteMaskAlpha = value;
	}
	,__class__: kha_graphics4_PipelineStateBase
	,__properties__: {set_colorWriteMask:"set_colorWriteMask"}
};
var kha_graphics4_PipelineState = $hxClasses["kha.graphics4.PipelineState"] = function() {
	kha_graphics4_PipelineStateBase.call(this);
	this.pipeline = Krom.createPipeline();
};
kha_graphics4_PipelineState.__name__ = true;
kha_graphics4_PipelineState.convertCullMode = function(mode) {
	switch(mode[1]) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	}
};
kha_graphics4_PipelineState.convertCompareMode = function(mode) {
	switch(mode[1]) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	}
};
kha_graphics4_PipelineState.convertStencilAction = function(action) {
	switch(action[1]) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	}
};
kha_graphics4_PipelineState.convertBlendingFactor = function(factor) {
	switch(factor[1]) {
	case 0:case 1:
		return 0;
	case 2:
		return 1;
	case 3:
		return 2;
	case 4:
		return 3;
	case 5:
		return 4;
	case 6:
		return 5;
	case 7:
		return 6;
	case 8:
		return 7;
	case 9:
		return 8;
	case 10:
		return 9;
	}
};
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	'delete': function() {
		Krom.deletePipeline(this.pipeline);
		this.pipeline = null;
	}
	,compile: function() {
		var structure0 = this.inputLayout.length > 0 ? this.inputLayout[0].elements : null;
		var structure1 = this.inputLayout.length > 1 ? this.inputLayout[1].elements : null;
		var structure2 = this.inputLayout.length > 2 ? this.inputLayout[2].elements : null;
		var structure3 = this.inputLayout.length > 3 ? this.inputLayout[3].elements : null;
		var gs = this.geometryShader != null ? this.geometryShader.shader : null;
		var tcs = this.tessellationControlShader != null ? this.tessellationControlShader.shader : null;
		var tes = this.tessellationEvaluationShader != null ? this.tessellationEvaluationShader.shader : null;
		Krom.compilePipeline(this.pipeline,structure0,structure1,structure2,structure3,this.inputLayout.length,this.vertexShader.shader,this.fragmentShader.shader,gs,tcs,tes,{ cullMode : kha_graphics4_PipelineState.convertCullMode(this.cullMode), depthWrite : this.depthWrite, depthMode : kha_graphics4_PipelineState.convertCompareMode(this.depthMode), stencilMode : kha_graphics4_PipelineState.convertCompareMode(this.stencilMode), stencilBothPass : kha_graphics4_PipelineState.convertStencilAction(this.stencilBothPass), stencilDepthFail : kha_graphics4_PipelineState.convertStencilAction(this.stencilDepthFail), stencilFail : kha_graphics4_PipelineState.convertStencilAction(this.stencilFail), stencilReferenceValue : this.stencilReferenceValue, stencilReadMask : this.stencilReadMask, stencilWriteMask : this.stencilWriteMask, blendSource : kha_graphics4_PipelineState.convertBlendingFactor(this.blendSource), blendDestination : kha_graphics4_PipelineState.convertBlendingFactor(this.blendDestination), alphaBlendSource : kha_graphics4_PipelineState.convertBlendingFactor(this.alphaBlendSource), alphaBlendDestination : kha_graphics4_PipelineState.convertBlendingFactor(this.alphaBlendDestination), colorWriteMaskRed : this.colorWriteMaskRed, colorWriteMaskGreen : this.colorWriteMaskGreen, colorWriteMaskBlue : this.colorWriteMaskBlue, colorWriteMaskAlpha : this.colorWriteMaskAlpha, conservativeRasterization : this.conservativeRasterization});
	}
	,set: function() {
		Krom.setPipeline(this.pipeline);
	}
	,getConstantLocation: function(name) {
		return Krom.getConstantLocation(this.pipeline,name);
	}
	,getTextureUnit: function(name) {
		return Krom.getTextureUnit(this.pipeline,name);
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilAction = $hxClasses["kha.graphics4.StencilAction"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"] };
kha_graphics4_StencilAction.Keep = ["Keep",0];
kha_graphics4_StencilAction.Keep.toString = $estr;
kha_graphics4_StencilAction.Keep.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Zero = ["Zero",1];
kha_graphics4_StencilAction.Zero.toString = $estr;
kha_graphics4_StencilAction.Zero.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Replace = ["Replace",2];
kha_graphics4_StencilAction.Replace.toString = $estr;
kha_graphics4_StencilAction.Replace.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Increment = ["Increment",3];
kha_graphics4_StencilAction.Increment.toString = $estr;
kha_graphics4_StencilAction.Increment.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.IncrementWrap = ["IncrementWrap",4];
kha_graphics4_StencilAction.IncrementWrap.toString = $estr;
kha_graphics4_StencilAction.IncrementWrap.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Decrement = ["Decrement",5];
kha_graphics4_StencilAction.Decrement.toString = $estr;
kha_graphics4_StencilAction.Decrement.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.DecrementWrap = ["DecrementWrap",6];
kha_graphics4_StencilAction.DecrementWrap.toString = $estr;
kha_graphics4_StencilAction.DecrementWrap.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Invert = ["Invert",7];
kha_graphics4_StencilAction.Invert.toString = $estr;
kha_graphics4_StencilAction.Invert.__enum__ = kha_graphics4_StencilAction;
var kha_graphics4_TessellationControlShader = $hxClasses["kha.graphics4.TessellationControlShader"] = function(sources,names) {
	this.shader = Krom.createTessellationControlShader(sources[0].bytes.b.bufferValue,names[0]);
};
kha_graphics4_TessellationControlShader.__name__ = true;
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = $hxClasses["kha.graphics4.TessellationEvaluationShader"] = function(sources,names) {
	this.shader = Krom.createTessellationEvaluationShader(sources[0].bytes.b.bufferValue,names[0]);
};
kha_graphics4_TessellationEvaluationShader.__name__ = true;
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TexDir = $hxClasses["kha.graphics4.TexDir"] = { __ename__ : true, __constructs__ : ["U","V"] };
kha_graphics4_TexDir.U = ["U",0];
kha_graphics4_TexDir.U.toString = $estr;
kha_graphics4_TexDir.U.__enum__ = kha_graphics4_TexDir;
kha_graphics4_TexDir.V = ["V",1];
kha_graphics4_TexDir.V.toString = $estr;
kha_graphics4_TexDir.V.__enum__ = kha_graphics4_TexDir;
var kha_graphics4_TextureAddressing = $hxClasses["kha.graphics4.TextureAddressing"] = { __ename__ : true, __constructs__ : ["Repeat","Mirror","Clamp"] };
kha_graphics4_TextureAddressing.Repeat = ["Repeat",0];
kha_graphics4_TextureAddressing.Repeat.toString = $estr;
kha_graphics4_TextureAddressing.Repeat.__enum__ = kha_graphics4_TextureAddressing;
kha_graphics4_TextureAddressing.Mirror = ["Mirror",1];
kha_graphics4_TextureAddressing.Mirror.toString = $estr;
kha_graphics4_TextureAddressing.Mirror.__enum__ = kha_graphics4_TextureAddressing;
kha_graphics4_TextureAddressing.Clamp = ["Clamp",2];
kha_graphics4_TextureAddressing.Clamp.toString = $estr;
kha_graphics4_TextureAddressing.Clamp.__enum__ = kha_graphics4_TextureAddressing;
var kha_graphics4_TextureFilter = $hxClasses["kha.graphics4.TextureFilter"] = { __ename__ : true, __constructs__ : ["PointFilter","LinearFilter","AnisotropicFilter"] };
kha_graphics4_TextureFilter.PointFilter = ["PointFilter",0];
kha_graphics4_TextureFilter.PointFilter.toString = $estr;
kha_graphics4_TextureFilter.PointFilter.__enum__ = kha_graphics4_TextureFilter;
kha_graphics4_TextureFilter.LinearFilter = ["LinearFilter",1];
kha_graphics4_TextureFilter.LinearFilter.toString = $estr;
kha_graphics4_TextureFilter.LinearFilter.__enum__ = kha_graphics4_TextureFilter;
kha_graphics4_TextureFilter.AnisotropicFilter = ["AnisotropicFilter",2];
kha_graphics4_TextureFilter.AnisotropicFilter.toString = $estr;
kha_graphics4_TextureFilter.AnisotropicFilter.__enum__ = kha_graphics4_TextureFilter;
var kha_graphics4_TextureFormat = $hxClasses["kha.graphics4.TextureFormat"] = { __ename__ : true, __constructs__ : ["RGBA32","L8","RGBA128","DEPTH16","RGBA64","A32","A16"] };
kha_graphics4_TextureFormat.RGBA32 = ["RGBA32",0];
kha_graphics4_TextureFormat.RGBA32.toString = $estr;
kha_graphics4_TextureFormat.RGBA32.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.L8 = ["L8",1];
kha_graphics4_TextureFormat.L8.toString = $estr;
kha_graphics4_TextureFormat.L8.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.RGBA128 = ["RGBA128",2];
kha_graphics4_TextureFormat.RGBA128.toString = $estr;
kha_graphics4_TextureFormat.RGBA128.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.DEPTH16 = ["DEPTH16",3];
kha_graphics4_TextureFormat.DEPTH16.toString = $estr;
kha_graphics4_TextureFormat.DEPTH16.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.RGBA64 = ["RGBA64",4];
kha_graphics4_TextureFormat.RGBA64.toString = $estr;
kha_graphics4_TextureFormat.RGBA64.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.A32 = ["A32",5];
kha_graphics4_TextureFormat.A32.toString = $estr;
kha_graphics4_TextureFormat.A32.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.A16 = ["A16",6];
kha_graphics4_TextureFormat.A16.toString = $estr;
kha_graphics4_TextureFormat.A16.__enum__ = kha_graphics4_TextureFormat;
var kha_graphics4_TextureUnit = $hxClasses["kha.graphics4.TextureUnit"] = function() { };
kha_graphics4_TextureUnit.__name__ = true;
var kha_graphics4_Usage = $hxClasses["kha.graphics4.Usage"] = { __ename__ : true, __constructs__ : ["StaticUsage","DynamicUsage","ReadableUsage"] };
kha_graphics4_Usage.StaticUsage = ["StaticUsage",0];
kha_graphics4_Usage.StaticUsage.toString = $estr;
kha_graphics4_Usage.StaticUsage.__enum__ = kha_graphics4_Usage;
kha_graphics4_Usage.DynamicUsage = ["DynamicUsage",1];
kha_graphics4_Usage.DynamicUsage.toString = $estr;
kha_graphics4_Usage.DynamicUsage.__enum__ = kha_graphics4_Usage;
kha_graphics4_Usage.ReadableUsage = ["ReadableUsage",2];
kha_graphics4_Usage.ReadableUsage.toString = $estr;
kha_graphics4_Usage.ReadableUsage.__enum__ = kha_graphics4_Usage;
var kha_graphics4_VertexBuffer = $hxClasses["kha.graphics4.VertexBuffer"] = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.vertexCount = vertexCount;
	this.structure = structure;
	this.buffer = Krom.createVertexBuffer(vertexCount,structure.elements,instanceDataStepRate);
	var this1 = new Float32Array(vertexCount * (structure.byteSize() / 4 | 0));
	this._data = this1;
};
kha_graphics4_VertexBuffer.__name__ = true;
kha_graphics4_VertexBuffer.prototype = {
	'delete': function() {
		Krom.deleteVertexBuffer(this.buffer);
		this.buffer = null;
	}
	,lock: function(start,count) {
		return this._data;
	}
	,unlock: function() {
		Krom.setVertices(this.buffer,this._data);
	}
	,stride: function() {
		return this.structure.byteSize();
	}
	,count: function() {
		return this.vertexCount;
	}
	,set: function(offset) {
		Krom.setVertexBuffer(this.buffer);
		return 0;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexData = $hxClasses["kha.graphics4.VertexData"] = { __ename__ : true, __constructs__ : ["Float1","Float2","Float3","Float4","Float4x4"] };
kha_graphics4_VertexData.Float1 = ["Float1",0];
kha_graphics4_VertexData.Float1.toString = $estr;
kha_graphics4_VertexData.Float1.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float2 = ["Float2",1];
kha_graphics4_VertexData.Float2.toString = $estr;
kha_graphics4_VertexData.Float2.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float3 = ["Float3",2];
kha_graphics4_VertexData.Float3.toString = $estr;
kha_graphics4_VertexData.Float3.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float4 = ["Float4",3];
kha_graphics4_VertexData.Float4.toString = $estr;
kha_graphics4_VertexData.Float4.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float4x4 = ["Float4x4",4];
kha_graphics4_VertexData.Float4x4.toString = $estr;
kha_graphics4_VertexData.Float4x4.__enum__ = kha_graphics4_VertexData;
var kha_graphics4_VertexElement = $hxClasses["kha.graphics4.VertexElement"] = function(name,data) {
	this.name = name;
	this.data = data;
};
kha_graphics4_VertexElement.__name__ = true;
kha_graphics4_VertexElement.prototype = {
	__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = $hxClasses["kha.graphics4.VertexShader"] = function(sources,names) {
	if(sources != null) {
		this.shader = Krom.createVertexShader(sources[0].bytes.b.bufferValue,names[0]);
	}
};
kha_graphics4_VertexShader.__name__ = true;
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader(null,null);
	shader.shader = Krom.createVertexShaderFromSource(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = $hxClasses["kha.graphics4.VertexStructure"] = function() {
	this.elements = [];
	this.instanced = false;
};
kha_graphics4_VertexStructure.__name__ = true;
kha_graphics4_VertexStructure.prototype = {
	add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g1 = 0;
		var _g = this.elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			byteSize += this.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data[1]) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hxClasses["kha.input.Gamepad"] = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
kha_input_Gamepad.__name__ = true;
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.prototype = {
	notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_id:"get_id"}
};
var kha_network_Controller = $hxClasses["kha.network.Controller"] = function() {
	this.__id = kha_network_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
kha_network_Controller.__name__ = true;
kha_network_Controller.prototype = {
	_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_network_Controller
};
var kha_input_Keyboard = $hxClasses["kha.input.Keyboard"] = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_network_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
kha_input_Keyboard.__name__ = true;
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.__super__ = kha_network_Controller;
kha_input_Keyboard.prototype = $extend(kha_network_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,sendDownEvent: function(code) {
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function($char) {
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener($char);
		}
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_input_Keyboard
});
var kha_input_Mouse = $hxClasses["kha.input.Mouse"] = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_network_Controller.call(this);
	kha_input_Mouse.instance = this;
};
kha_input_Mouse.__name__ = true;
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.__super__ = kha_network_Controller;
kha_input_Mouse.prototype = $extend(kha_network_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 88, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 91, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 100, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 103, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 112, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 115, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 124, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 127, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 136, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 139, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(func,error) {
	}
	,removeFromLockChange: function(func,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,sendLeaveEvent: function(windowId) {
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = $hxClasses["kha.input.MouseImpl"] = function() {
	kha_input_Mouse.call(this);
};
kha_input_MouseImpl.__name__ = true;
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Sensor = $hxClasses["kha.input.Sensor"] = function() { };
kha_input_Sensor.__name__ = true;
kha_input_Sensor.get = function(type) {
	return null;
};
kha_input_Sensor.prototype = {
	notify: function(listener) {
	}
	,__class__: kha_input_Sensor
};
var kha_input_SensorType = $hxClasses["kha.input.SensorType"] = { __ename__ : true, __constructs__ : ["Accelerometer","Gyroscope"] };
kha_input_SensorType.Accelerometer = ["Accelerometer",0];
kha_input_SensorType.Accelerometer.toString = $estr;
kha_input_SensorType.Accelerometer.__enum__ = kha_input_SensorType;
kha_input_SensorType.Gyroscope = ["Gyroscope",1];
kha_input_SensorType.Gyroscope.toString = $estr;
kha_input_SensorType.Gyroscope.__enum__ = kha_input_SensorType;
var kha_input_Surface = $hxClasses["kha.input.Surface"] = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
kha_input_Surface.__name__ = true;
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = $hxClasses["kha.internal.BytesBlob"] = function(bytes) {
	this.bytes = bytes;
};
kha_internal_BytesBlob.__name__ = true;
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	var b = (value >>> position & 1) == 1;
	if(b) {
		var a = 3;
		++a;
		return true;
	} else {
		var c = 4;
		--c;
		return false;
	}
};
kha_internal_BytesBlob.toText = function(chars,length) {
	var value = "";
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		value += String.fromCharCode(chars[i]);
	}
	return value;
};
kha_internal_BytesBlob.prototype = {
	sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value & 255;
	}
	,readU8: function(position) {
		var $byte = this.bytes.b[position];
		++position;
		return $byte;
	}
	,readS8: function(position) {
		var $byte = this.bytes.b[position];
		++position;
		var sign = ($byte & 128) == 0 ? 1 : -1;
		$byte &= 127;
		return sign * $byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8Char: function(position) {
		if(position.value >= this.get_length()) {
			return -1;
		}
		var c = this.readU8(position.value);
		++position.value;
		var value = 0;
		if(!kha_internal_BytesBlob.bit(c,7)) {
			value = c;
		} else if(kha_internal_BytesBlob.bit(c,7) && kha_internal_BytesBlob.bit(c,6) && !kha_internal_BytesBlob.bit(c,5)) {
			var a = c & 31;
			var c2 = this.readU8(position.value);
			++position.value;
			var b = c2 & 63;
			value = a << 6 | b;
		} else if(kha_internal_BytesBlob.bit(c,7) && kha_internal_BytesBlob.bit(c,6) && kha_internal_BytesBlob.bit(c,5) && !kha_internal_BytesBlob.bit(c,4)) {
			position.value += 2;
		} else if(kha_internal_BytesBlob.bit(c,7) && kha_internal_BytesBlob.bit(c,6) && kha_internal_BytesBlob.bit(c,5) && kha_internal_BytesBlob.bit(c,4) && !kha_internal_BytesBlob.bit(c,3)) {
			position.value += 3;
		}
		return value;
	}
	,readUtf8Block: function(buffer,position) {
		var bufferindex = 0;
		if(position.value >= this.get_length()) {
			return "";
		}
		while(bufferindex < 2000) {
			var c = this.readUtf8Char(position);
			if(c < 0) {
				break;
			}
			buffer[bufferindex] = c;
			++bufferindex;
		}
		return kha_internal_BytesBlob.toText(buffer,bufferindex);
	}
	,readUtf8String: function() {
		var this1 = new Array(2000);
		var buffer = this1;
		var text = "";
		var start = 0;
		if(this.get_length() >= 3 && this.bytes.b[0] == 239 && this.bytes.b[1] == 187 && this.bytes.b[2] == 191) {
			start = 3;
		}
		var position = { value : start};
		while(position.value < this.get_length()) text += this.readUtf8Block(buffer,position);
		return text;
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
	,__properties__: {get_length:"get_length"}
};
var kha_krom_Graphics = $hxClasses["kha.krom.Graphics"] = function(renderTarget) {
	this.renderTarget = renderTarget;
};
kha_krom_Graphics.__name__ = true;
kha_krom_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_krom_Graphics.prototype = {
	begin: function(additionalRenderTargets) {
		Krom.begin(this.renderTarget,additionalRenderTargets);
	}
	,beginFace: function(face) {
		Krom.beginFace(this.renderTarget,face);
	}
	,beginEye: function(eye) {
	}
	,end: function() {
		Krom.end();
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var flags = 0;
		if(color != null) {
			flags |= 1;
		}
		if(depth != null) {
			flags |= 2;
		}
		if(stencil != null) {
			flags |= 4;
		}
		Krom.clear(flags,color == null ? 0 : color,depth,stencil);
	}
	,viewport: function(x,y,width,height) {
		Krom.viewport(x,y,width,height);
	}
	,setVertexBuffer: function(vertexBuffer) {
		vertexBuffer.set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		Krom.setVertexBuffers(vertexBuffers);
	}
	,setIndexBuffer: function(indexBuffer) {
		indexBuffer.set();
	}
	,setCubeMap: function(unit,cubeMap) {
		Krom.setTexture(unit,cubeMap);
	}
	,setCubeMapDepth: function(unit,cubeMap) {
		Krom.setTextureDepth(unit,cubeMap);
	}
	,setTexture: function(unit,texture) {
		Krom.setTexture(unit,texture);
	}
	,setTextureDepth: function(unit,texture) {
		Krom.setTextureDepth(unit,texture);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
	}
	,setImageTexture: function(unit,texture) {
		Krom.setImageTexture(unit,texture);
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		Krom.setTextureParameters(texunit,uAddressing[1],vAddressing[1],minificationFilter[1],magnificationFilter[1],mipmapFilter[1]);
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		Krom.setTexture3DParameters(texunit,uAddressing[1],vAddressing[1],wAddressing[1],minificationFilter[1],magnificationFilter[1],mipmapFilter[1]);
	}
	,setPipeline: function(pipeline) {
		pipeline.set();
	}
	,setBool: function(location,value) {
		Krom.setBool(location,value);
	}
	,setInt: function(location,value) {
		Krom.setInt(location,value);
	}
	,setFloat: function(location,value) {
		Krom.setFloat(location,value);
	}
	,setFloat2: function(location,value1,value2) {
		Krom.setFloat2(location,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		Krom.setFloat3(location,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		Krom.setFloat4(location,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		var this1 = new Float32Array(values.length);
		var vals = this1;
		var _g1 = 0;
		var _g = values.length;
		while(_g1 < _g) {
			var i = _g1++;
			vals[i] = values[i];
		}
		Krom.setFloats(location,vals);
	}
	,setVector2: function(location,value) {
		Krom.setFloat2(location,value.x,value.y);
	}
	,setVector3: function(location,value) {
		Krom.setFloat3(location,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		Krom.setFloat4(location,value.x,value.y,value.z,value.w);
	}
	,setMatrix: function(location,matrix) {
		Krom.setMatrix(location,matrix);
	}
	,setMatrix3: function(location,matrix) {
		Krom.setMatrix3(location,matrix);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		Krom.drawIndexedVertices(start,count);
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		Krom.drawIndexedVerticesInstanced(instanceCount,start,count);
	}
	,instancedRenderingAvailable: function() {
		return false;
	}
	,scissor: function(x,y,width,height) {
		Krom.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		Krom.disableScissor();
	}
	,renderTargetsInvertedY: function() {
		return Krom.renderTargetsInvertedY();
	}
	,__class__: kha_krom_Graphics
};
var kha_krom_Sound = $hxClasses["kha.krom.Sound"] = function(bytes) {
	kha_Sound.call(this);
	this.compressedData = bytes;
	this.uncompressedData = null;
};
kha_krom_Sound.__name__ = true;
kha_krom_Sound.__super__ = kha_Sound;
kha_krom_Sound.prototype = $extend(kha_Sound.prototype,{
	uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var soundBytes = this.compressedData;
		var count = soundBytes.length / 4 | 0;
		var this1 = new Array(count);
		this.uncompressedData = this1;
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			this.uncompressedData[i] = soundBytes.getFloat(i * 4);
		}
		this.compressedData = null;
		done();
	}
	,unload: function() {
		kha_Sound.prototype.unload.call(this);
	}
	,__class__: kha_krom_Sound
});
var kha_math_FastVector2 = $hxClasses["kha.math.FastVector2"] = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
kha_math_FastVector2.__name__ = true;
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector3 = $hxClasses["kha.math.FastVector3"] = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
kha_math_FastVector3.__name__ = true;
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector4 = $hxClasses["kha.math.FastVector4"] = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
kha_math_FastVector4.__name__ = true;
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Matrix3 = $hxClasses["kha.math.Matrix3"] = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
kha_math_Matrix3.__name__ = true;
kha_math_Matrix3.prototype = {
	__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = $hxClasses["kha.math.Matrix4"] = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
kha_math_Matrix4.__name__ = true;
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var zaxis = new kha_math_Vector3(at.x - eye.x,at.y - eye.y,at.z - eye.z);
	zaxis.set_length(1);
	var _x = zaxis.y * up.z - zaxis.z * up.y;
	var _y = zaxis.z * up.x - zaxis.x * up.z;
	var _z = zaxis.x * up.y - zaxis.y * up.x;
	var xaxis = new kha_math_Vector3(_x,_y,_z);
	xaxis.set_length(1);
	var yaxis_z;
	var yaxis_y;
	var yaxis_x;
	var _x1 = xaxis.y * zaxis.z - xaxis.z * zaxis.y;
	var _y1 = xaxis.z * zaxis.x - xaxis.x * zaxis.z;
	var _z1 = xaxis.x * zaxis.y - xaxis.y * zaxis.x;
	yaxis_x = _x1;
	yaxis_y = _y1;
	yaxis_z = _z1;
	return new kha_math_Matrix4(xaxis.x,xaxis.y,xaxis.z,-(xaxis.x * eye.x + xaxis.y * eye.y + xaxis.z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis.x,-zaxis.y,-zaxis.z,zaxis.x * eye.x + zaxis.y * eye.y + zaxis.z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	__class__: kha_math_Matrix4
};
var kha_math_Vector2 = $hxClasses["kha.math.Vector2"] = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
kha_math_Vector2.__name__ = true;
kha_math_Vector2.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector3 = $hxClasses["kha.math.Vector3"] = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
kha_math_Vector3.__name__ = true;
kha_math_Vector3.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector4 = $hxClasses["kha.math.Vector4"] = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
kha_math_Vector4.__name__ = true;
kha_math_Vector4.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_network_Client = $hxClasses["kha.network.Client"] = function() { };
kha_network_Client.__name__ = true;
kha_network_Client.prototype = {
	__class__: kha_network_Client
	,__properties__: {get_id:"get_id"}
};
var kha_network_ControllerBuilder = $hxClasses["kha.network.ControllerBuilder"] = function() { };
kha_network_ControllerBuilder.__name__ = true;
var kha_network_Entity = $hxClasses["kha.network.Entity"] = function() { };
kha_network_Entity.__name__ = true;
kha_network_Entity.prototype = {
	__class__: kha_network_Entity
};
var kha_network_LocalClient = $hxClasses["kha.network.LocalClient"] = function(id) {
	this.myId = id;
};
kha_network_LocalClient.__name__ = true;
kha_network_LocalClient.__interfaces__ = [kha_network_Client];
kha_network_LocalClient.prototype = {
	send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,get_controllers: function() {
		return null;
	}
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_network_LocalClient
	,__properties__: {get_id:"get_id",get_controllers:"get_controllers"}
};
var kha_network_Network = $hxClasses["kha.network.Network"] = function(url,port,errorCallback,closeCallback) {
};
kha_network_Network.__name__ = true;
kha_network_Network.prototype = {
	send: function(bytes,mandatory) {
	}
	,listen: function(listener) {
	}
	,__class__: kha_network_Network
};
var kha_network_State = $hxClasses["kha.network.State"] = function(time,data) {
	this.time = time;
	this.data = data;
};
kha_network_State.__name__ = true;
kha_network_State.prototype = {
	__class__: kha_network_State
};
var kha_network_Session = $hxClasses["kha.network.Session"] = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_network_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
kha_network_Session.__name__ = true;
kha_network_Session.the = function() {
	return kha_network_Session.instance;
};
kha_network_Session.prototype = {
	get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		var this1 = this.entities;
		var key = entity._id();
		this1.h[key] = entity;
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "Session.hx", lineNumber : 88, className : "kha.network.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		var this1 = this.controllers;
		var key = controller._id();
		this1.h[key] = controller;
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
		bytes.b[0] = 4;
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		var _g = bytes.b[0];
		switch(_g) {
		case 0:
			var index = bytes.b[1];
			this.localClient = new kha_network_LocalClient(index);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.warp(time);
			break;
		case 3:
			var _g1 = bytes.b[1];
			switch(_g1) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g1 = 0;
		var _g = classnamelength;
		while(_g1 < _g) {
			var i = _g1++;
			classname += String.fromCharCode(bytes.b[index]);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g11 = 0;
		var _g2 = methodnamelength;
		while(_g11 < _g2) {
			var i1 = _g11++;
			methodname += String.fromCharCode(bytes.b[index]);
			++index;
		}
		while(index < bytes.length) {
			var type = bytes.b[index];
			++index;
			switch(type) {
			case 66:
				var value = bytes.b[index] == 1;
				++index;
				haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "Session.hx", lineNumber : 295, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(value);
				break;
			case 70:
				var value1 = bytes.getDouble(index);
				index += 8;
				haxe_Log.trace("Float: " + value1,{ fileName : "Session.hx", lineNumber : 300, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(value1);
				break;
			case 73:
				var value2 = bytes.getInt32(index);
				index += 4;
				haxe_Log.trace("Int: " + value2,{ fileName : "Session.hx", lineNumber : 305, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(value2);
				break;
			case 83:
				var length = bytes.getUInt16(index);
				index += 2;
				var str = "";
				var _g12 = 0;
				var _g3 = length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					str += String.fromCharCode(bytes.b[index]);
					++index;
				}
				haxe_Log.trace("String: " + str,{ fileName : "Session.hx", lineNumber : 315, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(str);
				break;
			default:
				haxe_Log.trace("Unknown argument type.",{ fileName : "Session.hx", lineNumber : 318, className : "kha.network.Session", methodName : "executeRPC"});
			}
		}
		if(syncId == -1) {
			Reflect.field(Type.resolveClass(classname),methodname + "_remotely").apply(null,args);
		} else {
			var o = kha_network_SyncBuilder.objects[syncId];
			Reflect.field(kha_network_SyncBuilder.objects[syncId],methodname + "_remotely").apply(o,args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha_network_Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(22 + controller1._inputBufferIndex));
				bytes.b[0] = 2;
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.time());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				var v = kha_System.get_screenRotation()[1];
				bytes.b[21] = v & 255;
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_network_Session
	,__properties__: {get_me:"get_me"}
};
var kha_network_SyncBuilder = $hxClasses["kha.network.SyncBuilder"] = function() { };
kha_network_SyncBuilder.__name__ = true;
var kha_simd_Float32x4 = $hxClasses["kha.simd.Float32x4"] = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
kha_simd_Float32x4.__name__ = true;
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	switch(index) {
	case 0:
		return t._0;
	case 1:
		return t._1;
	case 2:
		return t._2;
	case 3:
		return t._3;
	}
	return 0;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	__class__: kha_simd_Float32x4
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Main.numverts = 0;
Main.startTime = 0.0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
iron_App.traitInits = [];
iron_App.traitUpdates = [];
iron_App.traitLateUpdates = [];
iron_App.traitRenders = [];
iron_App.traitRenders2D = [];
iron_Scene.framePassed = true;
iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
iron_data_Data.cachedLamps = new haxe_ds_StringMap();
iron_data_Data.cachedCameras = new haxe_ds_StringMap();
iron_data_Data.cachedRenderPaths = new haxe_ds_StringMap();
iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
iron_data_Data.cachedParticles = new haxe_ds_StringMap();
iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
iron_data_Data.cachedGreasePencils = new haxe_ds_StringMap();
iron_data_Data.cachedShaders = new haxe_ds_StringMap();
iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
iron_data_Data.cachedImages = new haxe_ds_StringMap();
iron_data_Data.cachedSounds = new haxe_ds_StringMap();
iron_data_Data.cachedVideos = new haxe_ds_StringMap();
iron_data_Data.cachedFonts = new haxe_ds_StringMap();
iron_data_Data.loadingMeshes = new haxe_ds_StringMap();
iron_data_Data.loadingLamps = new haxe_ds_StringMap();
iron_data_Data.loadingCameras = new haxe_ds_StringMap();
iron_data_Data.loadingRenderPaths = new haxe_ds_StringMap();
iron_data_Data.loadingMaterials = new haxe_ds_StringMap();
iron_data_Data.loadingParticles = new haxe_ds_StringMap();
iron_data_Data.loadingWorlds = new haxe_ds_StringMap();
iron_data_Data.loadingGreasePencils = new haxe_ds_StringMap();
iron_data_Data.loadingShaders = new haxe_ds_StringMap();
iron_data_Data.loadingSceneRaws = new haxe_ds_StringMap();
iron_data_Data.assetsLoaded = 0;
iron_data_Data.loadingBlobs = new haxe_ds_StringMap();
iron_data_Data.loadingImages = new haxe_ds_StringMap();
iron_data_Data.loadingSounds = new haxe_ds_StringMap();
iron_data_Data.loadingVideos = new haxe_ds_StringMap();
iron_data_Data.loadingFonts = new haxe_ds_StringMap();
iron_data_ConstData.skydomeIndices = [0,1,2,0,3,4,3,5,6,5,7,8,7,9,10,9,11,12,13,14,15,11,16,17,13,18,2,14,2,19,2,1,20,1,4,21,4,6,22,6,8,23,8,10,24,10,12,25,14,26,15,17,27,25,22,23,28,24,29,28,24,25,30,26,31,15,25,27,32,26,19,33,19,20,34,20,21,35,21,22,36,33,34,37,34,35,38,35,36,39,36,28,40,28,29,41,30,42,41,31,43,15,30,32,44,31,33,45,40,41,46,42,47,46,43,48,15,42,44,49,43,45,50,45,37,51,37,38,52,39,53,52,39,40,54,50,51,55,51,52,56,53,57,56,53,54,58,46,59,58,46,47,60,48,61,15,47,49,62,48,50,63,59,64,65,59,60,66,61,67,15,60,62,68,61,63,69,63,55,70,56,71,70,56,57,72,57,58,65,70,71,73,71,72,74,72,65,75,64,76,75,64,66,77,67,78,15,68,79,77,67,69,80,69,70,81,76,77,82,78,83,15,77,79,84,80,85,83,80,81,86,81,73,87,74,88,87,74,75,89,76,90,89,87,88,91,88,89,92,90,93,92,90,82,94,83,95,15,82,84,96,83,85,97,86,98,97,86,87,99,95,100,15,96,101,102,95,97,103,97,98,104,98,99,105,91,106,105,91,92,107,93,108,107,93,94,102,105,106,109,106,107,110,108,111,110,108,102,112,100,113,15,102,101,114,100,103,115,103,104,116,104,105,117,114,118,119,113,115,120,115,116,121,117,122,121,109,123,122,109,110,124,111,125,124,111,112,119,113,126,15,123,124,127,125,128,127,125,119,129,126,130,15,119,118,131,126,120,132,121,133,132,121,122,134,122,123,135,130,132,136,132,133,137,133,134,138,134,135,139,135,127,140,128,141,140,128,129,142,130,143,15,129,131,144,139,140,145,141,146,145,141,142,147,143,148,15,142,144,149,143,136,150,137,151,150,138,152,151,138,139,153,150,151,154,152,155,154,153,156,155,153,145,157,146,158,157,146,147,159,148,160,15,147,149,161,148,150,162,158,163,164,158,159,165,160,166,15,161,167,165,160,162,168,162,154,169,155,170,169,156,171,170,156,157,164,169,170,172,171,173,172,171,164,174,163,175,174,163,165,176,166,177,15,165,167,178,166,168,179,168,169,180,176,181,182,177,183,15,176,178,184,177,179,185,179,180,186,172,187,186,173,188,187,173,174,189,175,182,189,187,190,191,188,192,190,188,189,193,182,194,193,182,181,195,183,196,15,181,184,197,183,185,198,185,186,191,194,195,199,196,200,15,195,197,201,196,198,202,198,191,203,190,204,203,192,205,204,192,193,206,194,207,206,205,208,209,205,206,210,207,211,210,207,199,212,200,213,15,199,201,214,202,215,213,202,203,216,204,209,216,213,217,15,214,218,219,215,220,217,215,216,221,209,222,221,209,208,223,208,210,224,211,225,224,211,212,219,223,226,227,223,224,228,225,229,228,225,219,230,217,231,15,218,232,230,220,233,231,220,221,234,222,227,234,230,232,235,231,233,236,233,234,237,227,238,237,227,226,239,226,228,240,229,241,240,229,230,242,231,243,15,239,240,244,241,245,244,241,242,246,243,247,15,235,248,246,243,236,249,237,250,249,238,251,250,239,252,251,249,250,253,250,251,254,252,255,254,252,244,256,245,257,256,245,246,258,247,259,15,248,260,258,247,249,261,257,262,263,258,264,262,259,265,15,258,260,266,259,261,267,261,253,268,253,254,269,255,270,269,255,256,263,268,271,272,269,273,271,270,274,273,270,263,275,262,276,275,262,264,277,265,278,15,264,266,279,267,272,278,276,280,281,276,277,282,278,283,15,277,279,284,278,272,285,272,271,286,271,273,287,274,288,287,274,275,281,287,3,0,288,5,3,281,7,5,280,9,7,282,11,9,283,13,15,282,284,16,285,18,13,286,0,18,0,2,18,0,4,1,3,6,4,5,8,6,7,10,8,9,12,10,11,17,12,13,2,14,14,19,26,2,20,19,1,21,20,4,22,21,6,23,22,8,24,23,10,25,24,17,25,12,22,28,36,24,28,23,24,30,29,25,32,30,26,33,31,19,34,33,20,35,34,21,36,35,33,37,45,34,38,37,35,39,38,36,40,39,28,41,40,30,41,29,30,44,42,31,45,43,40,46,54,42,46,41,42,49,47,43,50,48,45,51,50,37,52,51,39,52,38,39,54,53,50,55,63,51,56,55,53,56,52,53,58,57,46,58,54,46,60,59,47,62,60,48,63,61,59,65,58,59,66,64,60,68,66,61,69,67,63,70,69,56,70,55,56,72,71,57,65,72,70,73,81,71,74,73,72,75,74,64,75,65,64,77,76,68,77,66,67,80,78,69,81,80,76,82,90,77,84,82,80,83,78,80,86,85,81,87,86,74,87,73,74,89,88,76,89,75,87,91,99,88,92,91,90,92,89,90,94,93,82,96,94,83,97,95,86,97,85,86,99,98,96,102,94,95,103,100,97,104,103,98,105,104,91,105,99,91,107,106,93,107,92,93,102,108,105,109,117,106,110,109,108,110,107,108,112,111,102,114,112,100,115,113,103,116,115,104,117,116,114,119,112,113,120,126,115,121,120,117,121,116,109,122,117,109,124,123,111,124,110,111,119,125,123,127,135,125,127,124,125,129,128,119,131,129,126,132,130,121,132,120,121,134,133,122,135,134,130,136,143,132,137,136,133,138,137,134,139,138,135,140,139,128,140,127,128,142,141,129,144,142,139,145,153,141,145,140,141,147,146,142,149,147,143,150,148,137,150,136,138,151,137,138,153,152,150,154,162,152,154,151,153,155,152,153,157,156,146,157,145,146,159,158,147,161,159,148,162,160,158,164,157,158,165,163,161,165,159,160,168,166,162,169,168,155,169,154,156,170,155,156,164,171,169,172,180,171,172,170,171,174,173,163,174,164,163,176,175,165,178,176,166,179,177,168,180,179,176,182,175,176,184,181,177,185,183,179,186,185,172,186,180,173,187,172,173,189,188,175,189,174,187,191,186,188,190,187,188,193,192,182,193,189,182,195,194,181,197,195,183,198,196,185,191,198,194,199,207,195,201,199,196,202,200,198,203,202,190,203,191,192,204,190,192,206,205,194,206,193,205,209,204,205,210,208,207,210,206,207,212,211,199,214,212,202,213,200,202,216,215,204,216,203,214,219,212,215,217,213,215,221,220,209,221,216,209,223,222,208,224,223,211,224,210,211,219,225,223,227,222,223,228,226,225,228,224,225,230,229,218,230,219,220,231,217,220,234,233,222,234,221,230,235,242,231,236,243,233,237,236,227,237,234,227,239,238,226,240,239,229,240,228,229,242,241,239,244,252,241,244,240,241,246,245,235,246,242,243,249,247,237,249,236,238,250,237,239,251,238,249,253,261,250,254,253,252,254,251,252,256,255,245,256,244,245,258,257,248,258,246,247,261,259,257,263,256,258,262,257,258,266,264,259,267,265,261,268,267,253,269,268,255,269,254,255,263,270,268,272,267,269,271,268,270,273,269,270,275,274,262,275,263,262,277,276,264,279,277,267,278,265,276,281,275,276,282,280,277,284,282,278,285,283,272,286,285,271,287,286,274,287,273,274,281,288,287,0,286,288,3,287,281,5,288,280,7,281,282,9,280,282,16,11,285,13,283,286,18,285,84,289,96,96,289,101,101,289,114,114,289,118,118,289,131,144,131,289,149,144,289,149,289,161,161,289,167,167,289,178,178,289,184,184,289,197,197,289,201,201,289,214,214,289,218,218,289,232,232,289,235,235,289,248,260,248,289,260,289,266,266,289,279,279,289,284,284,289,16,16,289,17,27,17,289,27,289,32,44,32,289,44,289,49,49,289,62,62,289,68,68,289,79,79,289,84];
iron_data_ConstData.skydomePos = [-0.5555702447891235,0.0,0.8314695954322815,-0.5448951125144958,0.10838644951581955,0.8314695954322815,-0.3753302991390228,0.07465790957212448,0.9238795042037964,-0.7071067690849304,0.0,0.7071067690849304,-0.6935198903083801,0.13794974982738495,0.7071067690849304,-0.8314696550369263,0.0,0.5555701851844788,-0.8154931664466858,0.16221174597740173,0.5555701851844788,-0.9238795042037964,0.0,0.3826834261417389,-0.906127393245697,0.18024000525474548,0.3826834261417389,-0.9807852506637573,0.0,0.19509035348892212,-0.9619396924972534,0.19134177267551422,0.19509035348892212,-1.0,0.0,7.549790126404332e-08,-0.9807852506637573,0.1950903832912445,7.549790126404332e-08,-0.19509032368659973,0.0,0.9807852506637573,-0.19134171307086945,0.03806029632687569,0.9807852506637573,2.4803494369507462e-08,-1.246939973498229e-07,1.0,-0.9807853102684021,0.0,-0.282339870929718,-0.9619397521018982,0.19134178757667542,-0.282339870929718,-0.3826834559440613,0.0,0.9238795042037964,-0.3535534143447876,0.14644673466682434,0.9238795042037964,-0.513279914855957,0.21260765194892883,0.8314695954322815,-0.6532813906669617,0.2705981731414795,0.7071067690849304,-0.7681776881217957,0.3181897699832916,0.5555701851844788,-0.853553295135498,0.3535534739494324,0.3826834261417389,-0.9061273336410522,0.37533038854599,0.19509035348892212,-0.9238794445991516,0.38268354535102844,7.549790126404332e-08,-0.1802399456501007,0.07465796172618866,0.9807852506637573,-0.9061273336410522,0.37533038854599,-0.282339870929718,-0.7681776285171509,0.5132800936698914,0.3826834261417389,-0.8154929876327515,0.5448952317237854,0.19509035348892212,-0.8314694762229919,0.5555704236030579,7.549790126404332e-08,-0.16221162676811218,0.1083865687251091,0.9807852506637573,-0.8154929876327515,0.5448952317237854,-0.282339870929718,-0.3181896209716797,0.2126077115535736,0.9238795042037964,-0.4619396924972534,0.3086584508419037,0.8314695954322815,-0.5879377126693726,0.3928476572036743,0.7071067690849304,-0.6913416385650635,0.4619399309158325,0.5555701851844788,-0.39284735918045044,0.3928476870059967,0.8314695954322815,-0.49999988079071045,0.5000001788139343,0.7071067690849304,-0.5879376530647278,0.5879380106925964,0.5555701851844788,-0.6532813310623169,0.6532816290855408,0.3826834261417389,-0.6935197114944458,0.6935200691223145,0.19509035348892212,-0.7071065902709961,0.7071070075035095,7.549790126404332e-08,-0.137949600815773,0.13794992864131927,0.9807852506637573,-0.6935197114944458,0.6935200691223145,-0.282339870929718,-0.2705979645252228,0.27059829235076904,0.9238795042037964,-0.544894814491272,0.8154932856559753,0.19509035348892212,-0.5555700063705444,0.8314698338508606,7.549790126404332e-08,-0.10838623344898224,0.16221193969249725,0.9807852506637573,-0.544894814491272,0.8154932856559753,-0.282339870929718,-0.21260739862918854,0.31818991899490356,0.9238795042037964,-0.3086581230163574,0.4619399905204773,0.8314695954322815,-0.39284729957580566,0.5879380106925964,0.7071067690849304,-0.46193957328796387,0.6913419365882874,0.5555701851844788,-0.5132797956466675,0.7681779265403748,0.3826834261417389,-0.21260732412338257,0.5132802128791809,0.8314695954322815,-0.27059781551361084,0.6532816886901855,0.7071067690849304,-0.3181893825531006,0.7681779861450195,0.5555701851844788,-0.3535531759262085,0.8535535335540771,0.3826834261417389,-0.3753299117088318,0.9061275124549866,0.19509035348892212,-0.3826831579208374,0.9238797426223755,7.549790126404332e-08,-0.0746576264500618,0.18024024367332458,0.9807852506637573,-0.3753299117088318,0.9061275124549866,-0.282339870929718,-0.14644642174243927,0.3535536825656891,0.9238795042037964,-0.1913413405418396,0.961939811706543,0.19509035348892212,-0.1802397072315216,0.9061275720596313,0.3826834261417389,-0.19508999586105347,0.9807854890823364,7.549790126404332e-08,-0.038059964776039124,0.19134201109409332,0.9807852506637573,-0.1913413405418396,0.961939811706543,-0.282339870929718,-0.07465757429599762,0.3753305673599243,0.9238795042037964,-0.10838611423969269,0.544895350933075,0.8314695954322815,-0.13794942200183868,0.6935201287269592,0.7071067690849304,-0.1622113734483719,0.8154933452606201,0.5555701851844788,3.191853465978056e-07,0.7071069478988647,0.7071067690849304,3.340865077916533e-07,0.8314697742462158,0.5555701851844788,2.7448186301626265e-07,0.9238796830177307,0.3826834261417389,3.936911525670439e-07,0.9807852506637573,0.19509035348892212,3.7878999137319624e-07,1.000000238418579,7.549790126404332e-08,3.2663592719472945e-07,0.19509060680866241,0.9807852506637573,3.936911525670439e-07,0.9807852506637573,-0.282339870929718,3.191853465978056e-07,0.3826836943626404,0.9238795042037964,3.117347660008818e-07,0.5555704832077026,0.8314695954322815,0.19509074091911316,0.9807854890823364,7.549790126404332e-08,0.038060616701841354,0.19134199619293213,0.9807852506637573,0.19134210050106049,0.9619396924972534,-0.282339870929718,0.07465820759534836,0.37533053755760193,0.9238795042037964,0.10838674008846283,0.544895350933075,0.8314695954322815,0.13795003294944763,0.6935200691223145,0.7071067690849304,0.16221202909946442,0.8154932856559753,0.5555701851844788,0.18024025857448578,0.9061275720596313,0.3826834261417389,0.19134210050106049,0.9619396924972534,0.19509035348892212,0.3181900382041931,0.7681778073310852,0.5555701851844788,0.3535537123680115,0.8535535335540771,0.3826834261417389,0.3753306269645691,0.9061273336410522,0.19509035348892212,0.3826838731765747,0.9238796830177307,7.549790126404332e-08,0.07465826719999313,0.180240198969841,0.9807852506637573,0.3753306269645691,0.9061273336410522,-0.282339870929718,0.14644701778888702,0.3535536229610443,0.9238795042037964,0.21260792016983032,0.5132801532745361,0.8314695954322815,0.2705984115600586,0.6532816290855408,0.7071067690849304,0.10838685184717178,0.16221188008785248,0.9807852506637573,0.5448954105377197,0.8154930472373962,-0.282339870929718,0.555570662021637,0.831469714641571,7.549790126404332e-08,0.2126079499721527,0.3181898593902588,0.9238795042037964,0.3086586892604828,0.4619399309158325,0.8314695954322815,0.39284783601760864,0.5879379510879517,0.7071067690849304,0.4619401693344116,0.691341757774353,0.5555701851844788,0.5132802724838257,0.76817786693573,0.3826834261417389,0.5448954105377197,0.8154930472373962,0.19509035348892212,0.5879381895065308,0.5879377722740173,0.5555701851844788,0.6532818078994751,0.6532816290855408,0.3826834261417389,0.693520188331604,0.6935198307037354,0.19509035348892212,0.7071072459220886,0.7071068286895752,7.549790126404332e-08,0.13795019686222076,0.1379498541355133,0.9807852506637573,0.693520188331604,0.6935198307037354,-0.282339870929718,0.27059850096702576,0.27059823274612427,0.9238795042037964,0.3928478956222534,0.39284759759902954,0.8314695954322815,0.5000003576278687,0.5000000596046448,0.7071067690849304,0.8154934048652649,0.5448949933052063,-0.282339870929718,0.8314700722694397,0.5555702447891235,7.549790126404332e-08,0.3181900978088379,0.21260765194892883,0.9238795042037964,0.4619401693344116,0.3086583614349365,0.8314695954322815,0.5879381895065308,0.3928475081920624,0.7071067690849304,0.6913420557975769,0.4619397222995758,0.5555701851844788,0.7681781053543091,0.5132800936698914,0.3826834261417389,0.8154934048652649,0.5448949933052063,0.19509035348892212,0.16221219301223755,0.10838649421930313,0.9807852506637573,0.8535537123680115,0.3535534739494324,0.3826834261417389,0.9061276316642761,0.3753301501274109,0.19509035348892212,0.9238799810409546,0.3826833963394165,7.549790126404332e-08,0.1802404820919037,0.07465791702270508,0.9807852506637573,0.9061276316642761,0.3753301501274109,-0.282339870929718,0.353553831577301,0.14644670486450195,0.9238795042037964,0.5132803916931152,0.21260759234428406,0.8314695954322815,0.6532818078994751,0.27059802412986755,0.7071067690849304,0.7681780457496643,0.3181895613670349,0.5555701851844788,0.37533071637153625,0.07465790212154388,0.9238795042037964,0.5448955297470093,0.10838642716407776,0.8314695954322815,0.6935202479362488,0.13794966042041779,0.7071067690849304,0.8154933452606201,0.1622115671634674,0.5555701851844788,0.9061277508735657,0.18024002015590668,0.3826834261417389,0.9619399309158325,0.1913416087627411,0.19509035348892212,0.9807857275009155,0.19509024918079376,7.549790126404332e-08,0.19134224951267242,0.0380602702498436,0.9807852506637573,0.9619399309158325,0.1913416087627411,-0.282339870929718,0.923879861831665,6.356849979738399e-08,0.3826834261417389,0.9807853698730469,-8.544311214109257e-08,0.19509035348892212,1.0000003576278687,-1.0034427333494023e-07,7.549790126404332e-08,0.19509084522724152,-7.2120158733923745e-09,0.9807852506637573,0.9807853698730469,-8.544311214109257e-08,-0.282339870929718,0.3826838433742523,4.121675800661251e-08,0.9238795042037964,0.555570662021637,2.6315596812764852e-08,0.8314695954322815,0.7071070671081543,-2.5838467365701945e-08,0.7071067690849304,0.831469714641571,-8.544311214109257e-08,0.5555701851844788,0.5448955297470093,-0.10838636755943298,0.8314695954322815,0.693520188331604,-0.13794972002506256,0.7071067690849304,0.8154932260513306,-0.16221173107624054,0.5555701851844788,0.9061277508735657,-0.18023990094661713,0.3826834261417389,0.961939811706543,-0.19134175777435303,0.19509035348892212,0.980785608291626,-0.19509044289588928,7.549790126404332e-08,0.19134221971035004,-0.03806028142571449,0.9807852506637573,0.961939811706543,-0.19134175777435303,-0.282339870929718,0.3753306567668915,-0.07465781271457672,0.9238795042037964,0.9061274528503418,-0.37533026933670044,0.19509035348892212,0.8535537123680115,-0.35355332493782043,0.3826834261417389,0.9238798022270203,-0.38268357515335083,7.549790126404332e-08,0.1802404373884201,-0.07465790957212448,0.9807852506637573,0.9061274528503418,-0.37533026933670044,-0.282339870929718,0.35355374217033386,-0.1464466005563736,0.9238795042037964,0.5132803916931152,-0.21260753273963928,0.8314695954322815,0.6532817482948303,-0.27059805393218994,0.7071067690849304,0.7681777477264404,-0.3181896507740021,0.5555701851844788,0.5879380702972412,-0.39284747838974,0.7071067690849304,0.6913416981697083,-0.4619396924972534,0.5555701851844788,0.7681780457496643,-0.513279914855957,0.3826834261417389,0.8154931664466858,-0.5448950529098511,0.19509035348892212,0.8314698338508606,-0.5555703639984131,7.549790126404332e-08,0.16221213340759277,-0.10838647186756134,0.9807852506637573,0.8154931664466858,-0.5448950529098511,-0.282339870929718,0.31818997859954834,-0.2126075178384781,0.9238795042037964,0.4619401693344116,-0.30865830183029175,0.8314695954322815,0.7071069478988647,-0.70710688829422,7.549790126404332e-08,0.6935198903083801,-0.6935197710990906,0.19509035348892212,0.1379501223564148,-0.13794980943202972,0.9807852506637573,0.6935198903083801,-0.6935197710990906,-0.282339870929718,0.2705983519554138,-0.27059805393218994,0.9238795042037964,0.39284786581993103,-0.3928475081920624,0.8314695954322815,0.5000002384185791,-0.5,0.7071067690849304,0.5879377722740173,-0.5879376530647278,0.5555701851844788,0.6532817482948303,-0.6532813906669617,0.3826834261417389,0.3928477168083191,-0.5879377722740173,0.7071067690849304,0.308658629655838,-0.4619397819042206,0.8314695954322815,0.4619397819042206,-0.6913415193557739,0.5555701851844788,0.5132802724838257,-0.7681776881217957,0.3826834261417389,0.5448950529098511,-0.8154929280281067,0.19509035348892212,0.5555703639984131,-0.8314696550369263,7.549790126404332e-08,0.10838677734136581,-0.1622118055820465,0.9807852506637573,0.5448950529098511,-0.8154929280281067,-0.282339870929718,0.21260780096054077,-0.3181896507740021,0.9238795042037964,0.38268354535102844,-0.9238795042037964,7.549790126404332e-08,0.07465820759534836,-0.18024009466171265,0.9807852506637573,0.37533023953437805,-0.9061271548271179,-0.282339870929718,0.14644686877727509,-0.3535533547401428,0.9238795042037964,0.21260783076286316,-0.5132799744606018,0.8314695954322815,0.27059826254844666,-0.6532814502716064,0.7071067690849304,0.31818968057632446,-0.7681774497032166,0.5555701851844788,0.3535537123680115,-0.8535533547401428,0.3826834261417389,0.37533023953437805,-0.9061271548271179,0.19509035348892212,0.16221174597740173,-0.8154928088188171,0.5555701851844788,0.1379498839378357,-0.6935198903083801,0.7071067690849304,0.18024027347564697,-0.906127393245697,0.3826834261417389,0.19134174287319183,-0.9619393944740295,0.19509035348892212,0.19509044289588928,-0.9807851910591125,7.549790126404332e-08,0.03806057572364807,-0.19134186208248138,0.9807852506637573,0.19134174287319183,-0.9619393944740295,-0.282339870929718,0.07465810328722,-0.37533020973205566,0.9238795042037964,0.10838666558265686,-0.5448951125144958,0.8314695954322815,3.117347660008818e-07,-0.19509045779705048,0.9807852506637573,9.566792869009078e-08,-0.9807848334312439,-0.282339870929718,1.4037141227163374e-07,-0.9999998211860657,7.549790126404332e-08,2.819324436131865e-07,-0.3826833665370941,0.9238795042037964,2.819324436131865e-07,-0.5555701851844788,0.8314695954322815,1.850748958531767e-07,-0.7071067094802856,0.7071067690849304,1.4037141227163374e-07,-0.8314692378044128,0.5555701851844788,3.191853465978056e-07,-0.9238794445991516,0.3826834261417389,9.566792869009078e-08,-0.9807848334312439,0.19509035348892212,-0.16221146285533905,-0.8154926896095276,0.5555701851844788,-0.13794949650764465,-0.6935198307037354,0.7071067690849304,-0.18023963272571564,-0.9061273336410522,0.3826834261417389,-0.19134153425693512,-0.9619392156600952,0.19509035348892212,-0.1950901597738266,-0.9807850122451782,7.549790126404332e-08,-0.03805994614958763,-0.1913418471813202,0.9807852506637573,-0.19134153425693512,-0.9619392156600952,-0.282339870929718,-0.07465753704309464,-0.37533020973205566,0.9238795042037964,-0.1083860844373703,-0.5448950529098511,0.8314695954322815,-0.37532997131347656,-0.906126856803894,-0.282339870929718,-0.14644630253314972,-0.35355332493782043,0.9238795042037964,-0.2126072347164154,-0.5132798552513123,0.8314695954322815,-0.2705978453159332,-0.6532813310623169,0.7071067690849304,-0.3181893527507782,-0.7681772708892822,0.5555701851844788,-0.35355305671691895,-0.853553295135498,0.3826834261417389,-0.37532997131347656,-0.906126856803894,0.19509035348892212,-0.3826832175254822,-0.9238792061805725,7.549790126404332e-08,-0.07465756684541702,-0.18024007976055145,0.9807852506637573,-0.5132796168327332,-0.7681776285171509,0.3826834261417389,-0.5448946952819824,-0.815492570400238,0.19509035348892212,-0.5555699467658997,-0.8314692378044128,7.549790126404332e-08,-0.10838612914085388,-0.16221177577972412,0.9807852506637573,-0.5448946952819824,-0.815492570400238,-0.282339870929718,-0.21260720491409302,-0.3181895613670349,0.9238795042037964,-0.3086579740047455,-0.46193963289260864,0.8314695954322815,-0.3928472399711609,-0.5879376530647278,0.7071067690849304,-0.46193939447402954,-0.69134122133255,0.5555701851844788,-0.3928471505641937,-0.39284732937812805,0.8314695954322815,-0.4999997317790985,-0.49999985098838806,0.7071067690849304,-0.5879373550415039,-0.5879372954368591,0.5555701851844788,-0.6532810926437378,-0.6532813906669617,0.3826834261417389,-0.6935193538665771,-0.6935193538665771,0.19509035348892212,-0.7071064114570618,-0.707106351852417,7.549790126404332e-08,-0.13794946670532227,-0.13794976472854614,0.9807852506637573,-0.6935193538665771,-0.6935193538665771,-0.282339870929718,-0.2705976963043213,-0.2705979347229004,0.9238795042037964,-0.8154924511909485,-0.5448945760726929,0.19509035348892212,-0.768177330493927,-0.5132798552513123,0.3826834261417389,-0.8314691185951233,-0.5555698275566101,7.549790126404332e-08,-0.16221146285533905,-0.10838642716407776,0.9807852506637573,-0.8154924511909485,-0.5448945760726929,-0.282339870929718,-0.31818926334381104,-0.21260741353034973,0.9238795042037964,-0.46193939447402954,-0.3086581230163574,0.8314695954322815,-0.5879374742507935,-0.39284729957580566,0.7071067690849304,-0.6913411617279053,-0.4619393050670624,0.5555701851844788,-0.5132795572280884,-0.21260738372802734,0.8314695954322815,-0.35355299711227417,-0.14644651114940643,0.9238795042037964,-0.6532811522483826,-0.2705978751182556,0.7071067690849304,-0.7681770920753479,-0.31818920373916626,0.5555701851844788,-0.8535529375076294,-0.35355329513549805,0.3826834261417389,-0.9061266183853149,-0.37532979249954224,0.19509035348892212,-0.9238789081573486,-0.38268303871154785,7.549790126404332e-08,-0.18023976683616638,-0.0746578574180603,0.9807852506637573,-0.9061266183853149,-0.37532979249954224,-0.282339870929718,-0.9619388580322266,-0.1913413405418396,0.19509035348892212,-0.9061269760131836,-0.18023987114429474,0.3826834261417389,-0.98078453540802,-0.19508998095989227,7.549790126404332e-08,-0.19134151935577393,-0.038060225546360016,0.9807852506637573,-0.9619388580322266,-0.1913413405418396,-0.282339870929718,-0.375329852104187,-0.07465773820877075,0.9238795042037964,-0.5448946356773376,-0.10838624089956284,0.8314695954322815,-0.6935195326805115,-0.13794952630996704,0.7071067690849304,-0.8154923915863037,-0.1622113138437271,0.5555701851844788,5.960464477539063e-08,-4.2721556070546285e-08,-0.8600426912307739];
iron_data_ConstData.skydomeNor = [0.5597705245018005,0.0,-0.8286385536193848,0.5489974617958069,-0.10919522494077682,-0.8286385536193848,0.3804132342338562,-0.07565538585186005,-0.921689510345459,0.7101352214813232,0.0,-0.7040314674377441,0.6964934468269348,-0.13852351903915405,-0.7040314674377441,0.8333384394645691,0.0,-0.5527512431144714,0.8173161745071411,-0.16257210075855255,-0.5527512431144714,0.9247413277626038,0.0,-0.3805353045463562,0.9069795608520508,-0.18039490282535553,-0.3805353045463562,0.9809869527816772,0.0,-0.19391460716724396,0.9621570706367493,-0.191381573677063,-0.19391460716724396,0.9998779296875,0.0,-0.01501510664820671,0.9806512594223022,-0.19504378736019135,-0.01501510664820671,0.20096439123153687,0.0,-0.9795831441879272,0.19708853960037231,-0.039185766130685806,-0.9795831441879272,0.0,0.0,-1.0,0.8584856986999512,0.0,0.5128025412559509,0.8419751524925232,-0.1674550622701645,0.5128025412559509,0.3878597319126129,0.0,-0.921689510345459,0.3583483397960663,-0.14841151237487793,-0.921689510345459,0.5171361565589905,-0.2142094224691391,-0.8286385536193848,0.6560564041137695,-0.2717368006706238,-0.7040314674377441,0.7698904275894165,-0.3188879191875458,-0.5527512431144714,0.8543656468391418,-0.35386210680007935,-0.3805353045463562,0.9063386917114258,-0.3754081726074219,-0.19391460716724396,0.9237647652626038,-0.382610559463501,-0.01501510664820671,0.18564409017562866,-0.07690664380788803,-0.9795831441879272,0.7931455373764038,-0.32853174209594727,0.5128025412559509,0.7689138650894165,-0.5137485861778259,-0.3805353045463562,0.8156682252883911,-0.5449995398521423,-0.19391460716724396,0.8313547372817993,-0.5554978847503662,-0.01501510664820671,0.1670888364315033,-0.1116367056965828,-0.9795831441879272,0.713797390460968,-0.4769432544708252,0.5128025412559509,0.32248908281326294,-0.2154911905527115,-0.921689510345459,0.46540728211402893,-0.3109835982322693,-0.8286385536193848,0.5904415845870972,-0.39451277256011963,-0.7040314674377441,0.6928922533988953,-0.46296578645706177,-0.5527512431144714,0.395794540643692,-0.395794540643692,-0.8286385536193848,0.5021210312843323,-0.5021210312843323,-0.7040314674377441,0.5892513990402222,-0.5892513990402222,-0.5527512431144714,0.6538895964622498,-0.6538895964622498,-0.3805353045463562,0.6936551928520203,-0.6936551928520203,-0.19391460716724396,0.7070223093032837,-0.7070223093032837,-0.01501510664820671,0.1420941799879074,-0.1420941799879074,-0.9795831441879272,0.6070436835289001,-0.6070436835289001,0.5128025412559509,0.27426984906196594,-0.27426984906196594,-0.921689510345459,0.5449995398521423,-0.8156682252883911,-0.19391460716724396,0.5554978847503662,-0.8313547372817993,-0.01501510664820671,0.1116367056965828,-0.1670888364315033,-0.9795831441879272,0.4769432544708252,-0.713797390460968,0.5128025412559509,0.2154911905527115,-0.32248908281326294,-0.921689510345459,0.3109835982322693,-0.46540728211402893,-0.8286385536193848,0.39451277256011963,-0.5904415845870972,-0.7040314674377441,0.46296578645706177,-0.6928922533988953,-0.5527512431144714,0.5137485861778259,-0.7689138650894165,-0.3805353045463562,0.2142094224691391,-0.5171361565589905,-0.8286385536193848,0.2717368006706238,-0.6560564041137695,-0.7040314674377441,0.3188879191875458,-0.7698904275894165,-0.5527512431144714,0.35386210680007935,-0.8543656468391418,-0.3805353045463562,0.3754081726074219,-0.9063386917114258,-0.19391460716724396,0.382610559463501,-0.9237647652626038,-0.01501510664820671,0.07690664380788803,-0.18564409017562866,-0.9795831441879272,0.32853174209594727,-0.7931455373764038,0.5128025412559509,0.14841151237487793,-0.3583483397960663,-0.921689510345459,0.191381573677063,-0.9621570706367493,-0.19391460716724396,0.18039490282535553,-0.9069795608520508,-0.3805353045463562,0.19504378736019135,-0.9806512594223022,-0.01501510664820671,0.039185766130685806,-0.19708853960037231,-0.9795831441879272,0.1674550622701645,-0.8419751524925232,0.5128025412559509,0.07565538585186005,-0.3804132342338562,-0.921689510345459,0.10919522494077682,-0.5489974617958069,-0.8286385536193848,0.13852351903915405,-0.6964934468269348,-0.7040314674377441,0.16257210075855255,-0.8173161745071411,-0.5527512431144714,0.0,-0.7101352214813232,-0.7040314674377441,0.0,-0.8333384394645691,-0.5527512431144714,0.0,-0.9247413277626038,-0.3805353045463562,0.0,-0.9809869527816772,-0.19391460716724396,0.0,-0.9998779296875,-0.01501510664820671,0.0,-0.20096439123153687,-0.9795831441879272,0.0,-0.8584856986999512,0.5128025412559509,0.0,-0.3878597319126129,-0.921689510345459,0.0,-0.5597705245018005,-0.8286385536193848,-0.19504378736019135,-0.9806512594223022,-0.01501510664820671,-0.039185766130685806,-0.19708853960037231,-0.9795831441879272,-0.1674550622701645,-0.8419751524925232,0.5128025412559509,-0.07565538585186005,-0.3804132342338562,-0.921689510345459,-0.10919522494077682,-0.5489974617958069,-0.8286385536193848,-0.13852351903915405,-0.6964934468269348,-0.7040314674377441,-0.16257210075855255,-0.8173161745071411,-0.5527512431144714,-0.18039490282535553,-0.9069795608520508,-0.3805353045463562,-0.191381573677063,-0.9621570706367493,-0.19391460716724396,-0.3188879191875458,-0.7698904275894165,-0.5527512431144714,-0.35386210680007935,-0.8543656468391418,-0.3805353045463562,-0.3754081726074219,-0.9063386917114258,-0.19391460716724396,-0.382610559463501,-0.9237647652626038,-0.01501510664820671,-0.07690664380788803,-0.18564409017562866,-0.9795831441879272,-0.32853174209594727,-0.7931455373764038,0.5128025412559509,-0.14841151237487793,-0.3583483397960663,-0.921689510345459,-0.2142094224691391,-0.5171361565589905,-0.8286385536193848,-0.2717368006706238,-0.6560564041137695,-0.7040314674377441,-0.1116367056965828,-0.1670888364315033,-0.9795831441879272,-0.4769432544708252,-0.713797390460968,0.5128025412559509,-0.5554978847503662,-0.8313547372817993,-0.01501510664820671,-0.2154911905527115,-0.32248908281326294,-0.921689510345459,-0.3109835982322693,-0.46540728211402893,-0.8286385536193848,-0.39451277256011963,-0.5904415845870972,-0.7040314674377441,-0.46296578645706177,-0.6928922533988953,-0.5527512431144714,-0.5137485861778259,-0.7689138650894165,-0.3805353045463562,-0.5449995398521423,-0.8156682252883911,-0.19391460716724396,-0.5892513990402222,-0.5892513990402222,-0.5527512431144714,-0.6538895964622498,-0.6538895964622498,-0.3805353045463562,-0.6936551928520203,-0.6936551928520203,-0.19391460716724396,-0.7070223093032837,-0.7070223093032837,-0.01501510664820671,-0.1420941799879074,-0.1420941799879074,-0.9795831441879272,-0.6070436835289001,-0.6070436835289001,0.5128025412559509,-0.27426984906196594,-0.27426984906196594,-0.921689510345459,-0.395794540643692,-0.395794540643692,-0.8286385536193848,-0.5021210312843323,-0.5021210312843323,-0.7040314674377441,-0.713797390460968,-0.4769432544708252,0.5128025412559509,-0.8313547372817993,-0.5554978847503662,-0.01501510664820671,-0.32248908281326294,-0.2154911905527115,-0.921689510345459,-0.46540728211402893,-0.3109835982322693,-0.8286385536193848,-0.5904415845870972,-0.39451277256011963,-0.7040314674377441,-0.6928922533988953,-0.46296578645706177,-0.5527512431144714,-0.7689138650894165,-0.5137485861778259,-0.3805353045463562,-0.8156682252883911,-0.5449995398521423,-0.19391460716724396,-0.1670888364315033,-0.1116367056965828,-0.9795831441879272,-0.8543656468391418,-0.35386210680007935,-0.3805353045463562,-0.9063386917114258,-0.3754081726074219,-0.19391460716724396,-0.9237647652626038,-0.382610559463501,-0.01501510664820671,-0.18564409017562866,-0.07690664380788803,-0.9795831441879272,-0.7931455373764038,-0.32853174209594727,0.5128025412559509,-0.3583483397960663,-0.14841151237487793,-0.921689510345459,-0.5171361565589905,-0.2142094224691391,-0.8286385536193848,-0.6560564041137695,-0.2717368006706238,-0.7040314674377441,-0.7698904275894165,-0.3188879191875458,-0.5527512431144714,-0.3804132342338562,-0.07565538585186005,-0.921689510345459,-0.5489974617958069,-0.10919522494077682,-0.8286385536193848,-0.6964934468269348,-0.13852351903915405,-0.7040314674377441,-0.8173161745071411,-0.16257210075855255,-0.5527512431144714,-0.9069795608520508,-0.18039490282535553,-0.3805353045463562,-0.9621570706367493,-0.191381573677063,-0.19391460716724396,-0.9806512594223022,-0.19504378736019135,-0.01501510664820671,-0.19708853960037231,-0.039185766130685806,-0.9795831441879272,-0.8419751524925232,-0.1674550622701645,0.5128025412559509,-0.9247413277626038,0.0,-0.3805353045463562,-0.9809869527816772,0.0,-0.19391460716724396,-0.9998779296875,0.0,-0.01501510664820671,-0.20096439123153687,0.0,-0.9795831441879272,-0.8584856986999512,0.0,0.5128025412559509,-0.3878597319126129,0.0,-0.921689510345459,-0.5597705245018005,0.0,-0.8286385536193848,-0.7101352214813232,0.0,-0.7040314674377441,-0.8333384394645691,0.0,-0.5527512431144714,-0.5489974617958069,0.10919522494077682,-0.8286385536193848,-0.6964934468269348,0.13852351903915405,-0.7040314674377441,-0.8173161745071411,0.16257210075855255,-0.5527512431144714,-0.9069795608520508,0.18039490282535553,-0.3805353045463562,-0.9621570706367493,0.191381573677063,-0.19391460716724396,-0.9806512594223022,0.19504378736019135,-0.01501510664820671,-0.19708853960037231,0.039185766130685806,-0.9795831441879272,-0.8419751524925232,0.1674550622701645,0.5128025412559509,-0.3804132342338562,0.07565538585186005,-0.921689510345459,-0.9063386917114258,0.3754081726074219,-0.19391460716724396,-0.8543656468391418,0.35386210680007935,-0.3805353045463562,-0.9237647652626038,0.382610559463501,-0.01501510664820671,-0.18564409017562866,0.07690664380788803,-0.9795831441879272,-0.7931455373764038,0.32853174209594727,0.5128025412559509,-0.3583483397960663,0.14841151237487793,-0.921689510345459,-0.5171361565589905,0.2142094224691391,-0.8286385536193848,-0.6560564041137695,0.2717368006706238,-0.7040314674377441,-0.7698904275894165,0.3188879191875458,-0.5527512431144714,-0.5904415845870972,0.39451277256011963,-0.7040314674377441,-0.6928922533988953,0.46296578645706177,-0.5527512431144714,-0.7689138650894165,0.5137485861778259,-0.3805353045463562,-0.8156682252883911,0.5449995398521423,-0.19391460716724396,-0.8313547372817993,0.5554978847503662,-0.01501510664820671,-0.1670888364315033,0.1116367056965828,-0.9795831441879272,-0.713797390460968,0.4769432544708252,0.5128025412559509,-0.32248908281326294,0.2154911905527115,-0.921689510345459,-0.46540728211402893,0.3109835982322693,-0.8286385536193848,-0.7070223093032837,0.7070223093032837,-0.01501510664820671,-0.6936551928520203,0.6936551928520203,-0.19391460716724396,-0.1420941799879074,0.1420941799879074,-0.9795831441879272,-0.6070436835289001,0.6070436835289001,0.5128025412559509,-0.27426984906196594,0.27426984906196594,-0.921689510345459,-0.395794540643692,0.395794540643692,-0.8286385536193848,-0.5021210312843323,0.5021210312843323,-0.7040314674377441,-0.5892513990402222,0.5892513990402222,-0.5527512431144714,-0.6538895964622498,0.6538895964622498,-0.3805353045463562,-0.39451277256011963,0.5904415845870972,-0.7040314674377441,-0.3109835982322693,0.46540728211402893,-0.8286385536193848,-0.46296578645706177,0.6928922533988953,-0.5527512431144714,-0.5137485861778259,0.7689138650894165,-0.3805353045463562,-0.5449995398521423,0.8156682252883911,-0.19391460716724396,-0.5554978847503662,0.8313547372817993,-0.01501510664820671,-0.1116367056965828,0.1670888364315033,-0.9795831441879272,-0.4769432544708252,0.713797390460968,0.5128025412559509,-0.2154911905527115,0.32248908281326294,-0.921689510345459,-0.382610559463501,0.9237647652626038,-0.01501510664820671,-0.07690664380788803,0.18564409017562866,-0.9795831441879272,-0.32853174209594727,0.7931455373764038,0.5128025412559509,-0.14841151237487793,0.3583483397960663,-0.921689510345459,-0.2142094224691391,0.5171361565589905,-0.8286385536193848,-0.2717368006706238,0.6560564041137695,-0.7040314674377441,-0.3188879191875458,0.7698904275894165,-0.5527512431144714,-0.35386210680007935,0.8543656468391418,-0.3805353045463562,-0.3754081726074219,0.9063386917114258,-0.19391460716724396,-0.16257210075855255,0.8173161745071411,-0.5527512431144714,-0.13852351903915405,0.6964934468269348,-0.7040314674377441,-0.18039490282535553,0.9069795608520508,-0.3805353045463562,-0.191381573677063,0.9621570706367493,-0.19391460716724396,-0.19504378736019135,0.9806512594223022,-0.01501510664820671,-0.039185766130685806,0.19708853960037231,-0.9795831441879272,-0.1674550622701645,0.8419751524925232,0.5128025412559509,-0.07565538585186005,0.3804132342338562,-0.921689510345459,-0.10919522494077682,0.5489974617958069,-0.8286385536193848,0.0,0.20096439123153687,-0.9795831441879272,0.0,0.8584856986999512,0.5128025412559509,0.0,0.9998779296875,-0.01501510664820671,0.0,0.3878597319126129,-0.921689510345459,0.0,0.5597705245018005,-0.8286385536193848,0.0,0.7101352214813232,-0.7040314674377441,0.0,0.8333384394645691,-0.5527512431144714,0.0,0.9247413277626038,-0.3805353045463562,0.0,0.9809869527816772,-0.19391460716724396,0.16257210075855255,0.8173161745071411,-0.5527512431144714,0.13852351903915405,0.6964934468269348,-0.7040314674377441,0.18039490282535553,0.9069795608520508,-0.3805353045463562,0.191381573677063,0.9621570706367493,-0.19391460716724396,0.19504378736019135,0.9806512594223022,-0.01501510664820671,0.039185766130685806,0.19708853960037231,-0.9795831441879272,0.1674550622701645,0.8419751524925232,0.5128025412559509,0.07565538585186005,0.3804132342338562,-0.921689510345459,0.10919522494077682,0.5489974617958069,-0.8286385536193848,0.32853174209594727,0.7931455373764038,0.5128025412559509,0.14841151237487793,0.3583483397960663,-0.921689510345459,0.2142094224691391,0.5171361565589905,-0.8286385536193848,0.2717368006706238,0.6560564041137695,-0.7040314674377441,0.3188879191875458,0.7698904275894165,-0.5527512431144714,0.35386210680007935,0.8543656468391418,-0.3805353045463562,0.3754081726074219,0.9063386917114258,-0.19391460716724396,0.382610559463501,0.9237647652626038,-0.01501510664820671,0.07690664380788803,0.18564409017562866,-0.9795831441879272,0.5137485861778259,0.7689138650894165,-0.3805353045463562,0.5449995398521423,0.8156682252883911,-0.19391460716724396,0.5554978847503662,0.8313547372817993,-0.01501510664820671,0.1116367056965828,0.1670888364315033,-0.9795831441879272,0.4769432544708252,0.713797390460968,0.5128025412559509,0.2154911905527115,0.32248908281326294,-0.921689510345459,0.3109835982322693,0.46540728211402893,-0.8286385536193848,0.39451277256011963,0.5904415845870972,-0.7040314674377441,0.46296578645706177,0.6928922533988953,-0.5527512431144714,0.395794540643692,0.395794540643692,-0.8286385536193848,0.5021210312843323,0.5021210312843323,-0.7040314674377441,0.5892513990402222,0.5892513990402222,-0.5527512431144714,0.6538895964622498,0.6538895964622498,-0.3805353045463562,0.6936551928520203,0.6936551928520203,-0.19391460716724396,0.7070223093032837,0.7070223093032837,-0.01501510664820671,0.1420941799879074,0.1420941799879074,-0.9795831441879272,0.6070436835289001,0.6070436835289001,0.5128025412559509,0.27426984906196594,0.27426984906196594,-0.921689510345459,0.8156682252883911,0.5449995398521423,-0.19391460716724396,0.7689138650894165,0.5137485861778259,-0.3805353045463562,0.8313547372817993,0.5554978847503662,-0.01501510664820671,0.1670888364315033,0.1116367056965828,-0.9795831441879272,0.713797390460968,0.4769432544708252,0.5128025412559509,0.32248908281326294,0.2154911905527115,-0.921689510345459,0.46540728211402893,0.3109835982322693,-0.8286385536193848,0.5904415845870972,0.39451277256011963,-0.7040314674377441,0.6928922533988953,0.46296578645706177,-0.5527512431144714,0.5171361565589905,0.2142094224691391,-0.8286385536193848,0.3583483397960663,0.14841151237487793,-0.921689510345459,0.6560564041137695,0.2717368006706238,-0.7040314674377441,0.7698904275894165,0.3188879191875458,-0.5527512431144714,0.8543656468391418,0.35386210680007935,-0.3805353045463562,0.9063386917114258,0.3754081726074219,-0.19391460716724396,0.9237647652626038,0.382610559463501,-0.01501510664820671,0.18564409017562866,0.07690664380788803,-0.9795831441879272,0.7931455373764038,0.32853174209594727,0.5128025412559509,0.9621570706367493,0.191381573677063,-0.19391460716724396,0.9069795608520508,0.18039490282535553,-0.3805353045463562,0.9806512594223022,0.19504378736019135,-0.01501510664820671,0.19708853960037231,0.039185766130685806,-0.9795831441879272,0.8419751524925232,0.1674855798482895,0.5128025412559509,0.3804132342338562,0.07565538585186005,-0.921689510345459,0.5489974617958069,0.10919522494077682,-0.8286385536193848,0.6964934468269348,0.13852351903915405,-0.7040314674377441,0.8173161745071411,0.16257210075855255,-0.5527512431144714,0.0,0.0,0.999969482421875];
iron_data_ConstData.sphereIndices = [0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,11,12,13,14,15,16,14,16,17,18,19,20,18,20,21,22,23,24,22,24,25,26,27,28,26,28,29,30,31,32,33,34,35,33,35,36,37,38,39,37,39,40,41,42,43,41,43,44,45,46,47,45,47,48,49,50,51,49,51,52,53,54,55,53,55,56,57,58,59,60,61,62,60,62,63,64,65,66,64,66,67,68,69,70,68,70,71,72,73,74,72,74,75,76,77,78,79,80,81,82,83,84,82,84,85,86,87,88,86,88,89,90,91,92,90,92,93,94,95,96,94,96,97,98,99,100,98,100,101,102,103,104,105,106,107,108,109,110,108,110,111,112,113,114,112,114,115,116,117,118,116,118,119,120,121,122,123,124,125,126,127,128,126,128,129,130,131,132,130,132,133,134,135,136,134,136,137,138,139,140,138,140,141,142,143,144,142,144,145,146,147,148,146,148,149,150,151,152,150,152,153,154,155,156,154,156,157,158,159,160,158,160,161,162,163,164,162,164,165,166,167,168,166,168,169,170,171,172,170,172,173,174,175,176,177,178,179,180,181,182,180,182,183,184,185,186,184,186,187,188,189,190,188,190,191,192,193,194,195,196,197,198,199,200,198,200,201,202,203,204,202,204,205,206,207,208,206,208,209,210,211,212,210,212,213,214,215,216,214,216,217,218,219,220,221,222,223,224,225,226,224,226,227,228,229,230,228,230,231,232,233,234,232,234,235,236,237,238,236,238,239,240,241,242,243,244,245,243,245,246,247,248,249,247,249,250,251,252,253,251,253,254,255,256,257,255,257,258,259,260,261,259,261,262,263,264,265,263,265,266,267,268,269,270,271,272,270,272,273,274,275,276,274,276,277,278,279,280,278,280,281,282,283,284,282,284,285,286,287,288,286,288,289,290,291,292,293,294,295,296,297,298,296,298,299,300,301,302,300,302,303,304,305,306,304,306,307,308,309,310,308,310,311,312,313,314,315,316,317,318,319,320,318,320,321,322,323,324,322,324,325,326,327,328,326,328,329,330,331,332,330,332,333,334,335,336,337,338,339,340,341,342,340,342,343,344,345,346,344,346,347,348,349,350,348,350,351,352,353,354,352,354,355,356,357,358,356,358,359,360,361,362,363,364,365,363,365,366,367,368,369,367,369,370,371,372,373,371,373,374,375,376,377,375,377,378,379,380,381,379,381,382,383,384,385,383,385,386,387,388,389,390,391,392,390,392,393,394,395,396,394,396,397,398,399,400,398,400,401,402,403,404,402,404,405,406,407,408,409,410,411,412,413,414,412,414,415,416,417,418,416,418,419,420,421,422,420,422,423,424,425,426,424,426,427,428,429,430,428,430,431,432,433,434,435,436,437,438,439,440,438,440,441,442,443,444,442,444,445,446,447,448,446,448,449,450,451,452,453,454,455,456,457,458,456,458,459,460,461,462,460,462,463,464,465,466,464,466,467,468,469,470,468,470,471,472,473,474,472,474,475,476,477,478,476,478,479];
iron_data_ConstData.spherePos = [0.0,0.4619397521018982,-0.19134175777435303,0.0,0.5,-2.1855694143368964e-08,0.19134169816970825,0.4619397521018982,-2.1855694143368964e-08,0.1767766773700714,0.4267766773700714,-0.19134175777435303,0.0,0.4619397521018982,0.19134171307086945,0.0,0.3535533845424652,0.3535533845424652,0.13529899716377258,0.3266407251358032,0.3535533845424652,0.1767766773700714,0.4267766773700714,0.19134171307086945,0.0,0.19134172797203064,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.0732232853770256,0.1767767071723938,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.0,0.19134174287319183,-0.4619397521018982,0.0732232928276062,0.1767767071723938,-0.4619397521018982,0.0,0.3535533845424652,-0.3535533845424652,0.0,0.4619397521018982,-0.19134175777435303,0.1767766773700714,0.4267766773700714,-0.19134175777435303,0.13529899716377258,0.3266407251358032,-0.3535533845424652,0.0,0.5,-2.1855694143368964e-08,0.0,0.4619397521018982,0.19134171307086945,0.1767766773700714,0.4267766773700714,0.19134171307086945,0.19134169816970825,0.4619397521018982,-2.1855694143368964e-08,0.0,0.3535533845424652,0.3535533845424652,0.0,0.19134172797203064,0.4619397521018982,0.0732232853770256,0.1767767071723938,0.4619397521018982,0.13529899716377258,0.3266407251358032,0.3535533845424652,0.0,0.19134174287319183,-0.4619397521018982,0.0,0.3535533845424652,-0.3535533845424652,0.13529899716377258,0.3266407251358032,-0.3535533845424652,0.0732232928276062,0.1767767071723938,-0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.0732232928276062,0.1767767071723938,-0.4619397521018982,0.13529899716377258,0.13529902696609497,-0.4619397521018982,0.13529899716377258,0.3266407251358032,-0.3535533845424652,0.1767766773700714,0.4267766773700714,-0.19134175777435303,0.32664069533348083,0.3266407251358032,-0.19134175777435303,0.24999994039535522,0.2499999850988388,-0.3535533845424652,0.19134169816970825,0.4619397521018982,-2.1855694143368964e-08,0.1767766773700714,0.4267766773700714,0.19134171307086945,0.32664069533348083,0.3266407251358032,0.19134171307086945,0.3535533547401428,0.3535533845424652,-2.1855694143368964e-08,0.13529899716377258,0.3266407251358032,0.3535533845424652,0.0732232853770256,0.1767767071723938,0.4619397521018982,0.1352989822626114,0.13529904186725616,0.4619397521018982,0.24999994039535522,0.2499999850988388,0.3535533845424652,0.0732232928276062,0.1767767071723938,-0.4619397521018982,0.13529899716377258,0.3266407251358032,-0.3535533845424652,0.24999994039535522,0.2499999850988388,-0.3535533845424652,0.13529899716377258,0.13529902696609497,-0.4619397521018982,0.1767766773700714,0.4267766773700714,-0.19134175777435303,0.19134169816970825,0.4619397521018982,-2.1855694143368964e-08,0.3535533547401428,0.3535533845424652,-2.1855694143368964e-08,0.32664069533348083,0.3266407251358032,-0.19134175777435303,0.1767766773700714,0.4267766773700714,0.19134171307086945,0.13529899716377258,0.3266407251358032,0.3535533845424652,0.24999994039535522,0.2499999850988388,0.3535533845424652,0.32664069533348083,0.3266407251358032,0.19134171307086945,0.0732232853770256,0.1767767071723938,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.1352989822626114,0.13529904186725616,0.4619397521018982,0.24999994039535522,0.2499999850988388,0.3535533845424652,0.1352989822626114,0.13529904186725616,0.4619397521018982,0.17677663266658783,0.07322334498167038,0.4619397521018982,0.32664063572883606,0.13529902696609497,0.3535533845424652,0.13529899716377258,0.13529902696609497,-0.4619397521018982,0.24999994039535522,0.2499999850988388,-0.3535533845424652,0.32664063572883606,0.13529902696609497,-0.3535533845424652,0.17677664756774902,0.07322331517934799,-0.4619397521018982,0.32664069533348083,0.3266407251358032,-0.19134175777435303,0.3535533547401428,0.3535533845424652,-2.1855694143368964e-08,0.4619396924972534,0.19134169816970825,-2.1855694143368964e-08,0.42677661776542664,0.1767766773700714,-0.19134175777435303,0.32664069533348083,0.3266407251358032,0.19134171307086945,0.24999994039535522,0.2499999850988388,0.3535533845424652,0.32664063572883606,0.13529902696609497,0.3535533845424652,0.42677661776542664,0.1767766773700714,0.19134171307086945,0.1352989822626114,0.13529904186725616,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.17677663266658783,0.07322334498167038,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.13529899716377258,0.13529902696609497,-0.4619397521018982,0.17677664756774902,0.07322331517934799,-0.4619397521018982,0.24999994039535522,0.2499999850988388,-0.3535533845424652,0.32664069533348083,0.3266407251358032,-0.19134175777435303,0.42677661776542664,0.1767766773700714,-0.19134175777435303,0.32664063572883606,0.13529902696609497,-0.3535533845424652,0.3535533547401428,0.3535533845424652,-2.1855694143368964e-08,0.32664069533348083,0.3266407251358032,0.19134171307086945,0.42677661776542664,0.1767766773700714,0.19134171307086945,0.4619396924972534,0.19134169816970825,-2.1855694143368964e-08,0.17677664756774902,0.07322331517934799,-0.4619397521018982,0.32664063572883606,0.13529902696609497,-0.3535533845424652,0.35355326533317566,3.554926308879658e-08,-0.3535533845424652,0.19134163856506348,2.809868249187275e-08,-0.4619397521018982,0.42677661776542664,0.1767766773700714,-0.19134175777435303,0.4619396924972534,0.19134169816970825,-2.1855694143368964e-08,0.49999988079071045,5.746940701101266e-09,-2.1855694143368964e-08,0.46193966269493103,5.746940701101266e-09,-0.19134175777435303,0.42677661776542664,0.1767766773700714,0.19134171307086945,0.32664063572883606,0.13529902696609497,0.3535533845424652,0.35355326533317566,3.554926308879658e-08,0.3535533845424652,0.46193966269493103,5.746940701101266e-09,0.19134171307086945,0.17677663266658783,0.07322334498167038,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.19134163856506348,6.535158547649189e-08,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.17677664756774902,0.07322331517934799,-0.4619397521018982,0.19134163856506348,2.809868249187275e-08,-0.4619397521018982,0.32664063572883606,0.13529902696609497,-0.3535533845424652,0.42677661776542664,0.1767766773700714,-0.19134175777435303,0.46193966269493103,5.746940701101266e-09,-0.19134175777435303,0.35355326533317566,3.554926308879658e-08,-0.3535533845424652,0.4619396924972534,0.19134169816970825,-2.1855694143368964e-08,0.42677661776542664,0.1767766773700714,0.19134171307086945,0.46193966269493103,5.746940701101266e-09,0.19134171307086945,0.49999988079071045,5.746940701101266e-09,-2.1855694143368964e-08,0.32664063572883606,0.13529902696609497,0.3535533845424652,0.17677663266658783,0.07322334498167038,0.4619397521018982,0.19134163856506348,6.535158547649189e-08,0.4619397521018982,0.35355326533317566,3.554926308879658e-08,0.3535533845424652,0.19134163856506348,6.535158547649189e-08,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.17677661776542664,-0.07322321087121964,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.19134163856506348,2.809868249187275e-08,-0.4619397521018982,0.17677660286426544,-0.07322324812412262,-0.4619397521018982,0.35355326533317566,3.554926308879658e-08,-0.3535533845424652,0.46193966269493103,5.746940701101266e-09,-0.19134175777435303,0.42677655816078186,-0.17677666246891022,-0.19134175777435303,0.3266405761241913,-0.135298952460289,-0.3535533845424652,0.49999988079071045,5.746940701101266e-09,-2.1855694143368964e-08,0.46193966269493103,5.746940701101266e-09,0.19134171307086945,0.42677655816078186,-0.17677666246891022,0.19134171307086945,0.46193960309028625,-0.19134168326854706,-2.1855694143368964e-08,0.35355326533317566,3.554926308879658e-08,0.3535533845424652,0.19134163856506348,6.535158547649189e-08,0.4619397521018982,0.17677661776542664,-0.07322321087121964,0.4619397521018982,0.3266405761241913,-0.135298952460289,0.3535533845424652,0.19134163856506348,2.809868249187275e-08,-0.4619397521018982,0.35355326533317566,3.554926308879658e-08,-0.3535533845424652,0.3266405761241913,-0.135298952460289,-0.3535533845424652,0.17677660286426544,-0.07322324812412262,-0.4619397521018982,0.46193966269493103,5.746940701101266e-09,-0.19134175777435303,0.49999988079071045,5.746940701101266e-09,-2.1855694143368964e-08,0.46193960309028625,-0.19134168326854706,-2.1855694143368964e-08,0.42677655816078186,-0.17677666246891022,-0.19134175777435303,0.46193966269493103,5.746940701101266e-09,0.19134171307086945,0.35355326533317566,3.554926308879658e-08,0.3535533845424652,0.3266405761241913,-0.135298952460289,0.3535533845424652,0.42677655816078186,-0.17677666246891022,0.19134171307086945,0.3266405761241913,-0.135298952460289,-0.3535533845424652,0.42677655816078186,-0.17677666246891022,-0.19134175777435303,0.3266405761241913,-0.32664066553115845,-0.19134175777435303,0.24999982118606567,-0.24999988079071045,-0.3535533845424652,0.46193960309028625,-0.19134168326854706,-2.1855694143368964e-08,0.42677655816078186,-0.17677666246891022,0.19134171307086945,0.3266405761241913,-0.32664066553115845,0.19134171307086945,0.3535532057285309,-0.35355329513549805,-2.1855694143368964e-08,0.3266405761241913,-0.135298952460289,0.3535533845424652,0.17677661776542664,-0.07322321087121964,0.4619397521018982,0.135298952460289,-0.13529890775680542,0.4619397521018982,0.24999982118606567,-0.24999988079071045,0.3535533845424652,0.17677660286426544,-0.07322324812412262,-0.4619397521018982,0.3266405761241913,-0.135298952460289,-0.3535533845424652,0.24999982118606567,-0.24999988079071045,-0.3535533845424652,0.1352989226579666,-0.1352989375591278,-0.4619397521018982,0.42677655816078186,-0.17677666246891022,-0.19134175777435303,0.46193960309028625,-0.19134168326854706,-2.1855694143368964e-08,0.3535532057285309,-0.35355329513549805,-2.1855694143368964e-08,0.3266405761241913,-0.32664066553115845,-0.19134175777435303,0.42677655816078186,-0.17677666246891022,0.19134171307086945,0.3266405761241913,-0.135298952460289,0.3535533845424652,0.24999982118606567,-0.24999988079071045,0.3535533845424652,0.3266405761241913,-0.32664066553115845,0.19134171307086945,0.17677661776542664,-0.07322321087121964,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.135298952460289,-0.13529890775680542,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.17677660286426544,-0.07322324812412262,-0.4619397521018982,0.1352989226579666,-0.1352989375591278,-0.4619397521018982,0.1352989226579666,-0.1352989375591278,-0.4619397521018982,0.24999982118606567,-0.24999988079071045,-0.3535533845424652,0.13529886305332184,-0.3266405761241913,-0.3535533845424652,0.07322320342063904,-0.17677657306194305,-0.4619397521018982,0.3266405761241913,-0.32664066553115845,-0.19134175777435303,0.3535532057285309,-0.35355329513549805,-2.1855694143368964e-08,0.19134151935577393,-0.46193960309028625,-2.1855694143368964e-08,0.17677652835845947,-0.42677655816078186,-0.19134175777435303,0.3266405761241913,-0.32664066553115845,0.19134171307086945,0.24999982118606567,-0.24999988079071045,0.3535533845424652,0.13529886305332184,-0.3266405761241913,0.3535533845424652,0.17677652835845947,-0.42677655816078186,0.19134171307086945,0.135298952460289,-0.13529890775680542,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.07322324067354202,-0.17677655816078186,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.1352989226579666,-0.1352989375591278,-0.4619397521018982,0.07322320342063904,-0.17677657306194305,-0.4619397521018982,0.24999982118606567,-0.24999988079071045,-0.3535533845424652,0.3266405761241913,-0.32664066553115845,-0.19134175777435303,0.17677652835845947,-0.42677655816078186,-0.19134175777435303,0.13529886305332184,-0.3266405761241913,-0.3535533845424652,0.3535532057285309,-0.35355329513549805,-2.1855694143368964e-08,0.3266405761241913,-0.32664066553115845,0.19134171307086945,0.17677652835845947,-0.42677655816078186,0.19134171307086945,0.19134151935577393,-0.46193960309028625,-2.1855694143368964e-08,0.24999982118606567,-0.24999988079071045,0.3535533845424652,0.135298952460289,-0.13529890775680542,0.4619397521018982,0.07322324067354202,-0.17677655816078186,0.4619397521018982,0.13529886305332184,-0.3266405761241913,0.3535533845424652,0.17677652835845947,-0.42677655816078186,-0.19134175777435303,0.19134151935577393,-0.46193960309028625,-2.1855694143368964e-08,-1.630022552490118e-07,-0.4999997615814209,-2.1855694143368964e-08,-1.4810109405516414e-07,-0.46193957328796387,-0.19134175777435303,0.17677652835845947,-0.42677655816078186,0.19134171307086945,0.13529886305332184,-0.3266405761241913,0.3535533845424652,-1.3319993286131648e-07,-0.3535531759262085,0.3535533845424652,-1.4810109405516414e-07,-0.46193957328796387,0.19134171307086945,0.07322324067354202,-0.17677655816078186,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-3.634237799587936e-08,-0.1913415640592575,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,0.07322320342063904,-0.17677657306194305,-0.4619397521018982,-8.104586157742233e-08,-0.1913415640592575,-0.4619397521018982,0.13529886305332184,-0.3266405761241913,-0.3535533845424652,0.17677652835845947,-0.42677655816078186,-0.19134175777435303,-1.4810109405516414e-07,-0.46193957328796387,-0.19134175777435303,-1.3319993286131648e-07,-0.3535531759262085,-0.3535533845424652,0.19134151935577393,-0.46193960309028625,-2.1855694143368964e-08,0.17677652835845947,-0.42677655816078186,0.19134171307086945,-1.4810109405516414e-07,-0.46193957328796387,0.19134171307086945,-1.630022552490118e-07,-0.4999997615814209,-2.1855694143368964e-08,0.13529886305332184,-0.3266405761241913,0.3535533845424652,0.07322324067354202,-0.17677655816078186,0.4619397521018982,-3.634237799587936e-08,-0.1913415640592575,0.4619397521018982,-1.3319993286131648e-07,-0.3535531759262085,0.3535533845424652,0.07322320342063904,-0.17677657306194305,-0.4619397521018982,0.13529886305332184,-0.3266405761241913,-0.3535533845424652,-1.3319993286131648e-07,-0.3535531759262085,-0.3535533845424652,-8.104586157742233e-08,-0.1913415640592575,-0.4619397521018982,0.0,7.549790126404332e-08,-0.5,-8.104586157742233e-08,-0.1913415640592575,-0.4619397521018982,-0.07322335243225098,-0.17677651345729828,-0.4619397521018982,-1.3319993286131648e-07,-0.3535531759262085,-0.3535533845424652,-1.4810109405516414e-07,-0.46193957328796387,-0.19134175777435303,-0.17677679657936096,-0.4267764389514923,-0.19134175777435303,-0.13529910147190094,-0.3266404867172241,-0.3535533845424652,-1.630022552490118e-07,-0.4999997615814209,-2.1855694143368964e-08,-1.4810109405516414e-07,-0.46193957328796387,0.19134171307086945,-0.17677679657936096,-0.4267764389514923,0.19134171307086945,-0.1913418173789978,-0.4619394838809967,-2.1855694143368964e-08,-1.3319993286131648e-07,-0.3535531759262085,0.3535533845424652,-3.634237799587936e-08,-0.1913415640592575,0.4619397521018982,-0.07322331517934799,-0.17677652835845947,0.4619397521018982,-0.13529910147190094,-0.3266404867172241,0.3535533845424652,-8.104586157742233e-08,-0.1913415640592575,-0.4619397521018982,-1.3319993286131648e-07,-0.3535531759262085,-0.3535533845424652,-0.13529910147190094,-0.3266404867172241,-0.3535533845424652,-0.07322335243225098,-0.17677651345729828,-0.4619397521018982,-1.4810109405516414e-07,-0.46193957328796387,-0.19134175777435303,-1.630022552490118e-07,-0.4999997615814209,-2.1855694143368964e-08,-0.1913418173789978,-0.4619394838809967,-2.1855694143368964e-08,-0.17677679657936096,-0.4267764389514923,-0.19134175777435303,-1.4810109405516414e-07,-0.46193957328796387,0.19134171307086945,-1.3319993286131648e-07,-0.3535531759262085,0.3535533845424652,-0.13529910147190094,-0.3266404867172241,0.3535533845424652,-0.17677679657936096,-0.4267764389514923,0.19134171307086945,-3.634237799587936e-08,-0.1913415640592575,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-0.07322331517934799,-0.17677652835845947,0.4619397521018982,-0.1913418173789978,-0.4619394838809967,-2.1855694143368964e-08,-0.17677679657936096,-0.4267764389514923,0.19134171307086945,-0.3266407549381256,-0.32664042711257935,0.19134171307086945,-0.3535534143447876,-0.35355305671691895,-2.1855694143368964e-08,-0.13529910147190094,-0.3266404867172241,0.3535533845424652,-0.07322331517934799,-0.17677652835845947,0.4619397521018982,-0.13529899716377258,-0.13529886305332184,0.4619397521018982,-0.25,-0.24999970197677612,0.3535533845424652,-0.07322335243225098,-0.17677651345729828,-0.4619397521018982,-0.13529910147190094,-0.3266404867172241,-0.3535533845424652,-0.25,-0.24999970197677612,-0.3535533845424652,-0.13529902696609497,-0.13529883325099945,-0.4619397521018982,-0.17677679657936096,-0.4267764389514923,-0.19134175777435303,-0.1913418173789978,-0.4619394838809967,-2.1855694143368964e-08,-0.3535534143447876,-0.35355305671691895,-2.1855694143368964e-08,-0.3266407549381256,-0.32664042711257935,-0.19134175777435303,-0.17677679657936096,-0.4267764389514923,0.19134171307086945,-0.13529910147190094,-0.3266404867172241,0.3535533845424652,-0.25,-0.24999970197677612,0.3535533845424652,-0.3266407549381256,-0.32664042711257935,0.19134171307086945,-0.07322331517934799,-0.17677652835845947,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-0.13529899716377258,-0.13529886305332184,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,-0.07322335243225098,-0.17677651345729828,-0.4619397521018982,-0.13529902696609497,-0.13529883325099945,-0.4619397521018982,-0.13529910147190094,-0.3266404867172241,-0.3535533845424652,-0.17677679657936096,-0.4267764389514923,-0.19134175777435303,-0.3266407549381256,-0.32664042711257935,-0.19134175777435303,-0.25,-0.24999970197677612,-0.3535533845424652,-0.13529902696609497,-0.13529883325099945,-0.4619397521018982,-0.25,-0.24999970197677612,-0.3535533845424652,-0.32664066553115845,-0.1352987438440323,-0.3535533845424652,-0.17677664756774902,-0.07322311401367188,-0.4619397521018982,-0.3266407549381256,-0.32664042711257935,-0.19134175777435303,-0.3535534143447876,-0.35355305671691895,-2.1855694143368964e-08,-0.4619396924972534,-0.19134138524532318,-2.1855694143368964e-08,-0.42677661776542664,-0.17677639424800873,-0.19134175777435303,-0.3266407549381256,-0.32664042711257935,0.19134171307086945,-0.25,-0.24999970197677612,0.3535533845424652,-0.32664066553115845,-0.1352987438440323,0.3535533845424652,-0.42677661776542664,-0.17677639424800873,0.19134171307086945,-0.13529899716377258,-0.13529886305332184,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-0.17677663266658783,-0.07322315126657486,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,-0.13529902696609497,-0.13529883325099945,-0.4619397521018982,-0.17677664756774902,-0.07322311401367188,-0.4619397521018982,-0.25,-0.24999970197677612,-0.3535533845424652,-0.3266407549381256,-0.32664042711257935,-0.19134175777435303,-0.42677661776542664,-0.17677639424800873,-0.19134175777435303,-0.32664066553115845,-0.1352987438440323,-0.3535533845424652,-0.3535534143447876,-0.35355305671691895,-2.1855694143368964e-08,-0.3266407549381256,-0.32664042711257935,0.19134171307086945,-0.42677661776542664,-0.17677639424800873,0.19134171307086945,-0.4619396924972534,-0.19134138524532318,-2.1855694143368964e-08,-0.25,-0.24999970197677612,0.3535533845424652,-0.13529899716377258,-0.13529886305332184,0.4619397521018982,-0.17677663266658783,-0.07322315126657486,0.4619397521018982,-0.32664066553115845,-0.1352987438440323,0.3535533845424652,-0.42677661776542664,-0.17677639424800873,0.19134171307086945,-0.32664066553115845,-0.1352987438440323,0.3535533845424652,-0.35355323553085327,2.4416550559180905e-07,0.3535533845424652,-0.46193960309028625,2.590666667856567e-07,0.19134171307086945,-0.17677663266658783,-0.07322315126657486,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-0.19134162366390228,1.2495623025188252e-07,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,-0.17677664756774902,-0.07322311401367188,-0.4619397521018982,-0.19134162366390228,1.6965971383342549e-07,-0.4619397521018982,-0.32664066553115845,-0.1352987438440323,-0.3535533845424652,-0.42677661776542664,-0.17677639424800873,-0.19134175777435303,-0.46193960309028625,2.590666667856567e-07,-0.19134175777435303,-0.35355323553085327,2.4416550559180905e-07,-0.3535533845424652,-0.4619396924972534,-0.19134138524532318,-2.1855694143368964e-08,-0.42677661776542664,-0.17677639424800873,0.19134171307086945,-0.46193960309028625,2.590666667856567e-07,0.19134171307086945,-0.4999998211860657,3.037701503671997e-07,-2.1855694143368964e-08,-0.32664066553115845,-0.1352987438440323,0.3535533845424652,-0.17677663266658783,-0.07322315126657486,0.4619397521018982,-0.19134162366390228,1.2495623025188252e-07,0.4619397521018982,-0.35355323553085327,2.4416550559180905e-07,0.3535533845424652,-0.17677664756774902,-0.07322311401367188,-0.4619397521018982,-0.32664066553115845,-0.1352987438440323,-0.3535533845424652,-0.35355323553085327,2.4416550559180905e-07,-0.3535533845424652,-0.19134162366390228,1.6965971383342549e-07,-0.4619397521018982,-0.42677661776542664,-0.17677639424800873,-0.19134175777435303,-0.4619396924972534,-0.19134138524532318,-2.1855694143368964e-08,-0.4999998211860657,3.037701503671997e-07,-2.1855694143368964e-08,-0.46193960309028625,2.590666667856567e-07,-0.19134175777435303,0.0,7.549790126404332e-08,-0.5,-0.19134162366390228,1.6965971383342549e-07,-0.4619397521018982,-0.17677657306194305,0.07322343438863754,-0.4619397521018982,-0.35355323553085327,2.4416550559180905e-07,-0.3535533845424652,-0.46193960309028625,2.590666667856567e-07,-0.19134175777435303,-0.4267764687538147,0.17677688598632812,-0.19134175777435303,-0.3266405165195465,0.1352991908788681,-0.3535533845424652,-0.4999998211860657,3.037701503671997e-07,-2.1855694143368964e-08,-0.46193960309028625,2.590666667856567e-07,0.19134171307086945,-0.4267764687538147,0.17677688598632812,0.19134171307086945,-0.4619394838809967,0.19134193658828735,-2.1855694143368964e-08,-0.35355323553085327,2.4416550559180905e-07,0.3535533845424652,-0.19134162366390228,1.2495623025188252e-07,0.4619397521018982,-0.17677658796310425,0.07322338968515396,0.4619397521018982,-0.3266405165195465,0.1352991908788681,0.3535533845424652,-0.19134162366390228,1.6965971383342549e-07,-0.4619397521018982,-0.35355323553085327,2.4416550559180905e-07,-0.3535533845424652,-0.3266405165195465,0.1352991908788681,-0.3535533845424652,-0.17677657306194305,0.07322343438863754,-0.4619397521018982,-0.46193960309028625,2.590666667856567e-07,-0.19134175777435303,-0.4999998211860657,3.037701503671997e-07,-2.1855694143368964e-08,-0.4619394838809967,0.19134193658828735,-2.1855694143368964e-08,-0.4267764687538147,0.17677688598632812,-0.19134175777435303,-0.46193960309028625,2.590666667856567e-07,0.19134171307086945,-0.35355323553085327,2.4416550559180905e-07,0.3535533845424652,-0.3266405165195465,0.1352991908788681,0.3535533845424652,-0.4267764687538147,0.17677688598632812,0.19134171307086945,-0.19134162366390228,1.2495623025188252e-07,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-0.17677658796310425,0.07322338968515396,0.4619397521018982,-0.3266405165195465,0.1352991908788681,0.3535533845424652,-0.17677658796310425,0.07322338968515396,0.4619397521018982,-0.1352989226579666,0.13529905676841736,0.4619397521018982,-0.2499997317790985,0.2500000596046448,0.3535533845424652,-0.17677657306194305,0.07322343438863754,-0.4619397521018982,-0.3266405165195465,0.1352991908788681,-0.3535533845424652,-0.2499997317790985,0.2500000596046448,-0.3535533845424652,-0.13529889285564423,0.13529910147190094,-0.4619397521018982,-0.4267764687538147,0.17677688598632812,-0.19134175777435303,-0.4619394838809967,0.19134193658828735,-2.1855694143368964e-08,-0.35355302691459656,0.35355350375175476,-2.1855694143368964e-08,-0.32664045691490173,0.3266408443450928,-0.19134175777435303,-0.4267764687538147,0.17677688598632812,0.19134171307086945,-0.3266405165195465,0.1352991908788681,0.3535533845424652,-0.2499997317790985,0.2500000596046448,0.3535533845424652,-0.32664045691490173,0.3266408443450928,0.19134171307086945,-0.17677658796310425,0.07322338968515396,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-0.1352989226579666,0.13529905676841736,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,-0.17677657306194305,0.07322343438863754,-0.4619397521018982,-0.13529889285564423,0.13529910147190094,-0.4619397521018982,-0.3266405165195465,0.1352991908788681,-0.3535533845424652,-0.4267764687538147,0.17677688598632812,-0.19134175777435303,-0.32664045691490173,0.3266408443450928,-0.19134175777435303,-0.2499997317790985,0.2500000596046448,-0.3535533845424652,-0.4619394838809967,0.19134193658828735,-2.1855694143368964e-08,-0.4267764687538147,0.17677688598632812,0.19134171307086945,-0.32664045691490173,0.3266408443450928,0.19134171307086945,-0.35355302691459656,0.35355350375175476,-2.1855694143368964e-08,-0.13529889285564423,0.13529910147190094,-0.4619397521018982,-0.2499997317790985,0.2500000596046448,-0.3535533845424652,-0.13529875874519348,0.32664069533348083,-0.3535533845424652,-0.07322317361831665,0.1767767071723938,-0.4619397521018982,-0.32664045691490173,0.3266408443450928,-0.19134175777435303,-0.35355302691459656,0.35355350375175476,-2.1855694143368964e-08,-0.1913413554430008,0.4619397521018982,-2.1855694143368964e-08,-0.17677639424800873,0.426776647567749,-0.19134175777435303,-0.32664045691490173,0.3266408443450928,0.19134171307086945,-0.2499997317790985,0.2500000596046448,0.3535533845424652,-0.13529875874519348,0.32664069533348083,0.3535533845424652,-0.17677639424800873,0.426776647567749,0.19134171307086945,-0.1352989226579666,0.13529905676841736,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,-0.07322321832180023,0.1767766922712326,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,-0.13529889285564423,0.13529910147190094,-0.4619397521018982,-0.07322317361831665,0.1767767071723938,-0.4619397521018982,-0.2499997317790985,0.2500000596046448,-0.3535533845424652,-0.32664045691490173,0.3266408443450928,-0.19134175777435303,-0.17677639424800873,0.426776647567749,-0.19134175777435303,-0.13529875874519348,0.32664069533348083,-0.3535533845424652,-0.35355302691459656,0.35355350375175476,-2.1855694143368964e-08,-0.32664045691490173,0.3266408443450928,0.19134171307086945,-0.17677639424800873,0.426776647567749,0.19134171307086945,-0.1913413554430008,0.4619397521018982,-2.1855694143368964e-08,-0.2499997317790985,0.2500000596046448,0.3535533845424652,-0.1352989226579666,0.13529905676841736,0.4619397521018982,-0.07322321832180023,0.1767766922712326,0.4619397521018982,-0.13529875874519348,0.32664069533348083,0.3535533845424652,-0.07322321832180023,0.1767766922712326,0.4619397521018982,-6.975096056294205e-08,4.660612162865618e-08,0.5,0.0,0.19134172797203064,0.4619397521018982,0.0,7.549790126404332e-08,-0.5,-0.07322317361831665,0.1767767071723938,-0.4619397521018982,0.0,0.19134174287319183,-0.4619397521018982,-0.13529875874519348,0.32664069533348083,-0.3535533845424652,-0.17677639424800873,0.426776647567749,-0.19134175777435303,0.0,0.4619397521018982,-0.19134175777435303,0.0,0.3535533845424652,-0.3535533845424652,-0.1913413554430008,0.4619397521018982,-2.1855694143368964e-08,-0.17677639424800873,0.426776647567749,0.19134171307086945,0.0,0.4619397521018982,0.19134171307086945,0.0,0.5,-2.1855694143368964e-08,0.0,0.19134172797203064,0.4619397521018982,0.0,0.3535533845424652,0.3535533845424652,-0.13529875874519348,0.32664069533348083,0.3535533845424652,-0.07322321832180023,0.1767766922712326,0.4619397521018982,-0.07322317361831665,0.1767767071723938,-0.4619397521018982,-0.13529875874519348,0.32664069533348083,-0.3535533845424652,0.0,0.3535533845424652,-0.3535533845424652,0.0,0.19134174287319183,-0.4619397521018982,-0.17677639424800873,0.426776647567749,-0.19134175777435303,-0.1913413554430008,0.4619397521018982,-2.1855694143368964e-08,0.0,0.5,-2.1855694143368964e-08,0.0,0.4619397521018982,-0.19134175777435303,-0.17677639424800873,0.426776647567749,0.19134171307086945,-0.13529875874519348,0.32664069533348083,0.3535533845424652,0.0,0.3535533845424652,0.3535533845424652,0.0,0.4619397521018982,0.19134171307086945];
iron_data_ConstData.coneIndices = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,50,51,52,52,53,54,54,55,56,57,58,59,60,61,62,62,63,64,64,65,48,48,50,52,52,54,56,56,60,62,62,64,48,48,52,56,56,62,48];
iron_data_ConstData.conePos = [0.0,0.5,-1.0,0.0,0.0,0.0,0.19134172797203064,0.4619397521018982,-1.0,0.19134172797203064,0.4619397521018982,-1.0,0.0,0.0,0.0,0.3535533845424652,0.3535533845424652,-1.0,0.3535533845424652,0.3535533845424652,-1.0,0.0,0.0,0.0,0.4619397521018982,0.19134171307086945,-1.0,0.4619397521018982,0.19134171307086945,-1.0,0.0,0.0,0.0,0.5,-2.1855694143368964e-08,-1.0,0.5,-2.1855694143368964e-08,-1.0,0.0,0.0,0.0,0.4619397521018982,-0.19134175777435303,-1.0,0.4619397521018982,-0.19134175777435303,-1.0,0.0,0.0,0.0,0.3535533845424652,-0.3535533845424652,-1.0,0.3535533845424652,-0.3535533845424652,-1.0,0.0,0.0,0.0,0.19134174287319183,-0.4619397521018982,-1.0,0.19134174287319183,-0.4619397521018982,-1.0,0.0,0.0,0.0,7.549790126404332e-08,-0.5,-1.0,7.549790126404332e-08,-0.5,-1.0,0.0,0.0,0.0,-0.1913416087627411,-0.46193981170654297,-1.0,-0.1913416087627411,-0.46193981170654297,-1.0,0.0,0.0,0.0,-0.35355329513549805,-0.35355350375175476,-1.0,-0.35355329513549805,-0.35355350375175476,-1.0,0.0,0.0,0.0,-0.4619397521018982,-0.19134178757667542,-1.0,-0.4619397521018982,-0.19134178757667542,-1.0,0.0,0.0,0.0,-0.5,5.962440319251527e-09,-1.0,-0.5,5.962440319251527e-09,-1.0,0.0,0.0,0.0,-0.4619397222995758,0.1913418024778366,-1.0,-0.4619397222995758,0.1913418024778366,-1.0,0.0,0.0,0.0,-0.35355326533317566,0.35355350375175476,-1.0,-0.35355326533317566,0.35355350375175476,-1.0,0.0,0.0,0.0,-0.19134148955345154,0.46193987131118774,-1.0,-0.19134148955345154,0.46193987131118774,-1.0,0.0,0.0,0.0,0.0,0.5,-1.0,-0.19134148955345154,0.46193987131118774,-1.0,0.0,0.5,-1.0,0.19134172797203064,0.4619397521018982,-1.0,0.3535533845424652,0.3535533845424652,-1.0,0.4619397521018982,0.19134171307086945,-1.0,0.5,-2.1855694143368964e-08,-1.0,0.4619397521018982,-0.19134175777435303,-1.0,0.3535533845424652,-0.3535533845424652,-1.0,0.19134174287319183,-0.4619397521018982,-1.0,0.19134174287319183,-0.4619397521018982,-1.0,7.549790126404332e-08,-0.5,-1.0,-0.1913416087627411,-0.46193981170654297,-1.0,-0.1913416087627411,-0.46193981170654297,-1.0,-0.35355329513549805,-0.35355350375175476,-1.0,-0.4619397521018982,-0.19134178757667542,-1.0,-0.5,5.962440319251527e-09,-1.0,-0.4619397222995758,0.1913418024778366,-1.0,-0.35355326533317566,0.35355350375175476,-1.0];
iron_data_GreasePencilData.frameEnd = 0;
iron_data_GreasePencilData.first = true;
iron_data_MaterialData.uidCounter = 0;
iron_data_MaterialContext.num = 0;
iron_data_MeshData.ForceCpuSkinning = false;
iron_data_RenderPath.voxelized = 0;
iron_data_RenderPath.voxelizeFrame = 2;
iron_data_RenderPath.gpFrame = 0;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
iron_math_Mat4.helpVec = new iron_math_Vec4();
iron_math_Mat4.helpMat = iron_math_Mat4.identity();
iron_math_Quat.helpVec0 = new iron_math_Vec4();
iron_math_Quat.helpVec1 = new iron_math_Vec4();
iron_math_Quat.helpVec2 = new iron_math_Vec4();
iron_object_Animation.m1 = iron_math_Mat4.identity();
iron_object_Animation.m2 = iron_math_Mat4.identity();
iron_object_Animation.vpos = new iron_math_Vec4();
iron_object_Animation.vpos2 = new iron_math_Vec4();
iron_object_Animation.vscl = new iron_math_Vec4();
iron_object_Animation.vscl2 = new iron_math_Vec4();
iron_object_Animation.q1 = new iron_math_Quat();
iron_object_Animation.q2 = new iron_math_Quat();
iron_object_BoneAnimation.m1 = iron_math_Mat4.identity();
iron_object_BoneAnimation.vpos = new iron_math_Vec4();
iron_object_BoneAnimation.vscl = new iron_math_Vec4();
iron_object_BoneAnimation.q1 = new iron_math_Quat();
iron_object_BoneAnimation.q2 = new iron_math_Quat();
iron_object_Object.uidCounter = 0;
iron_object_Object.seed = 1;
iron_object_CameraObject.temp = new iron_math_Vec4();
iron_object_CameraObject.sphereCenter = new iron_math_Vec4();
iron_object_CameraObject.q = new iron_math_Quat();
iron_object_LampObject.m = iron_math_Mat4.identity();
iron_object_LampObject.p1 = new iron_math_Vec4();
iron_object_LampObject.p2 = new iron_math_Vec4();
iron_object_LampObject.p3 = new iron_math_Vec4();
iron_object_Transform.temp = iron_math_Mat4.identity();
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
iron_object_Uniforms.biasMat = new iron_math_Mat4(0.5,0.0,0.0,0.5,0.0,-0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat = iron_math_Mat4.identity();
iron_object_Uniforms.helpMat2 = iron_math_Mat4.identity();
iron_object_Uniforms.helpMat3 = iron_math_Mat3.identity();
iron_object_Uniforms.helpVec = new iron_math_Vec4();
iron_object_Uniforms.helpVec2 = new iron_math_Vec4();
iron_object_Uniforms.helpQuat = new iron_math_Quat();
iron_system_Input.occupied = false;
iron_system_Input.gamepads = [];
iron_system_Mouse.buttons = ["left","right","middle"];
iron_system_Keyboard.keys = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9",".",",","space","backspace","tab","enter","shift","ctrl","alt","esc","del","back","up","right","left","down"];
iron_system_Gamepad.buttonsPS = ["cross","circle","square","triangle","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
iron_system_Time.step = 0.0166666666666666664;
iron_system_Time.delta = 0.0166666666666666664;
iron_system_Time.last = 0.0;
iron_system_Time.realDelta = 0.0;
iron_system_Tween.eases = [iron_system_Tween.easeLinear,iron_system_Tween.easeExpoOut];
iron_system_Tween.anims = [];
iron_system_Tween.map = new haxe_ds_ObjectMap();
iron_system_Tween.comps = ["x","y","z","w"];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
kha__$Color_Color_$Impl_$.Black = -16777216;
kha__$Color_Color_$Impl_$.White = -1;
kha__$Color_Color_$Impl_$.Red = -65536;
kha__$Color_Color_$Impl_$.Blue = -16776961;
kha__$Color_Color_$Impl_$.Green = -16711936;
kha__$Color_Color_$Impl_$.Magenta = -65281;
kha__$Color_Color_$Impl_$.Yellow = -256;
kha__$Color_Color_$Impl_$.Cyan = -16711681;
kha__$Color_Color_$Impl_$.Purple = -8388480;
kha__$Color_Color_$Impl_$.Pink = -16181;
kha__$Color_Color_$Impl_$.Orange = -23296;
kha__$Color_Color_$Impl_$.Transparent = 0;
kha__$Color_Color_$Impl_$.invMaxChannelValue = 0.00392156862745098;
kha_FontStyle.Default = new kha_FontStyle(false,false,false);
kha_Scheduler.timeWarpSaveTime = 10.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.sdfgen_fragData0 = "s3295:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIGludCBtZXNodmVydHM7CnVuaWZvcm0gc2FtcGxlcjJEIG1lc2h0ZXg7CgppbiB2ZWMyIHRleENvb3JkOwpvdXQgdmVjNCBmcmFnQ29sb3I7CgppdmVjMiBnZXRjbyhpbnQgaSkKewogICAgcmV0dXJuIGl2ZWMyKGkgJSAxNjM4NCwgaSAvIDE2Mzg0KTsKfQoKZmxvYXQgZG90Mih2ZWMzIHYpCnsKICAgIHJldHVybiBkb3Qodiwgdik7Cn0KCmZsb2F0IHVkVHJpYW5nbGUodmVjMyBwLCB2ZWMzIGEsIHZlYzMgYiwgdmVjMyBjKQp7CiAgICB2ZWMzIGJhID0gYiAtIGE7CiAgICB2ZWMzIHBhID0gcCAtIGE7CiAgICB2ZWMzIGNiID0gYyAtIGI7CiAgICB2ZWMzIHBiID0gcCAtIGI7CiAgICB2ZWMzIGFjID0gYSAtIGM7CiAgICB2ZWMzIHBjID0gcCAtIGM7CiAgICB2ZWMzIG5vciA9IGNyb3NzKGJhLCBhYyk7CiAgICBmbG9hdCBfNTQ7CiAgICBpZiAoKChzaWduKGRvdChjcm9zcyhiYSwgbm9yKSwgcGEpKSArIHNpZ24oZG90KGNyb3NzKGNiLCBub3IpLCBwYikpKSArIHNpZ24oZG90KGNyb3NzKGFjLCBub3IpLCBwYykpKSA8IDIuMCkKICAgIHsKICAgICAgICBfNTQgPSBtaW4obWluKGRvdDIoKGJhICogY2xhbXAoZG90KGJhLCBwYSkgLyBkb3QyKGJhKSwgMC4wLCAxLjApKSAtIHBhKSwgZG90MigoY2IgKiBjbGFtcChkb3QoY2IsIHBiKSAvIGRvdDIoY2IpLCAwLjAsIDEuMCkpIC0gcGIpKSwgZG90MigoYWMgKiBjbGFtcChkb3QoYWMsIHBjKSAvIGRvdDIoYWMpLCAwLjAsIDEuMCkpIC0gcGMpKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBfNTQgPSAoZG90KG5vciwgcGEpICogZG90KG5vciwgcGEpKSAvIGRvdDIobm9yKTsKICAgIH0KICAgIHJldHVybiBzcXJ0KF81NCk7Cn0KCmludCBoaXRUcmlhbmdsZSh2ZWMzIG9yaWcsIHZlYzMgZGlyLCB2ZWMzIHYwLCB2ZWMzIHYxLCB2ZWMzIHYyKQp7CiAgICB2ZWMzIGUxID0gdjEgLSB2MDsKICAgIHZlYzMgZTIgPSB2MiAtIHYwOwogICAgdmVjMyBwdmVjID0gY3Jvc3MoZGlyLCBlMik7CiAgICBmbG9hdCBkZXQgPSBkb3QoZTEsIHB2ZWMpOwogICAgaWYgKChkZXQgPCA5Ljk5OTk5OTkzOTIyNTI5MDI5MDc3ODUwMjgyMTkyMjNlLTA5KSAmJiAoZGV0ID4gLTkuOTk5OTk5OTM5MjI1MjkwMjkwNzc4NTAyODIxOTIyM2UtMDkpKQogICAgewogICAgICAgIHJldHVybiAwOwogICAgfQogICAgZmxvYXQgaW52X2RldCA9IDEuMCAvIGRldDsKICAgIHZlYzMgdHZlYyA9IG9yaWcgLSB2MDsKICAgIGZsb2F0IHUgPSBkb3QodHZlYywgcHZlYykgKiBpbnZfZGV0OwogICAgaWYgKCh1IDwgMC4wKSB8fCAodSA%IDEuMCkpCiAgICB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB2ZWMzIHF2ZWMgPSBjcm9zcyh0dmVjLCBlMSk7CiAgICBmbG9hdCB2ID0gZG90KGRpciwgcXZlYykgKiBpbnZfZGV0OwogICAgZmxvYXQgXzE4NSA9IHY7CiAgICBib29sIF8xODYgPSBfMTg1IDwgMC4wOwogICAgYm9vbCBfMTk0OwogICAgaWYgKCFfMTg2KQogICAgewogICAgICAgIF8xOTQgPSAodSArIHYpID4gMS4wOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF8xOTQgPSBfMTg2OwogICAgfQogICAgaWYgKF8xOTQpCiAgICB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gMTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjMiBjbyA9IHRleENvb3JkICogdmVjMigyMDAuMCwgNDAwMDAuMCk7CiAgICB2ZWMzIHBvcyA9IHZlYzMoZmxvYXQoaW50KGNvLngpICUgMjAwKSwgZmxvYXQoaW50KGNvLnkpICUgMjAwKSwgKGZsb2F0KGludChjby54IC8gMjAwLjApKSAqIDIwMC4wKSArIGZsb2F0KGludChjby55IC8gMjAwLjApKSk7CiAgICBwb3MgPSAoKHBvcyAvIHZlYzMoMjAwLjApKSAqIDIuMCkgLSB2ZWMzKDEuMCk7CiAgICBmbG9hdCBkaXN0ID0gMTAwMDAuMDsKICAgIHZlYzMgY29sID0gdmVjMygwLjApOwogICAgaW50IGhpdHMgPSAwOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBtZXNodmVydHM7IGkgKz0gMykKICAgIHsKICAgICAgICB2ZWMzIGEgPSB0ZXhlbEZldGNoKG1lc2h0ZXgsIGdldGNvKGkpLCAwKS54eXo7CiAgICAgICAgdmVjMyBiID0gdGV4ZWxGZXRjaChtZXNodGV4LCBnZXRjbyhpICsgMSksIDApLnh5ejsKICAgICAgICB2ZWMzIGMgPSB0ZXhlbEZldGNoKG1lc2h0ZXgsIGdldGNvKGkgKyAyKSwgMCkueHl6OwogICAgICAgIGZsb2F0IGQgPSB1ZFRyaWFuZ2xlKHBvcywgYSwgYiwgYyk7CiAgICAgICAgZGlzdCA9IG1pbihkaXN0LCBkKTsKICAgICAgICBoaXRzICs9IGhpdFRyaWFuZ2xlKHBvcywgdmVjMygxLjAsIDAuMCwgMC4wKSwgYSwgYiwgYyk7CiAgICB9CiAgICBmbG9hdCBkaXN0b3V0ID0gYWJzKGRpc3QpOwogICAgZnJhZ0NvbG9yLnggPSBkaXN0b3V0Owp9Cgo";
kha_Shaders.sdfgen_vertData0 = "s331:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo";
kha_Shaders.painter_colored_fragData0 = "s274:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgpvdXQgdmVjNCBGcmFnQ29sb3I7CmluIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIEZyYWdDb2xvciA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_vertData0 = "s439:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData0 = "s508:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_image_fragData0 = "s506:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7CgppbiB2ZWMyIHRleENvb3JkOwppbiB2ZWM0IGNvbG9yOwpvdXQgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZSh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgRnJhZ0NvbG9yID0gdGV4Y29sb3I7Cn0KCg";
kha_Shaders.painter_text_fragData0 = "s402:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7CgpvdXQgdmVjNCBGcmFnQ29sb3I7CmluIHZlYzQgZnJhZ21lbnRDb2xvcjsKaW4gdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIEZyYWdDb2xvciA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUodGV4LCB0ZXhDb29yZCkueCAqIGZyYWdtZW50Q29sb3Iudyk7Cn0KCg";
kha_Shaders.painter_text_vertData0 = "s530:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_video_vertData0 = "s508:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_fragData0 = "s506:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7CgppbiB2ZWMyIHRleENvb3JkOwppbiB2ZWM0IGNvbG9yOwpvdXQgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZSh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgRnJhZ0NvbG9yID0gdGV4Y29sb3I7Cn0KCg";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.mouseLockListeners = [];
kha_audio2_Audio1.channelCount = 16;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_Graphics._glyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) {
			var i = _g1++;
			_g.push(i);
		}
	}
	$r = _g;
	return $r;
}(this));
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 9;
kha_graphics4_ColoredShaderPainter.bufferSize = 100;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 100;
kha_graphics4_TextShaderPainter.bufferSize = 100;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_internal_BytesBlob.bufferSize = 2000;
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_network_ControllerBuilder.nextId = 0;
kha_network_Session.START = 0;
kha_network_Session.ENTITY_UPDATES = 1;
kha_network_Session.CONTROLLER_UPDATES = 2;
kha_network_Session.REMOTE_CALL = 3;
kha_network_Session.PING = 4;
kha_network_Session.ERROR = 5;
kha_network_Session.PLAYER_UPDATES = 6;
kha_network_Session.RPC_SERVER = 0;
kha_network_Session.RPC_ALL = 1;
kha_network_SyncBuilder.nextId = 0;
kha_network_SyncBuilder.objects = [];
Main.main();

//# sourceMappingURL=krom.js.temp.map